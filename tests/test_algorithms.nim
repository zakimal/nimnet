import unittest

import tables
import sets

import nimnet
import nimnet/generators
import nimnet/algorithms

const DELTA = 1e-15
proc equal(a, b: float): bool =
  if DELTA < abs(a - b):
      return false
  return true

# -------------------------------------------------------------------
# Approximations and Heuristics
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Assortativity
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Asteroidal
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Bipartite
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Boundary
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Centrality
# -------------------------------------------------------------------

test "degree centrality for undirected graph":
  let karate = karateClubGraph()
  let got = degreeCentrality(karate)
  let expected = {0: 0.48484848484848486, 1: 0.2727272727272727, 2: 0.30303030303030304, 3: 0.18181818181818182, 4: 0.09090909090909091, 5: 0.12121212121212122, 6: 0.12121212121212122, 7: 0.12121212121212122, 8: 0.15151515151515152, 9: 0.06060606060606061, 10: 0.09090909090909091, 11: 0.030303030303030304, 12: 0.06060606060606061, 13: 0.15151515151515152, 14: 0.06060606060606061, 15: 0.06060606060606061, 16: 0.06060606060606061, 17: 0.06060606060606061, 18: 0.06060606060606061, 19: 0.09090909090909091, 20: 0.06060606060606061, 21: 0.06060606060606061, 22: 0.06060606060606061, 23: 0.15151515151515152, 24: 0.09090909090909091, 25: 0.09090909090909091, 26: 0.06060606060606061, 27: 0.12121212121212122, 28: 0.09090909090909091, 29: 0.12121212121212122, 30: 0.12121212121212122, 31: 0.18181818181818182, 32: 0.36363636363636365, 33: 0.5151515151515151}.toTable()
  for (node, val) in got.pairs():
    check equal(val, expected[node]) == true

test "in-degree centrality for directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = inDegreeCentrality(dkarate)
  let expected = {0: 0.0, 1: 0.030303030303030304, 2: 0.06060606060606061, 3: 0.09090909090909091, 4: 0.030303030303030304, 5: 0.030303030303030304, 6: 0.09090909090909091, 7: 0.12121212121212122, 8: 0.06060606060606061, 10: 0.09090909090909091, 11: 0.030303030303030304, 12: 0.06060606060606061, 13: 0.12121212121212122, 17: 0.06060606060606061, 19: 0.06060606060606061, 21: 0.06060606060606061, 31: 0.12121212121212122, 30: 0.06060606060606061, 9: 0.030303030303030304, 27: 0.09090909090909091, 28: 0.030303030303030304, 32: 0.33333333333333337, 16: 0.06060606060606061, 33: 0.5151515151515151, 14: 0.0, 15: 0.0, 18: 0.0, 20: 0.0, 22: 0.0, 23: 0.0, 25: 0.06060606060606061, 29: 0.06060606060606061, 24: 0.0, 26: 0.0}.toTable()
  for (node, val) in got.pairs():
    check equal(val, expected[node]) == true

test "out-degree centrality for directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = outDegreeCentrality(dkarate)
  let expected = {0: 0.48484848484848486, 1: 0.24242424242424243, 2: 0.24242424242424243, 3: 0.09090909090909091, 4: 0.06060606060606061, 5: 0.09090909090909091, 6: 0.030303030303030304, 7: 0.0, 8: 0.09090909090909091, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.030303030303030304, 17: 0.0, 19: 0.030303030303030304, 21: 0.0, 31: 0.06060606060606061, 30: 0.06060606060606061, 9: 0.030303030303030304, 27: 0.030303030303030304, 28: 0.06060606060606061, 32: 0.030303030303030304, 16: 0.0, 33: 0.0, 14: 0.06060606060606061, 15: 0.06060606060606061, 18: 0.06060606060606061, 20: 0.06060606060606061, 22: 0.06060606060606061, 23: 0.15151515151515152, 25: 0.030303030303030304, 29: 0.06060606060606061, 24: 0.09090909090909091, 26: 0.06060606060606061}.toTable()
  for (node, val) in got.pairs():
    check equal(val, expected[node]) == true

# -------------------------------------------------------------------
# Chains
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Chordal
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Clique
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Clutering
# -------------------------------------------------------------------

test "triangles in graph":
  let karate = karateClubGraph()
  let got = karate.triangles()
  let expected = {0: 18, 1: 12, 2: 11, 3: 10, 4: 2, 5: 3, 6: 3, 7: 6, 8: 5, 9: 0, 10: 2, 11: 0, 12: 1, 13: 6, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1, 21: 1, 22: 1, 23: 4, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1, 29: 4, 30: 3, 31: 3, 32: 13, 33: 15}.toTable()
  for (node, numTri) in got.pairs():
    check numTri == expected[node]

# -------------------------------------------------------------------
# Coloring
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Communicability
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Communities
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Components
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Connectivity
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Cores
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Covering
# -------------------------------------------------------------------

test "core number of graph":
  let karate = karateClubGraph()
  let got = coreNumber(karate)
  let expected = {0: 4, 1: 4, 2: 4, 3: 4, 4: 3, 5: 3, 6: 3, 7: 4, 8: 4, 9: 2, 10: 3, 11: 1, 12: 2, 13: 4, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 3, 20: 2, 21: 2, 22: 2, 23: 3, 24: 3, 25: 3, 26: 2, 27: 3, 28: 3, 29: 3, 30: 4, 31: 3, 32: 4, 33: 4}.toTable()
  for (node, val) in got.pairs():
    check val == expected[node]

test "core number of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = coreNumber(dkarate)
  let expected = {0: 4, 1: 4, 2: 4, 3: 4, 4: 3, 5: 3, 6: 3, 7: 4, 8: 4, 10: 3, 11: 1, 12: 2, 13: 4, 17: 2, 19: 3, 21: 2, 31: 3, 30: 4, 9: 2, 27: 3, 28: 3, 32: 4, 16: 2, 33: 4, 14: 2, 15: 2, 18: 2, 20: 2, 22: 2, 23: 3, 25: 3, 29: 3, 24: 3, 26: 2}.toTable()
  for (node, val) in got.pairs():
    check val == expected[node]

test "k core of graph":
  let karate = karateClubGraph()
  let got = kCore(karate)
  check got.isDirected() == false
  check got.edges() == @[(0, 1), (0, 2), (0, 3), (0, 7), (0, 8), (0, 13), (1, 2), (1, 3), (1, 7), (1, 13), (1, 30), (2, 3), (2, 7), (2, 8), (2, 13), (2, 32), (3, 7), (3, 13), (8, 30), (8, 32), (8, 33), (13, 33), (30, 32), (30, 33), (32, 33)]

test "k core of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = kCore(dkarate)
  check got.isDirected() == true
  check got.edges() == @[(0, 1), (0, 2), (0, 3), (0, 7), (0, 8), (0, 13), (1, 2), (1, 3), (1, 7), (1, 13), (1, 30), (2, 3), (2, 7), (2, 8), (2, 13), (2, 32), (3, 7), (3, 13), (8, 30), (8, 32), (8, 33), (13, 33), (30, 32), (30, 33), (32, 33)]

test "k shell of graph":
  let karate = karateClubGraph()
  let got = kShell(karate, 3)
  check got.isDirected() == false
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (23, 25), (23, 27), (23, 29), (24, 25), (24, 27), (24, 31), (25, 31), (28, 31)]

test "k shell of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = kShell(dkarate, 3)
  check got.isDirected() == true
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (23, 25), (23, 27), (23, 29), (24, 25), (24, 27), (24, 31), (25, 31), (28, 31)]

test "k crust of graph":
  let karate = karateClubGraph()
  let got = kCrust(karate, 3)
  check got.isDirected() == false
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (23, 25), (23, 27), (23, 29), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (28, 31)]

test "k crust of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = kCrust(dkarate, 3)
  check got.isDirected() == true
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (23, 25), (23, 27), (23, 29), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (28, 31)]

test "k corona of graph":
  let karate = karateClubGraph()
  let got = kCorona(karate, 3)
  check got.isDirected() == false
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (24, 25)]

test "k corona of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = kCorona(dkarate, 3)
  check got.isDirected() == true
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (24, 25)]

test "k truss of graph":
  let karate = karateClubGraph()
  let got = kTruss(karate, 4)
  check got.isDirected() == false
  check got.edges() == [(0, 1), (0, 2), (0, 3), (0, 7), (0, 13), (1, 2), (1, 3), (1, 7), (1, 13), (2, 3), (2, 7), (2, 13), (3, 7), (3, 13), (8, 30), (8, 32), (8, 33), (23, 29), (23, 32), (23, 33), (29, 32), (29, 33), (30, 32), (30, 33), (32, 33)]

test "onion layers of graph":
  let karate = karateClubGraph()
  let got = onionLayers(karate)
  let expected = {11: 1, 9: 2, 12: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 20: 2, 21: 2, 22: 2, 26: 2, 4: 3, 5: 3, 6: 3, 10: 3, 19: 3, 24: 3, 25: 3, 28: 3, 29: 3, 23: 4, 27: 4, 31: 4, 7: 5, 30: 5, 32: 5, 33: 5, 8: 6, 1: 6, 3: 6, 13: 6, 0: 7, 2: 7}.toTable()
  for (node, val) in got.pairs():
    check val == expected[node]

# -------------------------------------------------------------------
# Cycle
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Cuts
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# D-Separation
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# DAG
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Distance Measures
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Distance-Regular Graphs
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Dominance
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Dominating Sets
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Efficiency
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Eulerian
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Flows
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Graph Hashing
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Graphical Degree Sequence
# -------------------------------------------------------------------

test "check whether the degree sequence is valid":
  let karate = pathGraph(4)
  var sequence: seq[int] = @[]
  for node in karate.nodes():
    sequence.add(karate.degree(node))
  check isGraphical(sequence) == true

test "check whether the degree sequence is valid":
  let dkarate = pathDiGraph(4)
  var inSequence: seq[int] = @[]
  var outSequence: seq[int] = @[]
  for node in dkarate.nodes():
    inSequence.add(dkarate.inDegree(node))
    outSequence.add(dkarate.outDegree(node))
  check isDiGraphical(inSequence, outSequence) == true

test "check whether the degree sequence is valid":
  let karate = karateClubGraph()
  var sequence: seq[int] = @[]
  for node in karate.nodes():
    sequence.add(karate.degree(node))
  check isGraphical(sequence) == true

test "check whether the degree sequence is valid":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var inSequence: seq[int] = @[]
  var outSequence: seq[int] = @[]
  for node in dkarate.nodes():
    inSequence.add(dkarate.inDegree(node))
    outSequence.add(dkarate.outDegree(node))
  check isDiGraphical(inSequence, outSequence) == true

# -------------------------------------------------------------------
# Hierarchy
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Hybrid
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Isolates
# -------------------------------------------------------------------

test "isolated nodes in graph":
  let G = newGraph()
  G.addEdge(1, 2)
  G.addNode(3)
  check G.isolates() == @[3]
  check G.isIsolate(1) == false
  check G.isIsolate(3) == true
  check G.numberOfIsolates() == 1

test "isolated nodes in directed graph":
  let DG = newDiGraph()
  DG.addEdge(1, 2)
  DG.addNode(3)
  check DG.isolates() == @[3]
  check DG.isIsolate(1) == false
  check DG.isIsolate(3) == true
  check DG.numberOfIsolates() == 1

# -------------------------------------------------------------------
# Isomorphism
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Link Analysis
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Link Prediction
# -------------------------------------------------------------------

test "resource allocation index":
  let karate = karateClubGraph()
  let got = resourceAllocationIndex(karate)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 0.1),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 0.5),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 0.16666666666666666),
    ((0, 25), 0.16666666666666666),
    ((0, 26), 0.0),
    ((0, 27), 0.1),
    ((0, 28), 0.26666666666666666),
    ((0, 29), 0.0),
    ((0, 30), 0.3111111111111111),
    ((0, 32), 0.4666666666666667),
    ((0, 33), 0.9),
    ((1, 4), 0.0625),
    ((1, 5), 0.0625),
    ((1, 6), 0.0625),
    ((1, 8), 0.4125),
    ((1, 9), 0.1),
    ((1, 10), 0.0625),
    ((1, 11), 0.0625),
    ((1, 12), 0.22916666666666666),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 0.1),
    ((1, 28), 0.1),
    ((1, 29), 0.0),
    ((1, 31), 0.0625),
    ((1, 32), 0.35),
    ((1, 33), 0.7833333333333333),
    ((2, 4), 0.0625),
    ((2, 5), 0.0625),
    ((2, 6), 0.0625),
    ((2, 10), 0.0625),
    ((2, 11), 0.0625),
    ((2, 12), 0.22916666666666666),
    ((2, 14), 0.08333333333333333),
    ((2, 15), 0.08333333333333333),
    ((2, 16), 0.0),
    ((2, 17), 0.1736111111111111),
    ((2, 18), 0.08333333333333333),
    ((2, 19), 0.1736111111111111),
    ((2, 20), 0.08333333333333333),
    ((2, 21), 0.1736111111111111),
    ((2, 22), 0.08333333333333333),
    ((2, 23), 0.3333333333333333),
    ((2, 24), 0.25),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 0.08333333333333333),
    ((2, 30), 0.39444444444444443),
    ((2, 31), 0.47916666666666663),
    ((2, 33), 1.5666666666666664),
    ((3, 4), 0.0625),
    ((3, 5), 0.0625),
    ((3, 6), 0.0625),
    ((3, 8), 0.1625),
    ((3, 9), 0.1),
    ((3, 10), 0.0625),
    ((3, 11), 0.0625),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 0.1736111111111111),
    ((3, 18), 0.0),
    ((3, 19), 0.1736111111111111),
    ((3, 20), 0.0),
    ((3, 21), 0.1736111111111111),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 0.1),
    ((3, 28), 0.1),
    ((3, 29), 0.0),
    ((3, 30), 0.1111111111111111),
    ((3, 31), 0.0625),
    ((3, 32), 0.1),
    ((3, 33), 0.2),
    ((4, 5), 0.6458333333333333),
    ((4, 7), 0.0625),
    ((4, 8), 0.0625),
    ((4, 9), 0.0),
    ((4, 11), 0.0625),
    ((4, 12), 0.0625),
    ((4, 13), 0.0625),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 0.25),
    ((4, 17), 0.0625),
    ((4, 18), 0.0),
    ((4, 19), 0.0625),
    ((4, 20), 0.0),
    ((4, 21), 0.0625),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 0.0625),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 0.0625),
    ((5, 8), 0.0625),
    ((5, 9), 0.0),
    ((5, 11), 0.0625),
    ((5, 12), 0.0625),
    ((5, 13), 0.0625),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 0.0625),
    ((5, 18), 0.0),
    ((5, 19), 0.0625),
    ((5, 20), 0.0),
    ((5, 21), 0.0625),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 0.0625),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 0.0625),
    ((6, 8), 0.0625),
    ((6, 9), 0.0),
    ((6, 10), 0.6458333333333333),
    ((6, 11), 0.0625),
    ((6, 12), 0.0625),
    ((6, 13), 0.0625),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 0.0625),
    ((6, 18), 0.0),
    ((6, 19), 0.0625),
    ((6, 20), 0.0),
    ((6, 21), 0.0625),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 0.0625),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 0.1625),
    ((7, 9), 0.1),
    ((7, 10), 0.0625),
    ((7, 11), 0.0625),
    ((7, 12), 0.22916666666666666),
    ((7, 13), 0.44027777777777777),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 0.1736111111111111),
    ((7, 18), 0.0),
    ((7, 19), 0.1736111111111111),
    ((7, 20), 0.0),
    ((7, 21), 0.1736111111111111),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 0.1),
    ((7, 28), 0.1),
    ((7, 29), 0.0),
    ((7, 30), 0.1111111111111111),
    ((7, 31), 0.0625),
    ((7, 32), 0.1),
    ((7, 33), 0.0),
    ((8, 9), 0.1588235294117647),
    ((8, 10), 0.0625),
    ((8, 11), 0.0625),
    ((8, 12), 0.0625),
    ((8, 13), 0.2213235294117647),
    ((8, 14), 0.14215686274509803),
    ((8, 15), 0.14215686274509803),
    ((8, 16), 0.0),
    ((8, 17), 0.0625),
    ((8, 18), 0.14215686274509803),
    ((8, 19), 0.1213235294117647),
    ((8, 20), 0.14215686274509803),
    ((8, 21), 0.0625),
    ((8, 22), 0.14215686274509803),
    ((8, 23), 0.14215686274509803),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 0.058823529411764705),
    ((8, 27), 0.1588235294117647),
    ((8, 28), 0.1588235294117647),
    ((8, 29), 0.14215686274509803),
    ((8, 31), 0.20465686274509803),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 0.1588235294117647),
    ((9, 14), 0.058823529411764705),
    ((9, 15), 0.058823529411764705),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 0.058823529411764705),
    ((9, 19), 0.058823529411764705),
    ((9, 20), 0.058823529411764705),
    ((9, 21), 0.0),
    ((9, 22), 0.058823529411764705),
    ((9, 23), 0.058823529411764705),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 0.058823529411764705),
    ((9, 27), 0.1588235294117647),
    ((9, 28), 0.1588235294117647),
    ((9, 29), 0.058823529411764705),
    ((9, 30), 0.058823529411764705),
    ((9, 31), 0.058823529411764705),
    ((9, 32), 0.1588235294117647),
    ((10, 11), 0.0625),
    ((10, 12), 0.0625),
    ((10, 13), 0.0625),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 0.25),
    ((10, 17), 0.0625),
    ((10, 18), 0.0),
    ((10, 19), 0.0625),
    ((10, 20), 0.0),
    ((10, 21), 0.0625),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 0.0625),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 0.0625),
    ((11, 13), 0.0625),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 0.0625),
    ((11, 18), 0.0),
    ((11, 19), 0.0625),
    ((11, 20), 0.0),
    ((11, 21), 0.0625),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 0.0625),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 0.22916666666666666),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 0.0625),
    ((12, 18), 0.0),
    ((12, 19), 0.0625),
    ((12, 20), 0.0),
    ((12, 21), 0.0625),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 0.0625),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 0.058823529411764705),
    ((13, 15), 0.058823529411764705),
    ((13, 16), 0.0),
    ((13, 17), 0.1736111111111111),
    ((13, 18), 0.058823529411764705),
    ((13, 19), 0.23243464052287582),
    ((13, 20), 0.058823529411764705),
    ((13, 21), 0.1736111111111111),
    ((13, 22), 0.058823529411764705),
    ((13, 23), 0.058823529411764705),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 0.058823529411764705),
    ((13, 27), 0.1588235294117647),
    ((13, 28), 0.1588235294117647),
    ((13, 29), 0.058823529411764705),
    ((13, 30), 0.16993464052287582),
    ((13, 31), 0.1213235294117647),
    ((13, 32), 0.1588235294117647),
    ((14, 15), 0.14215686274509803),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 0.14215686274509803),
    ((14, 19), 0.058823529411764705),
    ((14, 20), 0.14215686274509803),
    ((14, 21), 0.0),
    ((14, 22), 0.14215686274509803),
    ((14, 23), 0.14215686274509803),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 0.058823529411764705),
    ((14, 27), 0.058823529411764705),
    ((14, 28), 0.058823529411764705),
    ((14, 29), 0.14215686274509803),
    ((14, 30), 0.14215686274509803),
    ((14, 31), 0.14215686274509803),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 0.14215686274509803),
    ((15, 19), 0.058823529411764705),
    ((15, 20), 0.14215686274509803),
    ((15, 21), 0.0),
    ((15, 22), 0.14215686274509803),
    ((15, 23), 0.14215686274509803),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 0.058823529411764705),
    ((15, 27), 0.058823529411764705),
    ((15, 28), 0.058823529411764705),
    ((15, 29), 0.14215686274509803),
    ((15, 30), 0.14215686274509803),
    ((15, 31), 0.14215686274509803),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 0.1736111111111111),
    ((17, 20), 0.0),
    ((17, 21), 0.1736111111111111),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 0.1111111111111111),
    ((17, 31), 0.0625),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 0.058823529411764705),
    ((18, 20), 0.14215686274509803),
    ((18, 21), 0.0),
    ((18, 22), 0.14215686274509803),
    ((18, 23), 0.14215686274509803),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 0.058823529411764705),
    ((18, 27), 0.058823529411764705),
    ((18, 28), 0.058823529411764705),
    ((18, 29), 0.14215686274509803),
    ((18, 30), 0.14215686274509803),
    ((18, 31), 0.14215686274509803),
    ((19, 20), 0.058823529411764705),
    ((19, 21), 0.1736111111111111),
    ((19, 22), 0.058823529411764705),
    ((19, 23), 0.058823529411764705),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 0.058823529411764705),
    ((19, 27), 0.058823529411764705),
    ((19, 28), 0.058823529411764705),
    ((19, 29), 0.058823529411764705),
    ((19, 30), 0.16993464052287582),
    ((19, 31), 0.1213235294117647),
    ((19, 32), 0.058823529411764705),
    ((20, 21), 0.0),
    ((20, 22), 0.14215686274509803),
    ((20, 23), 0.14215686274509803),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 0.058823529411764705),
    ((20, 27), 0.058823529411764705),
    ((20, 28), 0.058823529411764705),
    ((20, 29), 0.14215686274509803),
    ((20, 30), 0.14215686274509803),
    ((20, 31), 0.14215686274509803),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 0.1111111111111111),
    ((21, 31), 0.0625),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 0.14215686274509803),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 0.058823529411764705),
    ((22, 27), 0.058823529411764705),
    ((22, 28), 0.058823529411764705),
    ((22, 29), 0.14215686274509803),
    ((22, 30), 0.14215686274509803),
    ((22, 31), 0.14215686274509803),
    ((23, 24), 0.5833333333333333),
    ((23, 26), 0.3088235294117647),
    ((23, 28), 0.058823529411764705),
    ((23, 30), 0.14215686274509803),
    ((23, 31), 0.47549019607843135),
    ((24, 26), 0.0),
    ((24, 28), 0.16666666666666666),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 0.16666666666666666),
    ((24, 33), 0.41666666666666663),
    ((25, 26), 0.0),
    ((25, 27), 0.5333333333333333),
    ((25, 28), 0.16666666666666666),
    ((25, 29), 0.2),
    ((25, 30), 0.0),
    ((25, 32), 0.3666666666666667),
    ((25, 33), 0.3666666666666667),
    ((26, 27), 0.058823529411764705),
    ((26, 28), 0.058823529411764705),
    ((26, 30), 0.058823529411764705),
    ((26, 31), 0.058823529411764705),
    ((26, 32), 0.3088235294117647),
    ((27, 28), 0.1588235294117647),
    ((27, 29), 0.25882352941176473),
    ((27, 30), 0.058823529411764705),
    ((27, 31), 0.39215686274509803),
    ((27, 32), 0.35882352941176476),
    ((28, 29), 0.058823529411764705),
    ((28, 30), 0.058823529411764705),
    ((28, 32), 0.3254901960784314),
    ((29, 30), 0.14215686274509803),
    ((29, 31), 0.14215686274509803),
    ((30, 31), 0.14215686274509803)
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "jaccard coefficient":
  let karate = karateClubGraph()
  let got = jaccardCoefficient(karate)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 0.058823529411764705),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 0.125),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 0.05555555555555555),
    ((0, 25), 0.05555555555555555),
    ((0, 26), 0.0),
    ((0, 27), 0.05263157894736842),
    ((0, 28), 0.11764705882352941),
    ((0, 29), 0.0),
    ((0, 30), 0.1111111111111111),
    ((0, 32), 0.12),
    ((0, 33), 0.13793103448275862),
    ((1, 4), 0.09090909090909091),
    ((1, 5), 0.08333333333333333),
    ((1, 6), 0.08333333333333333),
    ((1, 8), 0.2727272727272727),
    ((1, 9), 0.1),
    ((1, 10), 0.09090909090909091),
    ((1, 11), 0.1111111111111111),
    ((1, 12), 0.2222222222222222),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 0.08333333333333333),
    ((1, 28), 0.09090909090909091),
    ((1, 29), 0.0),
    ((1, 31), 0.07142857142857142),
    ((1, 32), 0.10526315789473684),
    ((1, 33), 0.13043478260869565),
    ((2, 4), 0.08333333333333333),
    ((2, 5), 0.07692307692307693),
    ((2, 6), 0.07692307692307693),
    ((2, 10), 0.08333333333333333),
    ((2, 11), 0.1),
    ((2, 12), 0.2),
    ((2, 14), 0.09090909090909091),
    ((2, 15), 0.09090909090909091),
    ((2, 16), 0.0),
    ((2, 17), 0.2),
    ((2, 18), 0.09090909090909091),
    ((2, 19), 0.18181818181818182),
    ((2, 20), 0.09090909090909091),
    ((2, 21), 0.2),
    ((2, 22), 0.09090909090909091),
    ((2, 23), 0.15384615384615385),
    ((2, 24), 0.08333333333333333),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 0.07692307692307693),
    ((2, 30), 0.2727272727272727),
    ((2, 31), 0.23076923076923078),
    ((2, 33), 0.2857142857142857),
    ((3, 4), 0.125),
    ((3, 5), 0.1111111111111111),
    ((3, 6), 0.1111111111111111),
    ((3, 8), 0.2222222222222222),
    ((3, 9), 0.14285714285714285),
    ((3, 10), 0.125),
    ((3, 11), 0.16666666666666666),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 0.3333333333333333),
    ((3, 18), 0.0),
    ((3, 19), 0.2857142857142857),
    ((3, 20), 0.0),
    ((3, 21), 0.3333333333333333),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 0.1111111111111111),
    ((3, 28), 0.125),
    ((3, 29), 0.0),
    ((3, 30), 0.1111111111111111),
    ((3, 31), 0.09090909090909091),
    ((3, 32), 0.058823529411764705),
    ((3, 33), 0.045454545454545456),
    ((4, 5), 0.75),
    ((4, 7), 0.16666666666666666),
    ((4, 8), 0.14285714285714285),
    ((4, 9), 0.0),
    ((4, 11), 0.3333333333333333),
    ((4, 12), 0.25),
    ((4, 13), 0.14285714285714285),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 0.25),
    ((4, 17), 0.25),
    ((4, 18), 0.0),
    ((4, 19), 0.2),
    ((4, 20), 0.0),
    ((4, 21), 0.25),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 0.125),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 0.14285714285714285),
    ((5, 8), 0.125),
    ((5, 9), 0.0),
    ((5, 11), 0.25),
    ((5, 12), 0.2),
    ((5, 13), 0.125),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 0.2),
    ((5, 18), 0.0),
    ((5, 19), 0.16666666666666666),
    ((5, 20), 0.0),
    ((5, 21), 0.2),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 0.1111111111111111),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 0.14285714285714285),
    ((6, 8), 0.125),
    ((6, 9), 0.0),
    ((6, 10), 0.75),
    ((6, 11), 0.25),
    ((6, 12), 0.2),
    ((6, 13), 0.125),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 0.2),
    ((6, 18), 0.0),
    ((6, 19), 0.16666666666666666),
    ((6, 20), 0.0),
    ((6, 21), 0.2),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 0.1111111111111111),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 0.2857142857142857),
    ((7, 9), 0.2),
    ((7, 10), 0.16666666666666666),
    ((7, 11), 0.25),
    ((7, 12), 0.5),
    ((7, 13), 0.8),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 0.5),
    ((7, 18), 0.0),
    ((7, 19), 0.4),
    ((7, 20), 0.0),
    ((7, 21), 0.5),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 0.14285714285714285),
    ((7, 28), 0.16666666666666666),
    ((7, 29), 0.0),
    ((7, 30), 0.14285714285714285),
    ((7, 31), 0.1111111111111111),
    ((7, 32), 0.06666666666666667),
    ((7, 33), 0.0),
    ((8, 9), 0.4),
    ((8, 10), 0.14285714285714285),
    ((8, 11), 0.2),
    ((8, 12), 0.16666666666666666),
    ((8, 13), 0.42857142857142855),
    ((8, 14), 0.4),
    ((8, 15), 0.4),
    ((8, 16), 0.0),
    ((8, 17), 0.16666666666666666),
    ((8, 18), 0.4),
    ((8, 19), 0.3333333333333333),
    ((8, 20), 0.4),
    ((8, 21), 0.16666666666666666),
    ((8, 22), 0.4),
    ((8, 23), 0.25),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 0.16666666666666666),
    ((8, 27), 0.2857142857142857),
    ((8, 28), 0.3333333333333333),
    ((8, 29), 0.2857142857142857),
    ((8, 31), 0.375),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 0.4),
    ((9, 14), 0.3333333333333333),
    ((9, 15), 0.3333333333333333),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 0.3333333333333333),
    ((9, 19), 0.25),
    ((9, 20), 0.3333333333333333),
    ((9, 21), 0.0),
    ((9, 22), 0.3333333333333333),
    ((9, 23), 0.16666666666666666),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 0.3333333333333333),
    ((9, 27), 0.5),
    ((9, 28), 0.6666666666666666),
    ((9, 29), 0.2),
    ((9, 30), 0.2),
    ((9, 31), 0.14285714285714285),
    ((9, 32), 0.16666666666666666),
    ((10, 11), 0.3333333333333333),
    ((10, 12), 0.25),
    ((10, 13), 0.14285714285714285),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 0.25),
    ((10, 17), 0.25),
    ((10, 18), 0.0),
    ((10, 19), 0.2),
    ((10, 20), 0.0),
    ((10, 21), 0.25),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 0.125),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 0.5),
    ((11, 13), 0.2),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 0.5),
    ((11, 18), 0.0),
    ((11, 19), 0.3333333333333333),
    ((11, 20), 0.0),
    ((11, 21), 0.5),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 0.16666666666666666),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 0.4),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 0.3333333333333333),
    ((12, 18), 0.0),
    ((12, 19), 0.25),
    ((12, 20), 0.0),
    ((12, 21), 0.3333333333333333),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 0.14285714285714285),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 0.16666666666666666),
    ((13, 15), 0.16666666666666666),
    ((13, 16), 0.0),
    ((13, 17), 0.4),
    ((13, 18), 0.16666666666666666),
    ((13, 19), 0.6),
    ((13, 20), 0.16666666666666666),
    ((13, 21), 0.4),
    ((13, 22), 0.16666666666666666),
    ((13, 23), 0.1111111111111111),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 0.16666666666666666),
    ((13, 27), 0.2857142857142857),
    ((13, 28), 0.3333333333333333),
    ((13, 29), 0.125),
    ((13, 30), 0.2857142857142857),
    ((13, 31), 0.2222222222222222),
    ((13, 32), 0.13333333333333333),
    ((14, 15), 1.0),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 1.0),
    ((14, 19), 0.25),
    ((14, 20), 1.0),
    ((14, 21), 0.0),
    ((14, 22), 1.0),
    ((14, 23), 0.4),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 0.3333333333333333),
    ((14, 27), 0.2),
    ((14, 28), 0.25),
    ((14, 29), 0.5),
    ((14, 30), 0.5),
    ((14, 31), 0.3333333333333333),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 1.0),
    ((15, 19), 0.25),
    ((15, 20), 1.0),
    ((15, 21), 0.0),
    ((15, 22), 1.0),
    ((15, 23), 0.4),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 0.3333333333333333),
    ((15, 27), 0.2),
    ((15, 28), 0.25),
    ((15, 29), 0.5),
    ((15, 30), 0.5),
    ((15, 31), 0.3333333333333333),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 0.6666666666666666),
    ((17, 20), 0.0),
    ((17, 21), 1.0),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 0.2),
    ((17, 31), 0.14285714285714285),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 0.25),
    ((18, 20), 1.0),
    ((18, 21), 0.0),
    ((18, 22), 1.0),
    ((18, 23), 0.4),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 0.3333333333333333),
    ((18, 27), 0.2),
    ((18, 28), 0.25),
    ((18, 29), 0.5),
    ((18, 30), 0.5),
    ((18, 31), 0.3333333333333333),
    ((19, 20), 0.25),
    ((19, 21), 0.6666666666666666),
    ((19, 22), 0.25),
    ((19, 23), 0.14285714285714285),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 0.25),
    ((19, 27), 0.16666666666666666),
    ((19, 28), 0.2),
    ((19, 29), 0.16666666666666666),
    ((19, 30), 0.4),
    ((19, 31), 0.2857142857142857),
    ((19, 32), 0.07142857142857142),
    ((20, 21), 0.0),
    ((20, 22), 1.0),
    ((20, 23), 0.4),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 0.3333333333333333),
    ((20, 27), 0.2),
    ((20, 28), 0.25),
    ((20, 29), 0.5),
    ((20, 30), 0.5),
    ((20, 31), 0.3333333333333333),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 0.2),
    ((21, 31), 0.14285714285714285),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 0.4),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 0.3333333333333333),
    ((22, 27), 0.2),
    ((22, 28), 0.25),
    ((22, 29), 0.5),
    ((22, 30), 0.5),
    ((22, 31), 0.3333333333333333),
    ((23, 24), 0.3333333333333333),
    ((23, 26), 0.4),
    ((23, 28), 0.14285714285714285),
    ((23, 30), 0.2857142857142857),
    ((23, 31), 0.375),
    ((24, 26), 0.0),
    ((24, 28), 0.2),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 0.07142857142857142),
    ((24, 33), 0.1111111111111111),
    ((25, 26), 0.0),
    ((25, 27), 0.4),
    ((25, 28), 0.2),
    ((25, 29), 0.16666666666666666),
    ((25, 30), 0.0),
    ((25, 32), 0.15384615384615385),
    ((25, 33), 0.1111111111111111),
    ((26, 27), 0.2),
    ((26, 28), 0.25),
    ((26, 30), 0.2),
    ((26, 31), 0.14285714285714285),
    ((26, 32), 0.16666666666666666),
    ((27, 28), 0.4),
    ((27, 29), 0.3333333333333333),
    ((27, 30), 0.14285714285714285),
    ((27, 31), 0.25),
    ((27, 32), 0.23076923076923078),
    ((28, 29), 0.16666666666666666),
    ((28, 30), 0.16666666666666666),
    ((28, 32), 0.25),
    ((29, 30), 0.3333333333333333),
    ((29, 31), 0.25),
    ((30, 31), 0.25)
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "adamic adar index":
  let karate = karateClubGraph()
  let got = adamicAdarIndex(karate)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 0.43429448190325176),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 1.4426950408889634),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 0.5581106265512472),
    ((0, 25), 0.5581106265512472),
    ((0, 26), 0.0),
    ((0, 27), 0.43429448190325176),
    ((0, 28), 0.9924051084544989),
    ((0, 29), 0.0),
    ((0, 30), 1.0764545478730305),
    ((0, 32), 1.613740043014111),
    ((0, 33), 2.7110197222973085),
    ((1, 4), 0.36067376022224085),
    ((1, 5), 0.36067376022224085),
    ((1, 6), 0.36067376022224085),
    ((1, 8), 1.5163157625699744),
    ((1, 9), 0.43429448190325176),
    ((1, 10), 0.36067376022224085),
    ((1, 11), 0.36067376022224085),
    ((1, 12), 0.9187843867734881),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 0.43429448190325176),
    ((1, 28), 0.43429448190325176),
    ((1, 29), 0.0),
    ((1, 31), 0.36067376022224085),
    ((1, 32), 1.1556420023477334),
    ((1, 33), 2.252921681630931),
    ((2, 4), 0.36067376022224085),
    ((2, 5), 0.36067376022224085),
    ((2, 6), 0.36067376022224085),
    ((2, 10), 0.36067376022224085),
    ((2, 11), 0.36067376022224085),
    ((2, 12), 0.9187843867734881),
    ((2, 14), 0.40242960438184466),
    ((2, 15), 0.40242960438184466),
    ((2, 16), 0.0),
    ((2, 17), 0.8157933735356595),
    ((2, 18), 0.40242960438184466),
    ((2, 19), 0.8157933735356595),
    ((2, 20), 0.40242960438184466),
    ((2, 21), 0.8157933735356595),
    ((2, 22), 0.40242960438184466),
    ((2, 23), 1.1237771248263264),
    ((2, 24), 0.7213475204444817),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 0.40242960438184466),
    ((2, 30), 1.4788841522548752),
    ((2, 31), 1.6733425912309228),
    ((2, 33), 4.719381261461351),
    ((3, 4), 0.36067376022224085),
    ((3, 5), 0.36067376022224085),
    ((3, 6), 0.36067376022224085),
    ((3, 8), 0.7949682421254927),
    ((3, 9), 0.43429448190325176),
    ((3, 10), 0.36067376022224085),
    ((3, 11), 0.36067376022224085),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 0.8157933735356595),
    ((3, 18), 0.0),
    ((3, 19), 0.8157933735356595),
    ((3, 20), 0.0),
    ((3, 21), 0.8157933735356595),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 0.43429448190325176),
    ((3, 28), 0.43429448190325176),
    ((3, 29), 0.0),
    ((3, 30), 0.45511961331341866),
    ((3, 31), 0.36067376022224085),
    ((3, 32), 0.43429448190325176),
    ((3, 33), 0.6213349345596119),
    ((4, 5), 1.9922605072935597),
    ((4, 7), 0.36067376022224085),
    ((4, 8), 0.36067376022224085),
    ((4, 9), 0.0),
    ((4, 11), 0.36067376022224085),
    ((4, 12), 0.36067376022224085),
    ((4, 13), 0.36067376022224085),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 0.7213475204444817),
    ((4, 17), 0.36067376022224085),
    ((4, 18), 0.0),
    ((4, 19), 0.36067376022224085),
    ((4, 20), 0.0),
    ((4, 21), 0.36067376022224085),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 0.36067376022224085),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 0.36067376022224085),
    ((5, 8), 0.36067376022224085),
    ((5, 9), 0.0),
    ((5, 11), 0.36067376022224085),
    ((5, 12), 0.36067376022224085),
    ((5, 13), 0.36067376022224085),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 0.36067376022224085),
    ((5, 18), 0.0),
    ((5, 19), 0.36067376022224085),
    ((5, 20), 0.0),
    ((5, 21), 0.36067376022224085),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 0.36067376022224085),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 0.36067376022224085),
    ((6, 8), 0.36067376022224085),
    ((6, 9), 0.0),
    ((6, 10), 1.9922605072935597),
    ((6, 11), 0.36067376022224085),
    ((6, 12), 0.36067376022224085),
    ((6, 13), 0.36067376022224085),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 0.36067376022224085),
    ((6, 18), 0.0),
    ((6, 19), 0.36067376022224085),
    ((6, 20), 0.0),
    ((6, 21), 0.36067376022224085),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 0.36067376022224085),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 0.7949682421254927),
    ((7, 9), 0.43429448190325176),
    ((7, 10), 0.36067376022224085),
    ((7, 11), 0.36067376022224085),
    ((7, 12), 0.9187843867734881),
    ((7, 13), 1.8081984819901584),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 0.8157933735356595),
    ((7, 18), 0.0),
    ((7, 19), 0.8157933735356595),
    ((7, 20), 0.0),
    ((7, 21), 0.8157933735356595),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 0.43429448190325176),
    ((7, 28), 0.43429448190325176),
    ((7, 29), 0.0),
    ((7, 30), 0.45511961331341866),
    ((7, 31), 0.36067376022224085),
    ((7, 32), 0.43429448190325176),
    ((7, 33), 0.0),
    ((8, 9), 0.7872506057680129),
    ((8, 10), 0.36067376022224085),
    ((8, 11), 0.36067376022224085),
    ((8, 12), 0.36067376022224085),
    ((8, 13), 1.1479243659902538),
    ((8, 14), 0.7553857282466059),
    ((8, 15), 0.7553857282466059),
    ((8, 16), 0.0),
    ((8, 17), 0.36067376022224085),
    ((8, 18), 0.7553857282466059),
    ((8, 19), 0.713629884087002),
    ((8, 20), 0.7553857282466059),
    ((8, 21), 0.36067376022224085),
    ((8, 22), 0.7553857282466059),
    ((8, 23), 0.7553857282466059),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 0.35295612386476116),
    ((8, 27), 0.7872506057680129),
    ((8, 28), 0.7872506057680129),
    ((8, 29), 0.7553857282466059),
    ((8, 31), 1.1160594884688466),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 0.7872506057680129),
    ((9, 14), 0.35295612386476116),
    ((9, 15), 0.35295612386476116),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 0.35295612386476116),
    ((9, 19), 0.35295612386476116),
    ((9, 20), 0.35295612386476116),
    ((9, 21), 0.0),
    ((9, 22), 0.35295612386476116),
    ((9, 23), 0.35295612386476116),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 0.35295612386476116),
    ((9, 27), 0.7872506057680129),
    ((9, 28), 0.7872506057680129),
    ((9, 29), 0.35295612386476116),
    ((9, 30), 0.35295612386476116),
    ((9, 31), 0.35295612386476116),
    ((9, 32), 0.7872506057680129),
    ((10, 11), 0.36067376022224085),
    ((10, 12), 0.36067376022224085),
    ((10, 13), 0.36067376022224085),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 0.7213475204444817),
    ((10, 17), 0.36067376022224085),
    ((10, 18), 0.0),
    ((10, 19), 0.36067376022224085),
    ((10, 20), 0.0),
    ((10, 21), 0.36067376022224085),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 0.36067376022224085),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 0.36067376022224085),
    ((11, 13), 0.36067376022224085),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 0.36067376022224085),
    ((11, 18), 0.0),
    ((11, 19), 0.36067376022224085),
    ((11, 20), 0.0),
    ((11, 21), 0.36067376022224085),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 0.36067376022224085),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 0.9187843867734881),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 0.36067376022224085),
    ((12, 18), 0.0),
    ((12, 19), 0.36067376022224085),
    ((12, 20), 0.0),
    ((12, 21), 0.36067376022224085),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 0.36067376022224085),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 0.35295612386476116),
    ((13, 15), 0.35295612386476116),
    ((13, 16), 0.0),
    ((13, 17), 0.8157933735356595),
    ((13, 18), 0.35295612386476116),
    ((13, 19), 1.1687494974004207),
    ((13, 20), 0.35295612386476116),
    ((13, 21), 0.8157933735356595),
    ((13, 22), 0.35295612386476116),
    ((13, 23), 0.35295612386476116),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 0.35295612386476116),
    ((13, 27), 0.7872506057680129),
    ((13, 28), 0.7872506057680129),
    ((13, 29), 0.35295612386476116),
    ((13, 30), 0.8080757371781798),
    ((13, 31), 0.713629884087002),
    ((13, 32), 0.7872506057680129),
    ((14, 15), 0.7553857282466059),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 0.7553857282466059),
    ((14, 19), 0.35295612386476116),
    ((14, 20), 0.7553857282466059),
    ((14, 21), 0.0),
    ((14, 22), 0.7553857282466059),
    ((14, 23), 0.7553857282466059),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 0.35295612386476116),
    ((14, 27), 0.35295612386476116),
    ((14, 28), 0.35295612386476116),
    ((14, 29), 0.7553857282466059),
    ((14, 30), 0.7553857282466059),
    ((14, 31), 0.7553857282466059),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 0.7553857282466059),
    ((15, 19), 0.35295612386476116),
    ((15, 20), 0.7553857282466059),
    ((15, 21), 0.0),
    ((15, 22), 0.7553857282466059),
    ((15, 23), 0.7553857282466059),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 0.35295612386476116),
    ((15, 27), 0.35295612386476116),
    ((15, 28), 0.35295612386476116),
    ((15, 29), 0.7553857282466059),
    ((15, 30), 0.7553857282466059),
    ((15, 31), 0.7553857282466059),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 0.8157933735356595),
    ((17, 20), 0.0),
    ((17, 21), 0.8157933735356595),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 0.45511961331341866),
    ((17, 31), 0.36067376022224085),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 0.35295612386476116),
    ((18, 20), 0.7553857282466059),
    ((18, 21), 0.0),
    ((18, 22), 0.7553857282466059),
    ((18, 23), 0.7553857282466059),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 0.35295612386476116),
    ((18, 27), 0.35295612386476116),
    ((18, 28), 0.35295612386476116),
    ((18, 29), 0.7553857282466059),
    ((18, 30), 0.7553857282466059),
    ((18, 31), 0.7553857282466059),
    ((19, 20), 0.35295612386476116),
    ((19, 21), 0.8157933735356595),
    ((19, 22), 0.35295612386476116),
    ((19, 23), 0.35295612386476116),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 0.35295612386476116),
    ((19, 27), 0.35295612386476116),
    ((19, 28), 0.35295612386476116),
    ((19, 29), 0.35295612386476116),
    ((19, 30), 0.8080757371781798),
    ((19, 31), 0.713629884087002),
    ((19, 32), 0.35295612386476116),
    ((20, 21), 0.0),
    ((20, 22), 0.7553857282466059),
    ((20, 23), 0.7553857282466059),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 0.35295612386476116),
    ((20, 27), 0.35295612386476116),
    ((20, 28), 0.35295612386476116),
    ((20, 29), 0.7553857282466059),
    ((20, 30), 0.7553857282466059),
    ((20, 31), 0.7553857282466059),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 0.45511961331341866),
    ((21, 31), 0.36067376022224085),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 0.7553857282466059),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 0.35295612386476116),
    ((22, 27), 0.35295612386476116),
    ((22, 28), 0.35295612386476116),
    ((22, 29), 0.7553857282466059),
    ((22, 30), 0.7553857282466059),
    ((22, 31), 0.7553857282466059),
    ((23, 24), 1.631586747071319),
    ((23, 26), 1.0743036443092429),
    ((23, 28), 0.35295612386476116),
    ((23, 30), 0.7553857282466059),
    ((23, 31), 1.6656249548734432),
    ((24, 26), 0.0),
    ((24, 28), 0.5581106265512472),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 0.5581106265512472),
    ((24, 33), 1.279458146995729),
    ((25, 26), 0.0),
    ((25, 27), 1.531574161186449),
    ((25, 28), 0.5581106265512472),
    ((25, 29), 0.6213349345596119),
    ((25, 30), 0.0),
    ((25, 32), 1.179445561110859),
    ((25, 33), 1.179445561110859),
    ((26, 27), 0.35295612386476116),
    ((26, 28), 0.35295612386476116),
    ((26, 30), 0.35295612386476116),
    ((26, 31), 0.35295612386476116),
    ((26, 32), 1.0743036443092429),
    ((27, 28), 0.7872506057680129),
    ((27, 29), 0.974291058424373),
    ((27, 30), 0.35295612386476116),
    ((27, 31), 1.2631953504915985),
    ((27, 32), 1.4085855403276248),
    ((28, 29), 0.35295612386476116),
    ((28, 30), 0.35295612386476116),
    ((28, 32), 1.34536123231926),
    ((29, 30), 0.7553857282466059),
    ((29, 31), 0.7553857282466059),
    ((30, 31), 0.7553857282466059),
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "prefential attachment":
  let karate = karateClubGraph()
  let got = prefentialAttachment(karate)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 32.0),
    ((0, 14), 32.0),
    ((0, 15), 32.0),
    ((0, 16), 32.0),
    ((0, 18), 32.0),
    ((0, 20), 32.0),
    ((0, 22), 32.0),
    ((0, 23), 80.0),
    ((0, 24), 48.0),
    ((0, 25), 48.0),
    ((0, 26), 32.0),
    ((0, 27), 64.0),
    ((0, 28), 48.0),
    ((0, 29), 64.0),
    ((0, 30), 64.0),
    ((0, 32), 192.0),
    ((0, 33), 272.0),
    ((1, 4), 27.0),
    ((1, 5), 36.0),
    ((1, 6), 36.0),
    ((1, 8), 45.0),
    ((1, 9), 18.0),
    ((1, 10), 27.0),
    ((1, 11), 9.0),
    ((1, 12), 18.0),
    ((1, 14), 18.0),
    ((1, 15), 18.0),
    ((1, 16), 18.0),
    ((1, 18), 18.0),
    ((1, 20), 18.0),
    ((1, 22), 18.0),
    ((1, 23), 45.0),
    ((1, 24), 27.0),
    ((1, 25), 27.0),
    ((1, 26), 18.0),
    ((1, 27), 36.0),
    ((1, 28), 27.0),
    ((1, 29), 36.0),
    ((1, 31), 54.0),
    ((1, 32), 108.0),
    ((1, 33), 153.0),
    ((2, 4), 30.0),
    ((2, 5), 40.0),
    ((2, 6), 40.0),
    ((2, 10), 30.0),
    ((2, 11), 10.0),
    ((2, 12), 20.0),
    ((2, 14), 20.0),
    ((2, 15), 20.0),
    ((2, 16), 20.0),
    ((2, 17), 20.0),
    ((2, 18), 20.0),
    ((2, 19), 30.0),
    ((2, 20), 20.0),
    ((2, 21), 20.0),
    ((2, 22), 20.0),
    ((2, 23), 50.0),
    ((2, 24), 30.0),
    ((2, 25), 30.0),
    ((2, 26), 20.0),
    ((2, 29), 40.0),
    ((2, 30), 40.0),
    ((2, 31), 60.0),
    ((2, 33), 170.0),
    ((3, 4), 18.0),
    ((3, 5), 24.0),
    ((3, 6), 24.0),
    ((3, 8), 30.0),
    ((3, 9), 12.0),
    ((3, 10), 18.0),
    ((3, 11), 6.0),
    ((3, 14), 12.0),
    ((3, 15), 12.0),
    ((3, 16), 12.0),
    ((3, 17), 12.0),
    ((3, 18), 12.0),
    ((3, 19), 18.0),
    ((3, 20), 12.0),
    ((3, 21), 12.0),
    ((3, 22), 12.0),
    ((3, 23), 30.0),
    ((3, 24), 18.0),
    ((3, 25), 18.0),
    ((3, 26), 12.0),
    ((3, 27), 24.0),
    ((3, 28), 18.0),
    ((3, 29), 24.0),
    ((3, 30), 24.0),
    ((3, 31), 36.0),
    ((3, 32), 72.0),
    ((3, 33), 102.0),
    ((4, 5), 12.0),
    ((4, 7), 12.0),
    ((4, 8), 15.0),
    ((4, 9), 6.0),
    ((4, 11), 3.0),
    ((4, 12), 6.0),
    ((4, 13), 15.0),
    ((4, 14), 6.0),
    ((4, 15), 6.0),
    ((4, 16), 6.0),
    ((4, 17), 6.0),
    ((4, 18), 6.0),
    ((4, 19), 9.0),
    ((4, 20), 6.0),
    ((4, 21), 6.0),
    ((4, 22), 6.0),
    ((4, 23), 15.0),
    ((4, 24), 9.0),
    ((4, 25), 9.0),
    ((4, 26), 6.0),
    ((4, 27), 12.0),
    ((4, 28), 9.0),
    ((4, 29), 12.0),
    ((4, 30), 12.0),
    ((4, 31), 18.0),
    ((4, 32), 36.0),
    ((4, 33), 51.0),
    ((5, 7), 16.0),
    ((5, 8), 20.0),
    ((5, 9), 8.0),
    ((5, 11), 4.0),
    ((5, 12), 8.0),
    ((5, 13), 20.0),
    ((5, 14), 8.0),
    ((5, 15), 8.0),
    ((5, 17), 8.0),
    ((5, 18), 8.0),
    ((5, 19), 12.0),
    ((5, 20), 8.0),
    ((5, 21), 8.0),
    ((5, 22), 8.0),
    ((5, 23), 20.0),
    ((5, 24), 12.0),
    ((5, 25), 12.0),
    ((5, 26), 8.0),
    ((5, 27), 16.0),
    ((5, 28), 12.0),
    ((5, 29), 16.0),
    ((5, 30), 16.0),
    ((5, 31), 24.0),
    ((5, 32), 48.0),
    ((5, 33), 68.0),
    ((6, 7), 16.0),
    ((6, 8), 20.0),
    ((6, 9), 8.0),
    ((6, 10), 12.0),
    ((6, 11), 4.0),
    ((6, 12), 8.0),
    ((6, 13), 20.0),
    ((6, 14), 8.0),
    ((6, 15), 8.0),
    ((6, 17), 8.0),
    ((6, 18), 8.0),
    ((6, 19), 12.0),
    ((6, 20), 8.0),
    ((6, 21), 8.0),
    ((6, 22), 8.0),
    ((6, 23), 20.0),
    ((6, 24), 12.0),
    ((6, 25), 12.0),
    ((6, 26), 8.0),
    ((6, 27), 16.0),
    ((6, 28), 12.0),
    ((6, 29), 16.0),
    ((6, 30), 16.0),
    ((6, 31), 24.0),
    ((6, 32), 48.0),
    ((6, 33), 68.0),
    ((7, 8), 20.0),
    ((7, 9), 8.0),
    ((7, 10), 12.0),
    ((7, 11), 4.0),
    ((7, 12), 8.0),
    ((7, 13), 20.0),
    ((7, 14), 8.0),
    ((7, 15), 8.0),
    ((7, 16), 8.0),
    ((7, 17), 8.0),
    ((7, 18), 8.0),
    ((7, 19), 12.0),
    ((7, 20), 8.0),
    ((7, 21), 8.0),
    ((7, 22), 8.0),
    ((7, 23), 20.0),
    ((7, 24), 12.0),
    ((7, 25), 12.0),
    ((7, 26), 8.0),
    ((7, 27), 16.0),
    ((7, 28), 12.0),
    ((7, 29), 16.0),
    ((7, 30), 16.0),
    ((7, 31), 24.0),
    ((7, 32), 48.0),
    ((7, 33), 68.0),
    ((8, 9), 10.0),
    ((8, 10), 15.0),
    ((8, 11), 5.0),
    ((8, 12), 10.0),
    ((8, 13), 25.0),
    ((8, 14), 10.0),
    ((8, 15), 10.0),
    ((8, 16), 10.0),
    ((8, 17), 10.0),
    ((8, 18), 10.0),
    ((8, 19), 15.0),
    ((8, 20), 10.0),
    ((8, 21), 10.0),
    ((8, 22), 10.0),
    ((8, 23), 25.0),
    ((8, 24), 15.0),
    ((8, 25), 15.0),
    ((8, 26), 10.0),
    ((8, 27), 20.0),
    ((8, 28), 15.0),
    ((8, 29), 20.0),
    ((8, 31), 30.0),
    ((9, 10), 6.0),
    ((9, 11), 2.0),
    ((9, 12), 4.0),
    ((9, 13), 10.0),
    ((9, 14), 4.0),
    ((9, 15), 4.0),
    ((9, 16), 4.0),
    ((9, 17), 4.0),
    ((9, 18), 4.0),
    ((9, 19), 6.0),
    ((9, 20), 4.0),
    ((9, 21), 4.0),
    ((9, 22), 4.0),
    ((9, 23), 10.0),
    ((9, 24), 6.0),
    ((9, 25), 6.0),
    ((9, 26), 4.0),
    ((9, 27), 8.0),
    ((9, 28), 6.0),
    ((9, 29), 8.0),
    ((9, 30), 8.0),
    ((9, 31), 12.0),
    ((9, 32), 24.0),
    ((10, 11), 3.0),
    ((10, 12), 6.0),
    ((10, 13), 15.0),
    ((10, 14), 6.0),
    ((10, 15), 6.0),
    ((10, 16), 6.0),
    ((10, 17), 6.0),
    ((10, 18), 6.0),
    ((10, 19), 9.0),
    ((10, 20), 6.0),
    ((10, 21), 6.0),
    ((10, 22), 6.0),
    ((10, 23), 15.0),
    ((10, 24), 9.0),
    ((10, 25), 9.0),
    ((10, 26), 6.0),
    ((10, 27), 12.0),
    ((10, 28), 9.0),
    ((10, 29), 12.0),
    ((10, 30), 12.0),
    ((10, 31), 18.0),
    ((10, 32), 36.0),
    ((10, 33), 51.0),
    ((11, 12), 2.0),
    ((11, 13), 5.0),
    ((11, 14), 2.0),
    ((11, 15), 2.0),
    ((11, 16), 2.0),
    ((11, 17), 2.0),
    ((11, 18), 2.0),
    ((11, 19), 3.0),
    ((11, 20), 2.0),
    ((11, 21), 2.0),
    ((11, 22), 2.0),
    ((11, 23), 5.0),
    ((11, 24), 3.0),
    ((11, 25), 3.0),
    ((11, 26), 2.0),
    ((11, 27), 4.0),
    ((11, 28), 3.0),
    ((11, 29), 4.0),
    ((11, 30), 4.0),
    ((11, 31), 6.0),
    ((11, 32), 12.0),
    ((11, 33), 17.0),
    ((12, 13), 10.0),
    ((12, 14), 4.0),
    ((12, 15), 4.0),
    ((12, 16), 4.0),
    ((12, 17), 4.0),
    ((12, 18), 4.0),
    ((12, 19), 6.0),
    ((12, 20), 4.0),
    ((12, 21), 4.0),
    ((12, 22), 4.0),
    ((12, 23), 10.0),
    ((12, 24), 6.0),
    ((12, 25), 6.0),
    ((12, 26), 4.0),
    ((12, 27), 8.0),
    ((12, 28), 6.0),
    ((12, 29), 8.0),
    ((12, 30), 8.0),
    ((12, 31), 12.0),
    ((12, 32), 24.0),
    ((12, 33), 34.0),
    ((13, 14), 10.0),
    ((13, 15), 10.0),
    ((13, 16), 10.0),
    ((13, 17), 10.0),
    ((13, 18), 10.0),
    ((13, 19), 15.0),
    ((13, 20), 10.0),
    ((13, 21), 10.0),
    ((13, 22), 10.0),
    ((13, 23), 25.0),
    ((13, 24), 15.0),
    ((13, 25), 15.0),
    ((13, 26), 10.0),
    ((13, 27), 20.0),
    ((13, 28), 15.0),
    ((13, 29), 20.0),
    ((13, 30), 20.0),
    ((13, 31), 30.0),
    ((13, 32), 60.0),
    ((14, 15), 4.0),
    ((14, 16), 4.0),
    ((14, 17), 4.0),
    ((14, 18), 4.0),
    ((14, 19), 6.0),
    ((14, 20), 4.0),
    ((14, 21), 4.0),
    ((14, 22), 4.0),
    ((14, 23), 10.0),
    ((14, 24), 6.0),
    ((14, 25), 6.0),
    ((14, 26), 4.0),
    ((14, 27), 8.0),
    ((14, 28), 6.0),
    ((14, 29), 8.0),
    ((14, 30), 8.0),
    ((14, 31), 12.0),
    ((15, 16), 4.0),
    ((15, 17), 4.0),
    ((15, 18), 4.0),
    ((15, 19), 6.0),
    ((15, 20), 4.0),
    ((15, 21), 4.0),
    ((15, 22), 4.0),
    ((15, 23), 10.0),
    ((15, 24), 6.0),
    ((15, 25), 6.0),
    ((15, 26), 4.0),
    ((15, 27), 8.0),
    ((15, 28), 6.0),
    ((15, 29), 8.0),
    ((15, 30), 8.0),
    ((15, 31), 12.0),
    ((16, 17), 4.0),
    ((16, 18), 4.0),
    ((16, 19), 6.0),
    ((16, 20), 4.0),
    ((16, 21), 4.0),
    ((16, 22), 4.0),
    ((16, 23), 10.0),
    ((16, 24), 6.0),
    ((16, 25), 6.0),
    ((16, 26), 4.0),
    ((16, 27), 8.0),
    ((16, 28), 6.0),
    ((16, 29), 8.0),
    ((16, 30), 8.0),
    ((16, 31), 12.0),
    ((16, 32), 24.0),
    ((16, 33), 34.0),
    ((17, 18), 4.0),
    ((17, 19), 6.0),
    ((17, 20), 4.0),
    ((17, 21), 4.0),
    ((17, 22), 4.0),
    ((17, 23), 10.0),
    ((17, 24), 6.0),
    ((17, 25), 6.0),
    ((17, 26), 4.0),
    ((17, 27), 8.0),
    ((17, 28), 6.0),
    ((17, 29), 8.0),
    ((17, 30), 8.0),
    ((17, 31), 12.0),
    ((17, 32), 24.0),
    ((17, 33), 34.0),
    ((18, 19), 6.0),
    ((18, 20), 4.0),
    ((18, 21), 4.0),
    ((18, 22), 4.0),
    ((18, 23), 10.0),
    ((18, 24), 6.0),
    ((18, 25), 6.0),
    ((18, 26), 4.0),
    ((18, 27), 8.0),
    ((18, 28), 6.0),
    ((18, 29), 8.0),
    ((18, 30), 8.0),
    ((18, 31), 12.0),
    ((19, 20), 6.0),
    ((19, 21), 6.0),
    ((19, 22), 6.0),
    ((19, 23), 15.0),
    ((19, 24), 9.0),
    ((19, 25), 9.0),
    ((19, 26), 6.0),
    ((19, 27), 12.0),
    ((19, 28), 9.0),
    ((19, 29), 12.0),
    ((19, 30), 12.0),
    ((19, 31), 18.0),
    ((19, 32), 36.0),
    ((20, 21), 4.0),
    ((20, 22), 4.0),
    ((20, 23), 10.0),
    ((20, 24), 6.0),
    ((20, 25), 6.0),
    ((20, 26), 4.0),
    ((20, 27), 8.0),
    ((20, 28), 6.0),
    ((20, 29), 8.0),
    ((20, 30), 8.0),
    ((20, 31), 12.0),
    ((21, 22), 4.0),
    ((21, 23), 10.0),
    ((21, 24), 6.0),
    ((21, 25), 6.0),
    ((21, 26), 4.0),
    ((21, 27), 8.0),
    ((21, 28), 6.0),
    ((21, 29), 8.0),
    ((21, 30), 8.0),
    ((21, 31), 12.0),
    ((21, 32), 24.0),
    ((21, 33), 34.0),
    ((22, 23), 10.0),
    ((22, 24), 6.0),
    ((22, 25), 6.0),
    ((22, 26), 4.0),
    ((22, 27), 8.0),
    ((22, 28), 6.0),
    ((22, 29), 8.0),
    ((22, 30), 8.0),
    ((22, 31), 12.0),
    ((23, 24), 15.0),
    ((23, 26), 10.0),
    ((23, 28), 15.0),
    ((23, 30), 20.0),
    ((23, 31), 30.0),
    ((24, 26), 6.0),
    ((24, 28), 9.0),
    ((24, 29), 12.0),
    ((24, 30), 12.0),
    ((24, 32), 36.0),
    ((24, 33), 51.0),
    ((25, 26), 6.0),
    ((25, 27), 12.0),
    ((25, 28), 9.0),
    ((25, 29), 12.0),
    ((25, 30), 12.0),
    ((25, 32), 36.0),
    ((25, 33), 51.0),
    ((26, 27), 8.0),
    ((26, 28), 6.0),
    ((26, 30), 8.0),
    ((26, 31), 12.0),
    ((26, 32), 24.0),
    ((27, 28), 12.0),
    ((27, 29), 16.0),
    ((27, 30), 16.0),
    ((27, 31), 24.0),
    ((27, 32), 48.0),
    ((28, 29), 12.0),
    ((28, 30), 12.0),
    ((28, 32), 36.0),
    ((29, 30), 16.0),
    ((29, 31), 24.0),
    ((30, 31), 24.0),
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "cn soundarajan hopcroft":
  let karate = karateClubGraph()
  let community = {
    0: 0, 1: 1, 2: 1, 3: 1, 4: 0, 5: 0, 6: 0, 7: 1, 8: 2, 9: 1,
    10: 0, 11: 0, 12: 1, 13: 1, 14: 2, 15: 2, 16: 0, 17: 1, 18: 2, 19: 0,
    20: 2, 21: 1, 22: 2, 23: 2, 24: 2, 25: 2, 26: 2, 27: 2, 28: 2, 29: 2,
    30: 2, 31: 2, 32: 2, 33: 2,
  }.toTable()
  let got = cnSoundarajanHopcroft(karate, community)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 1.0),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 4.0),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 1.0),
    ((0, 25), 1.0),
    ((0, 26), 0.0),
    ((0, 27), 1.0),
    ((0, 28), 2.0),
    ((0, 29), 0.0),
    ((0, 30), 2.0),
    ((0, 32), 3.0),
    ((0, 33), 4.0),
    ((1, 4), 1.0),
    ((1, 5), 1.0),
    ((1, 6), 1.0),
    ((1, 8), 3.0),
    ((1, 9), 2.0),
    ((1, 10), 1.0),
    ((1, 11), 1.0),
    ((1, 12), 3.0),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 1.0),
    ((1, 28), 1.0),
    ((1, 29), 0.0),
    ((1, 31), 1.0),
    ((1, 32), 2.0),
    ((1, 33), 3.0),
    ((2, 4), 1.0),
    ((2, 5), 1.0),
    ((2, 6), 1.0),
    ((2, 10), 1.0),
    ((2, 11), 1.0),
    ((2, 12), 3.0),
    ((2, 14), 1.0),
    ((2, 15), 1.0),
    ((2, 16), 0.0),
    ((2, 17), 3.0),
    ((2, 18), 1.0),
    ((2, 19), 2.0),
    ((2, 20), 1.0),
    ((2, 21), 3.0),
    ((2, 22), 1.0),
    ((2, 23), 2.0),
    ((2, 24), 1.0),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 1.0),
    ((2, 30), 3.0),
    ((2, 31), 3.0),
    ((2, 33), 6.0),
    ((3, 4), 1.0),
    ((3, 5), 1.0),
    ((3, 6), 1.0),
    ((3, 8), 2.0),
    ((3, 9), 2.0),
    ((3, 10), 1.0),
    ((3, 11), 1.0),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 3.0),
    ((3, 18), 0.0),
    ((3, 19), 2.0),
    ((3, 20), 0.0),
    ((3, 21), 3.0),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 1.0),
    ((3, 28), 1.0),
    ((3, 29), 0.0),
    ((3, 30), 1.0),
    ((3, 31), 1.0),
    ((3, 32), 1.0),
    ((3, 33), 1.0),
    ((4, 5), 6.0),
    ((4, 7), 1.0),
    ((4, 8), 1.0),
    ((4, 9), 0.0),
    ((4, 11), 2.0),
    ((4, 12), 1.0),
    ((4, 13), 1.0),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 2.0),
    ((4, 17), 1.0),
    ((4, 18), 0.0),
    ((4, 19), 2.0),
    ((4, 20), 0.0),
    ((4, 21), 1.0),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 1.0),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 1.0),
    ((5, 8), 1.0),
    ((5, 9), 0.0),
    ((5, 11), 2.0),
    ((5, 12), 1.0),
    ((5, 13), 1.0),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 1.0),
    ((5, 18), 0.0),
    ((5, 19), 2.0),
    ((5, 20), 0.0),
    ((5, 21), 1.0),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 1.0),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 1.0),
    ((6, 8), 1.0),
    ((6, 9), 0.0),
    ((6, 10), 6.0),
    ((6, 11), 2.0),
    ((6, 12), 1.0),
    ((6, 13), 1.0),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 1.0),
    ((6, 18), 0.0),
    ((6, 19), 2.0),
    ((6, 20), 0.0),
    ((6, 21), 1.0),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 1.0),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 2.0),
    ((7, 9), 2.0),
    ((7, 10), 1.0),
    ((7, 11), 1.0),
    ((7, 12), 3.0),
    ((7, 13), 7.0),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 3.0),
    ((7, 18), 0.0),
    ((7, 19), 2.0),
    ((7, 20), 0.0),
    ((7, 21), 3.0),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 1.0),
    ((7, 28), 1.0),
    ((7, 29), 0.0),
    ((7, 30), 1.0),
    ((7, 31), 1.0),
    ((7, 32), 1.0),
    ((7, 33), 0.0),
    ((8, 9), 2.0),
    ((8, 10), 1.0),
    ((8, 11), 1.0),
    ((8, 12), 1.0),
    ((8, 13), 3.0),
    ((8, 14), 4.0),
    ((8, 15), 4.0),
    ((8, 16), 0.0),
    ((8, 17), 1.0),
    ((8, 18), 4.0),
    ((8, 19), 2.0),
    ((8, 20), 4.0),
    ((8, 21), 1.0),
    ((8, 22), 4.0),
    ((8, 23), 4.0),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 2.0),
    ((8, 27), 3.0),
    ((8, 28), 3.0),
    ((8, 29), 4.0),
    ((8, 31), 5.0),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 3.0),
    ((9, 14), 1.0),
    ((9, 15), 1.0),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 1.0),
    ((9, 19), 1.0),
    ((9, 20), 1.0),
    ((9, 21), 0.0),
    ((9, 22), 1.0),
    ((9, 23), 1.0),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 1.0),
    ((9, 27), 2.0),
    ((9, 28), 2.0),
    ((9, 29), 1.0),
    ((9, 30), 1.0),
    ((9, 31), 1.0),
    ((9, 32), 2.0),
    ((10, 11), 2.0),
    ((10, 12), 1.0),
    ((10, 13), 1.0),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 2.0),
    ((10, 17), 1.0),
    ((10, 18), 0.0),
    ((10, 19), 2.0),
    ((10, 20), 0.0),
    ((10, 21), 1.0),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 1.0),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 1.0),
    ((11, 13), 1.0),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 1.0),
    ((11, 18), 0.0),
    ((11, 19), 2.0),
    ((11, 20), 0.0),
    ((11, 21), 1.0),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 1.0),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 3.0),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 1.0),
    ((12, 18), 0.0),
    ((12, 19), 1.0),
    ((12, 20), 0.0),
    ((12, 21), 1.0),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 1.0),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 1.0),
    ((13, 15), 1.0),
    ((13, 16), 0.0),
    ((13, 17), 3.0),
    ((13, 18), 1.0),
    ((13, 19), 3.0),
    ((13, 20), 1.0),
    ((13, 21), 3.0),
    ((13, 22), 1.0),
    ((13, 23), 1.0),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 1.0),
    ((13, 27), 2.0),
    ((13, 28), 2.0),
    ((13, 29), 1.0),
    ((13, 30), 2.0),
    ((13, 31), 2.0),
    ((13, 32), 2.0),
    ((14, 15), 4.0),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 4.0),
    ((14, 19), 1.0),
    ((14, 20), 4.0),
    ((14, 21), 0.0),
    ((14, 22), 4.0),
    ((14, 23), 4.0),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 2.0),
    ((14, 27), 2.0),
    ((14, 28), 2.0),
    ((14, 29), 4.0),
    ((14, 30), 4.0),
    ((14, 31), 4.0),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 4.0),
    ((15, 19), 1.0),
    ((15, 20), 4.0),
    ((15, 21), 0.0),
    ((15, 22), 4.0),
    ((15, 23), 4.0),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 2.0),
    ((15, 27), 2.0),
    ((15, 28), 2.0),
    ((15, 29), 4.0),
    ((15, 30), 4.0),
    ((15, 31), 4.0),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 2.0),
    ((17, 20), 0.0),
    ((17, 21), 3.0),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 1.0),
    ((17, 31), 1.0),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 1.0),
    ((18, 20), 4.0),
    ((18, 21), 0.0),
    ((18, 22), 4.0),
    ((18, 23), 4.0),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 2.0),
    ((18, 27), 2.0),
    ((18, 28), 2.0),
    ((18, 29), 4.0),
    ((18, 30), 4.0),
    ((18, 31), 4.0),
    ((19, 20), 1.0),
    ((19, 21), 2.0),
    ((19, 22), 1.0),
    ((19, 23), 1.0),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 1.0),
    ((19, 27), 1.0),
    ((19, 28), 1.0),
    ((19, 29), 1.0),
    ((19, 30), 2.0),
    ((19, 31), 2.0),
    ((19, 32), 1.0),
    ((20, 21), 0.0),
    ((20, 22), 4.0),
    ((20, 23), 4.0),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 2.0),
    ((20, 27), 2.0),
    ((20, 28), 2.0),
    ((20, 29), 4.0),
    ((20, 30), 4.0),
    ((20, 31), 4.0),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 1.0),
    ((21, 31), 1.0),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 4.0),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 2.0),
    ((22, 27), 2.0),
    ((22, 28), 2.0),
    ((22, 29), 4.0),
    ((22, 30), 4.0),
    ((22, 31), 4.0),
    ((23, 24), 4.0),
    ((23, 26), 4.0),
    ((23, 28), 2.0),
    ((23, 30), 4.0),
    ((23, 31), 6.0),
    ((24, 26), 0.0),
    ((24, 28), 2.0),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 2.0),
    ((24, 33), 4.0),
    ((25, 26), 0.0),
    ((25, 27), 4.0),
    ((25, 28), 2.0),
    ((25, 29), 2.0),
    ((25, 30), 0.0),
    ((25, 32), 4.0),
    ((25, 33), 4.0),
    ((26, 27), 2.0),
    ((26, 28), 2.0),
    ((26, 30), 2.0),
    ((26, 31), 2.0),
    ((26, 32), 4.0),
    ((27, 28), 3.0),
    ((27, 29), 4.0),
    ((27, 30), 2.0),
    ((27, 31), 4.0),
    ((27, 32), 5.0),
    ((28, 29), 2.0),
    ((28, 30), 2.0),
    ((28, 32), 5.0),
    ((29, 30), 4.0),
    ((29, 31), 4.0),
    ((30, 31), 4.0),
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "ra index soundarajan hopcroft":
  let karate = karateClubGraph()
  let community = {
    0: 0, 1: 1, 2: 1, 3: 1, 4: 0, 5: 0, 6: 0, 7: 1, 8: 2, 9: 1,
    10: 0, 11: 0, 12: 1, 13: 1, 14: 2, 15: 2, 16: 0, 17: 1, 18: 2, 19: 0,
    20: 2, 21: 1, 22: 2, 23: 2, 24: 2, 25: 2, 26: 2, 27: 2, 28: 2, 29: 2,
    30: 2, 31: 2, 32: 2, 33: 2,
  }.toTable()
  let got = raIndexSoundarajanHopcroft(karate, community)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 0.0),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 0.5),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 0.0),
    ((0, 25), 0.0),
    ((0, 26), 0.0),
    ((0, 27), 0.0),
    ((0, 28), 0.0),
    ((0, 29), 0.0),
    ((0, 30), 0.0),
    ((0, 32), 0.0),
    ((0, 33), 0.0),
    ((1, 4), 0.0),
    ((1, 5), 0.0),
    ((1, 6), 0.0),
    ((1, 8), 0.0),
    ((1, 9), 0.1),
    ((1, 10), 0.0),
    ((1, 11), 0.0),
    ((1, 12), 0.16666666666666666),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 0.0),
    ((1, 28), 0.0),
    ((1, 29), 0.0),
    ((1, 31), 0.0),
    ((1, 32), 0.0),
    ((1, 33), 0.0),
    ((2, 4), 0.0),
    ((2, 5), 0.0),
    ((2, 6), 0.0),
    ((2, 10), 0.0),
    ((2, 11), 0.0),
    ((2, 12), 0.16666666666666666),
    ((2, 14), 0.0),
    ((2, 15), 0.0),
    ((2, 16), 0.0),
    ((2, 17), 0.1111111111111111),
    ((2, 18), 0.0),
    ((2, 19), 0.0),
    ((2, 20), 0.0),
    ((2, 21), 0.1111111111111111),
    ((2, 22), 0.0),
    ((2, 23), 0.0),
    ((2, 24), 0.0),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 0.0),
    ((2, 30), 0.0),
    ((2, 31), 0.0),
    ((2, 33), 0.0),
    ((3, 4), 0.0),
    ((3, 5), 0.0),
    ((3, 6), 0.0),
    ((3, 8), 0.0),
    ((3, 9), 0.1),
    ((3, 10), 0.0),
    ((3, 11), 0.0),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 0.1111111111111111),
    ((3, 18), 0.0),
    ((3, 19), 0.0),
    ((3, 20), 0.0),
    ((3, 21), 0.1111111111111111),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 0.0),
    ((3, 28), 0.0),
    ((3, 29), 0.0),
    ((3, 30), 0.0),
    ((3, 31), 0.0),
    ((3, 32), 0.0),
    ((3, 33), 0.0),
    ((4, 5), 0.6458333333333333),
    ((4, 7), 0.0),
    ((4, 8), 0.0),
    ((4, 9), 0.0),
    ((4, 11), 0.0625),
    ((4, 12), 0.0),
    ((4, 13), 0.0),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 0.25),
    ((4, 17), 0.0),
    ((4, 18), 0.0),
    ((4, 19), 0.0625),
    ((4, 20), 0.0),
    ((4, 21), 0.0),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 0.0),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 0.0),
    ((5, 8), 0.0),
    ((5, 9), 0.0),
    ((5, 11), 0.0625),
    ((5, 12), 0.0),
    ((5, 13), 0.0),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 0.0),
    ((5, 18), 0.0),
    ((5, 19), 0.0625),
    ((5, 20), 0.0),
    ((5, 21), 0.0),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 0.0),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 0.0),
    ((6, 8), 0.0),
    ((6, 9), 0.0),
    ((6, 10), 0.6458333333333333),
    ((6, 11), 0.0625),
    ((6, 12), 0.0),
    ((6, 13), 0.0),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 0.0),
    ((6, 18), 0.0),
    ((6, 19), 0.0625),
    ((6, 20), 0.0),
    ((6, 21), 0.0),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 0.0),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 0.0),
    ((7, 9), 0.1),
    ((7, 10), 0.0),
    ((7, 11), 0.0),
    ((7, 12), 0.16666666666666666),
    ((7, 13), 0.37777777777777777),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 0.1111111111111111),
    ((7, 18), 0.0),
    ((7, 19), 0.0),
    ((7, 20), 0.0),
    ((7, 21), 0.1111111111111111),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 0.0),
    ((7, 28), 0.0),
    ((7, 29), 0.0),
    ((7, 30), 0.0),
    ((7, 31), 0.0),
    ((7, 32), 0.0),
    ((7, 33), 0.0),
    ((8, 9), 0.0),
    ((8, 10), 0.0),
    ((8, 11), 0.0),
    ((8, 12), 0.0),
    ((8, 13), 0.0),
    ((8, 14), 0.14215686274509803),
    ((8, 15), 0.14215686274509803),
    ((8, 16), 0.0),
    ((8, 17), 0.0),
    ((8, 18), 0.14215686274509803),
    ((8, 19), 0.0),
    ((8, 20), 0.14215686274509803),
    ((8, 21), 0.0),
    ((8, 22), 0.14215686274509803),
    ((8, 23), 0.14215686274509803),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 0.058823529411764705),
    ((8, 27), 0.058823529411764705),
    ((8, 28), 0.058823529411764705),
    ((8, 29), 0.14215686274509803),
    ((8, 31), 0.14215686274509803),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 0.1),
    ((9, 14), 0.0),
    ((9, 15), 0.0),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 0.0),
    ((9, 19), 0.0),
    ((9, 20), 0.0),
    ((9, 21), 0.0),
    ((9, 22), 0.0),
    ((9, 23), 0.0),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 0.0),
    ((9, 27), 0.0),
    ((9, 28), 0.0),
    ((9, 29), 0.0),
    ((9, 30), 0.0),
    ((9, 31), 0.0),
    ((9, 32), 0.0),
    ((10, 11), 0.0625),
    ((10, 12), 0.0),
    ((10, 13), 0.0),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 0.25),
    ((10, 17), 0.0),
    ((10, 18), 0.0),
    ((10, 19), 0.0625),
    ((10, 20), 0.0),
    ((10, 21), 0.0),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 0.0),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 0.0),
    ((11, 13), 0.0),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 0.0),
    ((11, 18), 0.0),
    ((11, 19), 0.0625),
    ((11, 20), 0.0),
    ((11, 21), 0.0),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 0.0),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 0.16666666666666666),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 0.0),
    ((12, 18), 0.0),
    ((12, 19), 0.0),
    ((12, 20), 0.0),
    ((12, 21), 0.0),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 0.0),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 0.0),
    ((13, 15), 0.0),
    ((13, 16), 0.0),
    ((13, 17), 0.1111111111111111),
    ((13, 18), 0.0),
    ((13, 19), 0.0),
    ((13, 20), 0.0),
    ((13, 21), 0.1111111111111111),
    ((13, 22), 0.0),
    ((13, 23), 0.0),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 0.0),
    ((13, 27), 0.0),
    ((13, 28), 0.0),
    ((13, 29), 0.0),
    ((13, 30), 0.0),
    ((13, 31), 0.0),
    ((13, 32), 0.0),
    ((14, 15), 0.14215686274509803),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 0.14215686274509803),
    ((14, 19), 0.0),
    ((14, 20), 0.14215686274509803),
    ((14, 21), 0.0),
    ((14, 22), 0.14215686274509803),
    ((14, 23), 0.14215686274509803),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 0.058823529411764705),
    ((14, 27), 0.058823529411764705),
    ((14, 28), 0.058823529411764705),
    ((14, 29), 0.14215686274509803),
    ((14, 30), 0.14215686274509803),
    ((14, 31), 0.14215686274509803),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 0.14215686274509803),
    ((15, 19), 0.0),
    ((15, 20), 0.14215686274509803),
    ((15, 21), 0.0),
    ((15, 22), 0.14215686274509803),
    ((15, 23), 0.14215686274509803),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 0.058823529411764705),
    ((15, 27), 0.058823529411764705),
    ((15, 28), 0.058823529411764705),
    ((15, 29), 0.14215686274509803),
    ((15, 30), 0.14215686274509803),
    ((15, 31), 0.14215686274509803),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 0.0),
    ((17, 20), 0.0),
    ((17, 21), 0.1111111111111111),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 0.0),
    ((17, 31), 0.0),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 0.0),
    ((18, 20), 0.14215686274509803),
    ((18, 21), 0.0),
    ((18, 22), 0.14215686274509803),
    ((18, 23), 0.14215686274509803),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 0.058823529411764705),
    ((18, 27), 0.058823529411764705),
    ((18, 28), 0.058823529411764705),
    ((18, 29), 0.14215686274509803),
    ((18, 30), 0.14215686274509803),
    ((18, 31), 0.14215686274509803),
    ((19, 20), 0.0),
    ((19, 21), 0.0),
    ((19, 22), 0.0),
    ((19, 23), 0.0),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 0.0),
    ((19, 27), 0.0),
    ((19, 28), 0.0),
    ((19, 29), 0.0),
    ((19, 30), 0.0),
    ((19, 31), 0.0),
    ((19, 32), 0.0),
    ((20, 21), 0.0),
    ((20, 22), 0.14215686274509803),
    ((20, 23), 0.14215686274509803),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 0.058823529411764705),
    ((20, 27), 0.058823529411764705),
    ((20, 28), 0.058823529411764705),
    ((20, 29), 0.14215686274509803),
    ((20, 30), 0.14215686274509803),
    ((20, 31), 0.14215686274509803),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 0.0),
    ((21, 31), 0.0),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 0.14215686274509803),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 0.058823529411764705),
    ((22, 27), 0.058823529411764705),
    ((22, 28), 0.058823529411764705),
    ((22, 29), 0.14215686274509803),
    ((22, 30), 0.14215686274509803),
    ((22, 31), 0.14215686274509803),
    ((23, 24), 0.5833333333333333),
    ((23, 26), 0.3088235294117647),
    ((23, 28), 0.058823529411764705),
    ((23, 30), 0.14215686274509803),
    ((23, 31), 0.47549019607843135),
    ((24, 26), 0.0),
    ((24, 28), 0.16666666666666666),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 0.16666666666666666),
    ((24, 33), 0.41666666666666663),
    ((25, 26), 0.0),
    ((25, 27), 0.5333333333333333),
    ((25, 28), 0.16666666666666666),
    ((25, 29), 0.2),
    ((25, 30), 0.0),
    ((25, 32), 0.3666666666666667),
    ((25, 33), 0.3666666666666667),
    ((26, 27), 0.058823529411764705),
    ((26, 28), 0.058823529411764705),
    ((26, 30), 0.058823529411764705),
    ((26, 31), 0.058823529411764705),
    ((26, 32), 0.3088235294117647),
    ((27, 28), 0.058823529411764705),
    ((27, 29), 0.25882352941176473),
    ((27, 30), 0.058823529411764705),
    ((27, 31), 0.39215686274509803),
    ((27, 32), 0.25882352941176473),
    ((28, 29), 0.058823529411764705),
    ((28, 30), 0.058823529411764705),
    ((28, 32), 0.22549019607843135),
    ((29, 30), 0.14215686274509803),
    ((29, 31), 0.14215686274509803),
    ((30, 31), 0.14215686274509803),
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "within inter cluster":
  let karate = karateClubGraph()
  let community = {
    0: 0, 1: 1, 2: 1, 3: 1, 4: 0, 5: 0, 6: 0, 7: 1, 8: 2, 9: 1,
    10: 0, 11: 0, 12: 1, 13: 1, 14: 2, 15: 2, 16: 0, 17: 1, 18: 2, 19: 0,
    20: 2, 21: 1, 22: 2, 23: 2, 24: 2, 25: 2, 26: 2, 27: 2, 28: 2, 29: 2,
    30: 2, 31: 2, 32: 2, 33: 2,
  }.toTable()
  let got = withinInterCluster(karate, community)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 0.0),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 2000.0),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 0.0),
    ((0, 25), 0.0),
    ((0, 26), 0.0),
    ((0, 27), 0.0),
    ((0, 28), 0.0),
    ((0, 29), 0.0),
    ((0, 30), 0.0),
    ((0, 32), 0.0),
    ((0, 33), 0.0),
    ((1, 4), 0.0),
    ((1, 5), 0.0),
    ((1, 6), 0.0),
    ((1, 8), 0.0),
    ((1, 9), 1000.0),
    ((1, 10), 0.0),
    ((1, 11), 0.0),
    ((1, 12), 0.9990009990009991),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 0.0),
    ((1, 28), 0.0),
    ((1, 29), 0.0),
    ((1, 31), 0.0),
    ((1, 32), 0.0),
    ((1, 33), 0.0),
    ((2, 4), 0.0),
    ((2, 5), 0.0),
    ((2, 6), 0.0),
    ((2, 10), 0.0),
    ((2, 11), 0.0),
    ((2, 12), 0.9990009990009991),
    ((2, 14), 0.0),
    ((2, 15), 0.0),
    ((2, 16), 0.0),
    ((2, 17), 0.9990009990009991),
    ((2, 18), 0.0),
    ((2, 19), 0.0),
    ((2, 20), 0.0),
    ((2, 21), 0.9990009990009991),
    ((2, 22), 0.0),
    ((2, 23), 0.0),
    ((2, 24), 0.0),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 0.0),
    ((2, 30), 0.0),
    ((2, 31), 0.0),
    ((2, 33), 0.0),
    ((3, 4), 0.0),
    ((3, 5), 0.0),
    ((3, 6), 0.0),
    ((3, 8), 0.0),
    ((3, 9), 1000.0),
    ((3, 10), 0.0),
    ((3, 11), 0.0),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 0.9990009990009991),
    ((3, 18), 0.0),
    ((3, 19), 0.0),
    ((3, 20), 0.0),
    ((3, 21), 0.9990009990009991),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 0.0),
    ((3, 28), 0.0),
    ((3, 29), 0.0),
    ((3, 30), 0.0),
    ((3, 31), 0.0),
    ((3, 32), 0.0),
    ((3, 33), 0.0),
    ((4, 5), 3000.0),
    ((4, 7), 0.0),
    ((4, 8), 0.0),
    ((4, 9), 0.0),
    ((4, 11), 1000.0),
    ((4, 12), 0.0),
    ((4, 13), 0.0),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 1000.0),
    ((4, 17), 0.0),
    ((4, 18), 0.0),
    ((4, 19), 1000.0),
    ((4, 20), 0.0),
    ((4, 21), 0.0),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 0.0),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 0.0),
    ((5, 8), 0.0),
    ((5, 9), 0.0),
    ((5, 11), 1000.0),
    ((5, 12), 0.0),
    ((5, 13), 0.0),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 0.0),
    ((5, 18), 0.0),
    ((5, 19), 1000.0),
    ((5, 20), 0.0),
    ((5, 21), 0.0),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 0.0),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 0.0),
    ((6, 8), 0.0),
    ((6, 9), 0.0),
    ((6, 10), 3000.0),
    ((6, 11), 1000.0),
    ((6, 12), 0.0),
    ((6, 13), 0.0),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 0.0),
    ((6, 18), 0.0),
    ((6, 19), 1000.0),
    ((6, 20), 0.0),
    ((6, 21), 0.0),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 0.0),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 0.0),
    ((7, 9), 1000.0),
    ((7, 10), 0.0),
    ((7, 11), 0.0),
    ((7, 12), 0.9990009990009991),
    ((7, 13), 2.997002997002997),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 0.9990009990009991),
    ((7, 18), 0.0),
    ((7, 19), 0.0),
    ((7, 20), 0.0),
    ((7, 21), 0.9990009990009991),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 0.0),
    ((7, 28), 0.0),
    ((7, 29), 0.0),
    ((7, 30), 0.0),
    ((7, 31), 0.0),
    ((7, 32), 0.0),
    ((7, 33), 0.0),
    ((8, 9), 0.0),
    ((8, 10), 0.0),
    ((8, 11), 0.0),
    ((8, 12), 0.0),
    ((8, 13), 0.0),
    ((8, 14), 2000.0),
    ((8, 15), 2000.0),
    ((8, 16), 0.0),
    ((8, 17), 0.0),
    ((8, 18), 2000.0),
    ((8, 19), 0.0),
    ((8, 20), 2000.0),
    ((8, 21), 0.0),
    ((8, 22), 2000.0),
    ((8, 23), 2000.0),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 1000.0),
    ((8, 27), 0.9990009990009991),
    ((8, 28), 0.9990009990009991),
    ((8, 29), 2000.0),
    ((8, 31), 1.9980019980019983),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 0.9990009990009991),
    ((9, 14), 0.0),
    ((9, 15), 0.0),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 0.0),
    ((9, 19), 0.0),
    ((9, 20), 0.0),
    ((9, 21), 0.0),
    ((9, 22), 0.0),
    ((9, 23), 0.0),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 0.0),
    ((9, 27), 0.0),
    ((9, 28), 0.0),
    ((9, 29), 0.0),
    ((9, 30), 0.0),
    ((9, 31), 0.0),
    ((9, 32), 0.0),
    ((10, 11), 1000.0),
    ((10, 12), 0.0),
    ((10, 13), 0.0),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 1000.0),
    ((10, 17), 0.0),
    ((10, 18), 0.0),
    ((10, 19), 1000.0),
    ((10, 20), 0.0),
    ((10, 21), 0.0),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 0.0),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 0.0),
    ((11, 13), 0.0),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 0.0),
    ((11, 18), 0.0),
    ((11, 19), 1000.0),
    ((11, 20), 0.0),
    ((11, 21), 0.0),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 0.0),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 0.9990009990009991),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 0.0),
    ((12, 18), 0.0),
    ((12, 19), 0.0),
    ((12, 20), 0.0),
    ((12, 21), 0.0),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 0.0),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 0.0),
    ((13, 15), 0.0),
    ((13, 16), 0.0),
    ((13, 17), 0.9990009990009991),
    ((13, 18), 0.0),
    ((13, 19), 0.0),
    ((13, 20), 0.0),
    ((13, 21), 0.9990009990009991),
    ((13, 22), 0.0),
    ((13, 23), 0.0),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 0.0),
    ((13, 27), 0.0),
    ((13, 28), 0.0),
    ((13, 29), 0.0),
    ((13, 30), 0.0),
    ((13, 31), 0.0),
    ((13, 32), 0.0),
    ((14, 15), 2000.0),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 2000.0),
    ((14, 19), 0.0),
    ((14, 20), 2000.0),
    ((14, 21), 0.0),
    ((14, 22), 2000.0),
    ((14, 23), 2000.0),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 1000.0),
    ((14, 27), 1000.0),
    ((14, 28), 1000.0),
    ((14, 29), 2000.0),
    ((14, 30), 2000.0),
    ((14, 31), 2000.0),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 2000.0),
    ((15, 19), 0.0),
    ((15, 20), 2000.0),
    ((15, 21), 0.0),
    ((15, 22), 2000.0),
    ((15, 23), 2000.0),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 1000.0),
    ((15, 27), 1000.0),
    ((15, 28), 1000.0),
    ((15, 29), 2000.0),
    ((15, 30), 2000.0),
    ((15, 31), 2000.0),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 0.0),
    ((17, 20), 0.0),
    ((17, 21), 0.9990009990009991),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 0.0),
    ((17, 31), 0.0),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 0.0),
    ((18, 20), 2000.0),
    ((18, 21), 0.0),
    ((18, 22), 2000.0),
    ((18, 23), 2000.0),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 1000.0),
    ((18, 27), 1000.0),
    ((18, 28), 1000.0),
    ((18, 29), 2000.0),
    ((18, 30), 2000.0),
    ((18, 31), 2000.0),
    ((19, 20), 0.0),
    ((19, 21), 0.0),
    ((19, 22), 0.0),
    ((19, 23), 0.0),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 0.0),
    ((19, 27), 0.0),
    ((19, 28), 0.0),
    ((19, 29), 0.0),
    ((19, 30), 0.0),
    ((19, 31), 0.0),
    ((19, 32), 0.0),
    ((20, 21), 0.0),
    ((20, 22), 2000.0),
    ((20, 23), 2000.0),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 1000.0),
    ((20, 27), 1000.0),
    ((20, 28), 1000.0),
    ((20, 29), 2000.0),
    ((20, 30), 2000.0),
    ((20, 31), 2000.0),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 0.0),
    ((21, 31), 0.0),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 2000.0),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 1000.0),
    ((22, 27), 1000.0),
    ((22, 28), 1000.0),
    ((22, 29), 2000.0),
    ((22, 30), 2000.0),
    ((22, 31), 2000.0),
    ((23, 24), 2000.0),
    ((23, 26), 2000.0),
    ((23, 28), 1000.0),
    ((23, 30), 2000.0),
    ((23, 31), 3000.0),
    ((24, 26), 0.0),
    ((24, 28), 1000.0),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 1000.0),
    ((24, 33), 2000.0),
    ((25, 26), 0.0),
    ((25, 27), 2000.0),
    ((25, 28), 1000.0),
    ((25, 29), 1000.0),
    ((25, 30), 0.0),
    ((25, 32), 2000.0),
    ((25, 33), 2000.0),
    ((26, 27), 1000.0),
    ((26, 28), 1000.0),
    ((26, 30), 1000.0),
    ((26, 31), 1000.0),
    ((26, 32), 2000.0),
    ((27, 28), 0.9990009990009991),
    ((27, 29), 2000.0),
    ((27, 30), 1000.0),
    ((27, 31), 2000.0),
    ((27, 32), 1.9980019980019983),
    ((28, 29), 1000.0),
    ((28, 30), 1000.0),
    ((28, 32), 1.9980019980019983),
    ((29, 30), 2000.0),
    ((29, 31), 2000.0),
    ((30, 31), 2000.0)
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

# -------------------------------------------------------------------
# Lowest Common Ancestor
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Matching
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Minors
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Maximal Independent Set
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Non-randomness
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Moral
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Node Classification
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Operators
# -------------------------------------------------------------------

test "complement of graph":
  let karate = karateClubGraph()
  let got = complement(karate)
  check got.isDirected() == false
  check got.numberOfNodes() == 34
  check got.numberOfEdges() == 483
  check got.edges() == @[(0, 9), (0, 14), (0, 15), (0, 16), (0, 18), (0, 20), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 32), (0, 33), (1, 4), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 14), (1, 15), (1, 16), (1, 18), (1, 20), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 31), (1, 32), (1, 33), (2, 4), (2, 5), (2, 6), (2, 10), (2, 11), (2, 12), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (2, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 29), (2, 30), (2, 31), (2, 33), (3, 4), (3, 5), (3, 6), (3, 8), (3, 9), (3, 10), (3, 11), (3, 14), (3, 15), (3, 16), (3, 17), (3, 18), (3, 19), (3, 20), (3, 21), (3, 22), (3, 23), (3, 24), (3, 25), (3, 26), (3, 27), (3, 28), (3, 29), (3, 30), (3, 31), (3, 32), (3, 33), (4, 5), (4, 7), (4, 8), (4, 9), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (4, 24), (4, 25), (4, 26), (4, 27), (4, 28), (4, 29), (4, 30), (4, 31), (4, 32), (4, 33), (5, 7), (5, 8), (5, 9), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21), (5, 22), (5, 23), (5, 24), (5, 25), (5, 26), (5, 27), (5, 28), (5, 29), (5, 30), (5, 31), (5, 32), (5, 33), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (6, 14), (6, 15), (6, 17), (6, 18), (6, 19), (6, 20), (6, 21), (6, 22), (6, 23), (6, 24), (6, 25), (6, 26), (6, 27), (6, 28), (6, 29), (6, 30), (6, 31), (6, 32), (6, 33), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20), (7, 21), (7, 22), (7, 23), (7, 24), (7, 25), (7, 26), (7, 27), (7, 28), (7, 29), (7, 30), (7, 31), (7, 32), (7, 33), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (8, 24), (8, 25), (8, 26), (8, 27), (8, 28), (8, 29), (8, 31), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 24), (9, 25), (9, 26), (9, 27), (9, 28), (9, 29), (9, 30), (9, 31), (9, 32), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (10, 24), (10, 25), (10, 26), (10, 27), (10, 28), (10, 29), (10, 30), (10, 31), (10, 32), (10, 33), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 20), (11, 21), (11, 22), (11, 23), (11, 24), (11, 25), (11, 26), (11, 27), (11, 28), (11, 29), (11, 30), (11, 31), (11, 32), (11, 33), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (12, 24), (12, 25), (12, 26), (12, 27), (12, 28), (12, 29), (12, 30), (12, 31), (12, 32), (12, 33), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 21), (13, 22), (13, 23), (13, 24), (13, 25), (13, 26), (13, 27), (13, 28), (13, 29), (13, 30), (13, 31), (13, 32), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (14, 25), (14, 26), (14, 27), (14, 28), (14, 29), (14, 30), (14, 31), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (15, 25), (15, 26), (15, 27), (15, 28), (15, 29), (15, 30), (15, 31), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 23), (16, 24), (16, 25), (16, 26), (16, 27), (16, 28), (16, 29), (16, 30), (16, 31), (16, 32), (16, 33), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (17, 24), (17, 25), (17, 26), (17, 27), (17, 28), (17, 29), (17, 30), (17, 31), (17, 32), (17, 33), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (18, 25), (18, 26), (18, 27), (18, 28), (18, 29), (18, 30), (18, 31), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (19, 25), (19, 26), (19, 27), (19, 28), (19, 29), (19, 30), (19, 31), (19, 32), (20, 21), (20, 22), (20, 23), (20, 24), (20, 25), (20, 26), (20, 27), (20, 28), (20, 29), (20, 30), (20, 31), (21, 22), (21, 23), (21, 24), (21, 25), (21, 26), (21, 27), (21, 28), (21, 29), (21, 30), (21, 31), (21, 32), (21, 33), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (22, 28), (22, 29), (22, 30), (22, 31), (23, 24), (23, 26), (23, 28), (23, 30), (23, 31), (24, 26), (24, 28), (24, 29), (24, 30), (24, 32), (24, 33), (25, 26), (25, 27), (25, 28), (25, 29), (25, 30), (25, 32), (25, 33), (26, 27), (26, 28), (26, 30), (26, 31), (26, 32), (27, 28), (27, 29), (27, 30), (27, 31), (27, 32), (28, 29), (28, 30), (28, 32), (29, 30), (29, 31), (30, 31)]

test "complement of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = complement(dkarate)
  check got.isDirected() == true
  check got.numberOfNodes() == 34
  check got.numberOfEdges() == 1044
  check got.edges() == @[(0, 9), (0, 14), (0, 15), (0, 16), (0, 18), (0, 20), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 32), (0, 33), (1, 0), (1, 4), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 14), (1, 15), (1, 16), (1, 18), (1, 20), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 31), (1, 32), (1, 33), (2, 0), (2, 1), (2, 4), (2, 5), (2, 6), (2, 10), (2, 11), (2, 12), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (2, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 29), (2, 30), (2, 31), (2, 33), (3, 0), (3, 1), (3, 2), (3, 4), (3, 5), (3, 6), (3, 8), (3, 9), (3, 10), (3, 11), (3, 14), (3, 15), (3, 16), (3, 17), (3, 18), (3, 19), (3, 20), (3, 21), (3, 22), (3, 23), (3, 24), (3, 25), (3, 26), (3, 27), (3, 28), (3, 29), (3, 30), (3, 31), (3, 32), (3, 33), (4, 0), (4, 1), (4, 2), (4, 3), (4, 5), (4, 7), (4, 8), (4, 9), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (4, 24), (4, 25), (4, 26), (4, 27), (4, 28), (4, 29), (4, 30), (4, 31), (4, 32), (4, 33), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 7), (5, 8), (5, 9), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21), (5, 22), (5, 23), (5, 24), (5, 25), (5, 26), (5, 27), (5, 28), (5, 29), (5, 30), (5, 31), (5, 32), (5, 33), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (6, 14), (6, 15), (6, 17), (6, 18), (6, 19), (6, 20), (6, 21), (6, 22), (6, 23), (6, 24), (6, 25), (6, 26), (6, 27), (6, 28), (6, 29), (6, 30), (6, 31), (6, 32), (6, 33), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20), (7, 21), (7, 22), (7, 23), (7, 24), (7, 25), (7, 26), (7, 27), (7, 28), (7, 29), (7, 30), (7, 31), (7, 32), (7, 33), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (8, 24), (8, 25), (8, 26), (8, 27), (8, 28), (8, 29), (8, 31), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 24), (9, 25), (9, 26), (9, 27), (9, 28), (9, 29), (9, 30), (9, 31), (9, 32), (10, 0), (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 9), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (10, 24), (10, 25), (10, 26), (10, 27), (10, 28), (10, 29), (10, 30), (10, 31), (10, 32), (10, 33), (11, 0), (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 7), (11, 8), (11, 9), (11, 10), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 20), (11, 21), (11, 22), (11, 23), (11, 24), (11, 25), (11, 26), (11, 27), (11, 28), (11, 29), (11, 30), (11, 31), (11, 32), (11, 33), (12, 0), (12, 1), (12, 2), (12, 3), (12, 4), (12, 5), (12, 6), (12, 7), (12, 8), (12, 9), (12, 10), (12, 11), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (12, 24), (12, 25), (12, 26), (12, 27), (12, 28), (12, 29), (12, 30), (12, 31), (12, 32), (12, 33), (13, 0), (13, 1), (13, 2), (13, 3), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 9), (13, 10), (13, 11), (13, 12), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 21), (13, 22), (13, 23), (13, 24), (13, 25), (13, 26), (13, 27), (13, 28), (13, 29), (13, 30), (13, 31), (13, 32), (14, 0), (14, 1), (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), (14, 12), (14, 13), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (14, 25), (14, 26), (14, 27), (14, 28), (14, 29), (14, 30), (14, 31), (15, 0), (15, 1), (15, 2), (15, 3), (15, 4), (15, 5), (15, 6), (15, 7), (15, 8), (15, 9), (15, 10), (15, 11), (15, 12), (15, 13), (15, 14), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (15, 25), (15, 26), (15, 27), (15, 28), (15, 29), (15, 30), (15, 31), (16, 0), (16, 1), (16, 2), (16, 3), (16, 4), (16, 5), (16, 6), (16, 7), (16, 8), (16, 9), (16, 10), (16, 11), (16, 12), (16, 13), (16, 14), (16, 15), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 23), (16, 24), (16, 25), (16, 26), (16, 27), (16, 28), (16, 29), (16, 30), (16, 31), (16, 32), (16, 33), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7), (17, 8), (17, 9), (17, 10), (17, 11), (17, 12), (17, 13), (17, 14), (17, 15), (17, 16), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (17, 24), (17, 25), (17, 26), (17, 27), (17, 28), (17, 29), (17, 30), (17, 31), (17, 32), (17, 33), (18, 0), (18, 1), (18, 2), (18, 3), (18, 4), (18, 5), (18, 6), (18, 7), (18, 8), (18, 9), (18, 10), (18, 11), (18, 12), (18, 13), (18, 14), (18, 15), (18, 16), (18, 17), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (18, 25), (18, 26), (18, 27), (18, 28), (18, 29), (18, 30), (18, 31), (19, 0), (19, 1), (19, 2), (19, 3), (19, 4), (19, 5), (19, 6), (19, 7), (19, 8), (19, 9), (19, 10), (19, 11), (19, 12), (19, 13), (19, 14), (19, 15), (19, 16), (19, 17), (19, 18), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (19, 25), (19, 26), (19, 27), (19, 28), (19, 29), (19, 30), (19, 31), (19, 32), (20, 0), (20, 1), (20, 2), (20, 3), (20, 4), (20, 5), (20, 6), (20, 7), (20, 8), (20, 9), (20, 10), (20, 11), (20, 12), (20, 13), (20, 14), (20, 15), (20, 16), (20, 17), (20, 18), (20, 19), (20, 21), (20, 22), (20, 23), (20, 24), (20, 25), (20, 26), (20, 27), (20, 28), (20, 29), (20, 30), (20, 31), (21, 0), (21, 1), (21, 2), (21, 3), (21, 4), (21, 5), (21, 6), (21, 7), (21, 8), (21, 9), (21, 10), (21, 11), (21, 12), (21, 13), (21, 14), (21, 15), (21, 16), (21, 17), (21, 18), (21, 19), (21, 20), (21, 22), (21, 23), (21, 24), (21, 25), (21, 26), (21, 27), (21, 28), (21, 29), (21, 30), (21, 31), (21, 32), (21, 33), (22, 0), (22, 1), (22, 2), (22, 3), (22, 4), (22, 5), (22, 6), (22, 7), (22, 8), (22, 9), (22, 10), (22, 11), (22, 12), (22, 13), (22, 14), (22, 15), (22, 16), (22, 17), (22, 18), (22, 19), (22, 20), (22, 21), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (22, 28), (22, 29), (22, 30), (22, 31), (23, 0), (23, 1), (23, 2), (23, 3), (23, 4), (23, 5), (23, 6), (23, 7), (23, 8), (23, 9), (23, 10), (23, 11), (23, 12), (23, 13), (23, 14), (23, 15), (23, 16), (23, 17), (23, 18), (23, 19), (23, 20), (23, 21), (23, 22), (23, 24), (23, 26), (23, 28), (23, 30), (23, 31), (24, 0), (24, 1), (24, 2), (24, 3), (24, 4), (24, 5), (24, 6), (24, 7), (24, 8), (24, 9), (24, 10), (24, 11), (24, 12), (24, 13), (24, 14), (24, 15), (24, 16), (24, 17), (24, 18), (24, 19), (24, 20), (24, 21), (24, 22), (24, 23), (24, 26), (24, 28), (24, 29), (24, 30), (24, 32), (24, 33), (25, 0), (25, 1), (25, 2), (25, 3), (25, 4), (25, 5), (25, 6), (25, 7), (25, 8), (25, 9), (25, 10), (25, 11), (25, 12), (25, 13), (25, 14), (25, 15), (25, 16), (25, 17), (25, 18), (25, 19), (25, 20), (25, 21), (25, 22), (25, 23), (25, 24), (25, 26), (25, 27), (25, 28), (25, 29), (25, 30), (25, 32), (25, 33), (26, 0), (26, 1), (26, 2), (26, 3), (26, 4), (26, 5), (26, 6), (26, 7), (26, 8), (26, 9), (26, 10), (26, 11), (26, 12), (26, 13), (26, 14), (26, 15), (26, 16), (26, 17), (26, 18), (26, 19), (26, 20), (26, 21), (26, 22), (26, 23), (26, 24), (26, 25), (26, 27), (26, 28), (26, 30), (26, 31), (26, 32), (27, 0), (27, 1), (27, 2), (27, 3), (27, 4), (27, 5), (27, 6), (27, 7), (27, 8), (27, 9), (27, 10), (27, 11), (27, 12), (27, 13), (27, 14), (27, 15), (27, 16), (27, 17), (27, 18), (27, 19), (27, 20), (27, 21), (27, 22), (27, 23), (27, 24), (27, 25), (27, 26), (27, 28), (27, 29), (27, 30), (27, 31), (27, 32), (28, 0), (28, 1), (28, 2), (28, 3), (28, 4), (28, 5), (28, 6), (28, 7), (28, 8), (28, 9), (28, 10), (28, 11), (28, 12), (28, 13), (28, 14), (28, 15), (28, 16), (28, 17), (28, 18), (28, 19), (28, 20), (28, 21), (28, 22), (28, 23), (28, 24), (28, 25), (28, 26), (28, 27), (28, 29), (28, 30), (28, 32), (29, 0), (29, 1), (29, 2), (29, 3), (29, 4), (29, 5), (29, 6), (29, 7), (29, 8), (29, 9), (29, 10), (29, 11), (29, 12), (29, 13), (29, 14), (29, 15), (29, 16), (29, 17), (29, 18), (29, 19), (29, 20), (29, 21), (29, 22), (29, 23), (29, 24), (29, 25), (29, 26), (29, 27), (29, 28), (29, 30), (29, 31), (30, 0), (30, 1), (30, 2), (30, 3), (30, 4), (30, 5), (30, 6), (30, 7), (30, 8), (30, 9), (30, 10), (30, 11), (30, 12), (30, 13), (30, 14), (30, 15), (30, 16), (30, 17), (30, 18), (30, 19), (30, 20), (30, 21), (30, 22), (30, 23), (30, 24), (30, 25), (30, 26), (30, 27), (30, 28), (30, 29), (30, 31), (31, 0), (31, 1), (31, 2), (31, 3), (31, 4), (31, 5), (31, 6), (31, 7), (31, 8), (31, 9), (31, 10), (31, 11), (31, 12), (31, 13), (31, 14), (31, 15), (31, 16), (31, 17), (31, 18), (31, 19), (31, 20), (31, 21), (31, 22), (31, 23), (31, 24), (31, 25), (31, 26), (31, 27), (31, 28), (31, 29), (31, 30), (32, 0), (32, 1), (32, 2), (32, 3), (32, 4), (32, 5), (32, 6), (32, 7), (32, 8), (32, 9), (32, 10), (32, 11), (32, 12), (32, 13), (32, 14), (32, 15), (32, 16), (32, 17), (32, 18), (32, 19), (32, 20), (32, 21), (32, 22), (32, 23), (32, 24), (32, 25), (32, 26), (32, 27), (32, 28), (32, 29), (32, 30), (32, 31), (33, 0), (33, 1), (33, 2), (33, 3), (33, 4), (33, 5), (33, 6), (33, 7), (33, 8), (33, 9), (33, 10), (33, 11), (33, 12), (33, 13), (33, 14), (33, 15), (33, 16), (33, 17), (33, 18), (33, 19), (33, 20), (33, 21), (33, 22), (33, 23), (33, 24), (33, 25), (33, 26), (33, 27), (33, 28), (33, 29), (33, 30), (33, 31), (33, 32)]

test "reverse directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = reverse(dkarate)
  check got.isDirected() == true
  check got.numberOfNodes() == 34
  check got.numberOfEdges() == 78
  check got.edges() == @[(1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2), (4, 0), (5, 0), (6, 0), (6, 4), (6, 5), (7, 0), (7, 1), (7, 2), (7, 3), (8, 0), (8, 2), (9, 2), (10, 0), (10, 4), (10, 5), (11, 0), (12, 0), (12, 3), (13, 0), (13, 1), (13, 2), (13, 3), (16, 5), (16, 6), (17, 0), (17, 1), (19, 0), (19, 1), (21, 0), (21, 1), (25, 23), (25, 24), (27, 2), (27, 23), (27, 24), (28, 2), (29, 23), (29, 26), (30, 1), (30, 8), (31, 0), (31, 24), (31, 25), (31, 28), (32, 2), (32, 8), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 30), (32, 31), (33, 8), (33, 9), (33, 13), (33, 14), (33, 15), (33, 18), (33, 19), (33, 20), (33, 22), (33, 23), (33, 26), (33, 27), (33, 28), (33, 29), (33, 30), (33, 31), (33, 32)]

test "reverse directed graph in place":
  var dkarate = newDiGraph(karateClubGraph().edges())
  reverseInplace(dkarate)
  check dkarate.isDirected() == true
  check dkarate.numberOfNodes() == 34
  check dkarate.numberOfEdges() == 78
  check dkarate.edges() == @[(1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2), (4, 0), (5, 0), (6, 0), (6, 4), (6, 5), (7, 0), (7, 1), (7, 2), (7, 3), (8, 0), (8, 2), (9, 2), (10, 0), (10, 4), (10, 5), (11, 0), (12, 0), (12, 3), (13, 0), (13, 1), (13, 2), (13, 3), (16, 5), (16, 6), (17, 0), (17, 1), (19, 0), (19, 1), (21, 0), (21, 1), (25, 23), (25, 24), (27, 2), (27, 23), (27, 24), (28, 2), (29, 23), (29, 26), (30, 1), (30, 8), (31, 0), (31, 24), (31, 25), (31, 28), (32, 2), (32, 8), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 30), (32, 31), (33, 8), (33, 9), (33, 13), (33, 14), (33, 15), (33, 18), (33, 19), (33, 20), (33, 22), (33, 23), (33, 26), (33, 27), (33, 28), (33, 29), (33, 30), (33, 31), (33, 32)]

test "compose graphs":
  let G = newGraph(@[(1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 3), (3, 5), (3, 6), (3, 7)])
  let R = compose(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 7
  check R.numberOfEdges() == 6
  check R.edges() == @[(1, 2), (1, 3), (1, 4), (3, 5), (3, 6), (3, 7)]

test "compose directed graphs":
  let DG = newDiGraph(@[(1, 2), (1, 3), (1, 4)])
  let DH = newDiGraph(@[(3, 1), (3, 5), (3, 6), (3, 7)])
  let DR = compose(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 7
  check DR.numberOfEdges() == 7
  check DR.edges() == @[(1, 2), (1, 3), (1, 4), (3, 1), (3, 5), (3, 6), (3, 7)]

test "try to union graphs":
  let G = newGraph(@[(1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 3), (3, 5), (3, 6), (3, 7)])
  try:
    discard compose(G, H)
  except NNError as e:
    check e.msg == "nodes sets of G and H are not disjoint"

test "try to union directed graphs":
  let DG = newDiGraph(@[(1, 2), (1, 3), (1, 4)])
  let DH = newDiGraph(@[(3, 1), (3, 5), (3, 6), (3, 7)])
  try:
    discard compose(DG, DH)
  except NNError as e:
    check e.msg == "nodes sets of DG and DH are not disjoint"

test "union disjoint graphs":
  let G = newGraph(@[1, 2, 3, 4])
  G.addEdgesFrom(@[(1, 2), (1, 3), (2, 4), (3, 4)])
  let H = newGraph(@[5, 6, 7])
  H.addEdgesFrom(@[(5, 6)])
  let R = compose(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 7
  check R.numberOfEdges() == 5
  check R.edges() == @[(1, 2), (1, 3), (2, 4), (3, 4), (5, 6)]

test "union disjoin directed graphs":
  let DG = newDiGraph(@[1, 2, 3, 4])
  DG.addEdgesFrom(@[(1, 2), (1, 3), (2, 4), (3, 4)])
  let DH = newDiGraph(@[5, 6, 7])
  DH.addEdgesFrom(@[(5, 6)])
  let DR = compose(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 7
  check DR.numberOfEdges() == 5
  check DR.edges() == @[(1, 2), (1, 3), (2, 4), (3, 4), (5, 6)]

test "try to union graphs and success":
  let G = newGraph(@[(1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 3), (3, 5), (3, 6), (3, 7)])
  let R = disjointUnion(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 9
  check R.numberOfEdges() == 7
  check R.edges() == @[(0, 1), (0, 2), (0, 3), (4, 5), (5, 6), (5, 7), (5, 8)]

test "try to union directed graphs and success":
  let DG = newDiGraph(@[(1, 2), (1, 3), (1, 4)])
  let DH = newDiGraph(@[(3, 1), (3, 5), (3, 6), (3, 7)])
  let DR = disjointUnion(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 9
  check DR.numberOfEdges() == 7
  check DR.edges() == @[(0, 1), (0, 2), (0, 3), (5, 4), (5, 6), (5, 7), (5, 8)]

test "intersection of graphs":
  let G = newGraph(@[(1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 3), (3, 5), (3, 6), (3, 7)])
  let R = intersection(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 2
  check R.numberOfEdges() == 1
  check R.edges() == @[(1, 3)]

test "intersection of directed graphs":
  let DG = newDiGraph(@[(1, 2), (1, 3), (1, 4)])
  let DH = newDiGraph(@[(1, 2), (3, 1), (3, 5), (3, 6), (3, 7)])
  let DR = intersection(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 3
  check DR.numberOfEdges() == 1
  check DR.nodes() == @[1, 2, 3]
  check DR.edges() == @[(1, 2)]

test "difference of graphs":
  let G = newGraph(@[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)])
  let H = newGraph(@[(0, 3), (1, 2)])
  let R = difference(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 4
  check R.numberOfEdges() == 4
  check R.nodes() == @[0, 1, 2, 3]
  check R.edges() == @[(0, 1), (0, 2), (1, 3), (2, 3)]

test "difference of directed graphs":
  let DG = newDiGraph(@[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3), (3, 2)])
  let DH = newDiGraph(@[(0, 3), (1, 2)])
  let DR = difference(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 4
  check DR.numberOfEdges() == 5
  check DR.nodes() == @[0, 1, 2, 3]
  check DR.edges() == @[(0, 1), (0, 2), (1, 3), (2, 3), (3, 2)]

test "symmetric difference of graphs":
  let G = newGraph(@[(0, 1), (0, 3), (1, 2)])
  let H = newGraph(@[(0, 2), (0, 3), (1, 2)])
  let R = symmetricDifference(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 3
  check R.numberOfEdges() == 2
  check R.nodes() == @[0, 1, 2]
  check R.edges() == @[(0, 1), (0, 2)]

test "symmetric difference of directed graphs":
  let DG = newDiGraph(@[(0, 1), (0, 3), (1, 2)])
  let DH = newDiGraph(@[(0, 2), (0, 3), (1, 2), (2, 1)])
  let DR = symmetricDifference(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 3
  check DR.numberOfEdges() == 3
  check DR.nodes() == @[0, 1, 2]
  check DR.edges() == @[(0, 1), (0, 2), (2, 1)]

test "full join of graphs":
  let G = newGraph(@[(0, 3), (1, 2), (1, 3)])
  let H = newGraph(@[(4, 6), (5, 7), (6, 7)])
  let R = fullJoin(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 8
  check R.numberOfEdges() == 22
  check R.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7]
  check R.edges() == @[(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 6), (5, 7), (6, 7)]

test "full join of directed graphs":
  let DG = newDiGraph(@[(0, 3), (1, 2), (1, 3)])
  let DH = newDiGraph(@[(4, 6), (5, 7), (6, 7)])
  let DR = fullJoin(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 8
  check DR.numberOfEdges() == 38
  check DR.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7]
  check DR.edges() == @[(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 0), (4, 1), (4, 2), (4, 3), (4, 6), (5, 0), (5, 1), (5, 2), (5, 3), (5, 7), (6, 0), (6, 1), (6, 2), (6, 3), (6, 7), (7, 0), (7, 1), (7, 2), (7, 3)]

test "compose all graphs":
  let G = newGraph(@[(0, 1), (1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let I = newGraph(@[(4, 7), (7, 8), (7, 9), (7, 10)])
  let R = composeAll(@[G, H, I])
  check R.isDirected() == false
  check R.numberOfNodes() == 11
  check R.numberOfEdges() == 10
  check R.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  check R.edges() == @[(0, 1), (1, 2), (1, 3), (1, 4), (4, 5), (4, 6), (4, 7), (7, 8), (7, 9), (7, 10)]

test "compose all directed graphs":
  let DG = newDiGraph(@[(0, 1), (1, 2), (1, 3), (1, 4), (4, 1)])
  let DH = newDiGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let DI = newDiGraph(@[(4, 7), (7, 8), (7, 9), (7, 10)])
  let DR = composeAll(@[DG, DH, DI])
  check DR.isDirected() == true
  check DR.numberOfNodes() == 11
  check DR.numberOfEdges() == 11
  check DR.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  check DR.edges() == @[(0, 1), (1, 2), (1, 3), (1, 4), (4, 1), (4, 5), (4, 6), (4, 7), (7, 8), (7, 9), (7, 10)]

test "union all graphs":
  let G = newGraph(@[(1, 2), (2, 3)])
  let H = newGraph(@[(4, 5)])
  let I = newGraph(@[(6, 7), (7, 8), (8, 9)])
  let R = unionAll(@[G, H, I])
  check R.isDirected() == false
  check R.numberOfNodes() == 9
  check R.numberOfEdges() == 6
  check R.nodes() == @[1, 2, 3, 4, 5, 6, 7, 8, 9]
  check R.edges() == @[(1, 2), (2, 3), (4, 5), (6, 7), (7, 8), (8, 9)]

test "union all directed graphs":
  let DG = newDiGraph(@[(1, 2), (2, 3)])
  let DH = newDiGraph(@[(4, 5)])
  let DI = newDiGraph(@[(6, 7), (7, 8), (8, 9)])
  let DR = unionAll(@[DG, DH, DI])
  check DR.isDirected() == true
  check DR.numberOfNodes() == 9
  check DR.numberOfEdges() == 6
  check DR.nodes() == @[1, 2, 3, 4, 5, 6, 7, 8, 9]
  check DR.edges() == @[(1, 2), (2, 3), (4, 5), (6, 7), (7, 8), (8, 9)]

test "union disjoint all graphs":
  let G = newGraph(@[(0, 1), (1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let I = newGraph(@[(4, 7), (7, 8), (7, 9), (7, 10)])
  let R = disjointUnionAll(@[G, H, I])
  check R.isDirected() == false
  check R.numberOfNodes() == 15
  check R.numberOfEdges() == 12
  check R.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
  check R.edges() == @[(0, 1), (1, 2), (1, 3), (1, 4), (5, 6), (6, 7), (6, 8), (6, 9), (10, 11), (11, 12), (11, 13), (11, 14)]

test "union disjoint all directed graphs":
  let DG = newDiGraph(@[(0, 1), (1, 2), (1, 3), (1, 4), (4, 1)])
  let DH = newDiGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let DI = newDiGraph(@[(4, 7), (7, 8), (7, 9), (7, 10)])
  let DR = disjointUnionAll(@[DG, DH, DI])
  check DR.isDirected() == true
  check DR.numberOfNodes() == 15
  check DR.numberOfEdges() == 13
  check DR.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
  check DR.edges() == @[(0, 1), (1, 2), (1, 3), (1, 4), (4, 1), (5, 6), (6, 7), (6, 8), (6, 9), (10, 11), (11, 12), (11, 13), (11, 14)]

test "intersection all graphs":
  let G = newGraph(@[(0, 1), (1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let I = newGraph(@[(1, 4), (4, 7), (7, 8), (7, 9), (7, 10)])
  let R = intersectionAll(@[G, H, I])
  check R.isDirected() == false
  check R.numberOfNodes() == 2
  check R.numberOfEdges() == 1
  check R.nodes() == @[1, 4]
  check R.edges() == @[(1, 4)]

test "intersection all directed graphs":
  let DG = newDiGraph(@[(0, 1), (1, 2), (1, 3), (1, 4), (4, 1)])
  let DH = newDiGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let DI = newDiGraph(@[(1, 4), (4, 7), (7, 8), (7, 9), (7, 10)])
  let DR = intersectionAll(@[DG, DH, DI])
  check DR.isDirected() == true
  check DR.numberOfNodes() == 2
  check DR.numberOfEdges() == 1
  check DR.nodes() == @[1, 4]
  check DR.edges() == @[(1, 4)]

test "try to apply intersectionAll to empty graph and fail":
  let G = newGraph(@[(0, 1), (1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let I = newGraph()
  try:
    discard intersectionAll(@[G, H, I])
  except NNError as e:
    check e.msg == "cannot apply intersectionAll to empty graph sequence"

test "try to apply intersectionAll to empty directed graph and fail":
  let DG = newDiGraph(@[(0, 1), (1, 2), (1, 3), (1, 4)])
  let DH = newDiGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let DI = newDiGraph()
  try:
    discard intersectionAll(@[DG, DH, DI])
  except NNError as e:
    check e.msg == "cannot apply intersectionAll to empty directed graph sequence"

test "power product of graph":
  let G = pathGraph(4)
  let G2 = power(G, 2)
  check G2.isDirected() == false
  check G2.numberOfNodes() == 4
  check G2.numberOfEdges() == 5
  check G2.nodes() == @[0, 1, 2, 3]
  check G2.edges() == @[(0, 1), (0, 2), (1, 2), (1, 3), (2, 3)]
  let G4 = power(G, 4)
  check G4.isDirected() == false
  check G4.numberOfNodes() == 4
  check G4.numberOfEdges() == 6
  check G4.nodes() == @[0, 1, 2, 3]
  check G4.edges() == @[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]

# -------------------------------------------------------------------
# Planarity
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Planar Drawing
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Reciprocity
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Regular
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Rich Club
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Shortest Paths
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Similarity Measures
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Simple Paths
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Small World
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# s-metric
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Sparsifiers
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Structual Holes
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Summarization
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Swap
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Threshold Graphs
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Tournament
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Traversal
# -------------------------------------------------------------------

test "dfs edges on graph":
  let karate = karateClubGraph()
  var dfsOrderedEdges: seq[Edge] = @[]
  for edge in dfsEdges(karate):
    dfsOrderedEdges.add(edge)
  check dfsOrderedEdges == @[(0, 1), (1, 2), (2, 3), (3, 7), (3, 12), (3, 13), (13, 33), (33, 8), (8, 30), (30, 32), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (23, 25), (25, 24), (24, 27), (24, 31), (31, 28), (23, 29), (29, 26), (33, 9), (33, 19), (1, 17), (1, 21), (0, 4), (4, 6), (6, 5), (5, 10), (5, 16), (0, 11)]

test "dfs edges on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var dfsOrderedEdges: seq[Edge] = @[]
  for edge in dfsEdges(dkarate):
    dfsOrderedEdges.add(edge)
  check dfsOrderedEdges == @[(0, 1), (1, 2), (2, 3), (3, 7), (3, 12), (3, 13), (13, 33), (2, 8), (8, 30), (30, 32), (2, 9), (2, 27), (2, 28), (28, 31), (1, 17), (1, 19), (1, 21), (0, 4), (4, 6), (6, 16), (4, 10), (0, 5), (0, 11), (23, 25), (23, 29)]

test "dfs tree on graph":
  let karate = karateClubGraph()
  let tree = karate.dfsTree()
  check tree.isDirected() == true
  check tree.numberOfNodes() == 34
  check tree.numberOfEdges() == 33
  check tree.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
  check tree.edges() == @[(0, 1), (0, 4), (0, 11), (1, 2), (1, 17), (1, 21), (2, 3), (3, 7), (3, 12), (3, 13), (4, 6), (5, 10), (5, 16), (6, 5), (8, 30), (13, 33), (23, 25), (23, 29), (24, 27), (24, 31), (25, 24), (29, 26), (30, 32), (31, 28), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (33, 8), (33, 9), (33, 19)]

test "dfs tree on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let tree = dkarate.dfsTree()
  check tree.isDirected() == true
  check tree.numberOfNodes() == 34
  check tree.numberOfEdges() == 25
  check tree.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
  check tree.edges() == @[(0, 1), (0, 4), (0, 5), (0, 11), (1, 2), (1, 17), (1, 19), (1, 21), (2, 3), (2, 8), (2, 9), (2, 27), (2, 28), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (6, 16), (8, 30), (13, 33), (23, 25), (23, 29), (28, 31), (30, 32)]

test "dfs predecessor on graph":
  let karate = karateClubGraph()
  let got = karate.dfsPredecessors()
  let expected = {1: 0, 2: 1, 3: 2, 7: 3, 12: 3, 13: 3, 33: 13, 8: 33, 30: 8, 32: 30, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32, 23: 32, 25: 23, 24: 25, 27: 24, 31: 24, 28: 31, 29: 23, 26: 29, 9: 33, 19: 33, 17: 1, 21: 1, 4: 0, 6: 4, 5: 6, 10: 5, 16: 5, 11: 0}.toTable()
  for (node, predecessor) in got.pairs():
    check predecessor == expected[node]

test "dfs predecessor on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = dkarate.dfsPredecessors()
  let expected = {1: 0, 2: 1, 3: 2, 7: 3, 12: 3, 13: 3, 33: 13, 8: 2, 30: 8, 32: 30, 9: 2, 27: 2, 28: 2, 31: 28, 17: 1, 19: 1, 21: 1, 4: 0, 6: 4, 16: 6, 10: 4, 5: 0, 11: 0, 25: 23, 29: 23}.toTable()
  for (node, predecessor) in got.pairs():
    check predecessor == expected[node]

test "dfs successors on graph":
  let karate = karateClubGraph()
  let got = karate.dfsSuccessors()
  let expected = {0: @[1, 4, 11], 1: @[2, 17, 21], 2: @[3], 3: @[7, 12, 13], 13: @[33], 33: @[8, 9, 19], 8: @[30], 30: @[32], 32: @[14, 15, 18, 20, 22, 23], 23: @[25, 29], 25: @[24], 24: @[27, 31], 31: @[28], 29: @[26], 4: @[6], 6: @[5], 5: @[10, 16]
  }.toTable()
  for (node, successors) in got.pairs():
    check successors == expected[node]

test "dfs successors on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = dkarate.dfsSuccessors()
  let expected = {0: @[1, 4, 5, 11], 1: @[2, 17, 19, 21], 2: @[3, 8, 9, 27, 28], 3: @[7, 12, 13], 13: @[33], 8: @[30], 30: @[32], 28: @[31], 4: @[6, 10], 6: @[16], 23: @[25, 29]}.toTable()
  for (node, successors) in got.pairs():
    check successors == expected[node]

test "dfs labeled edges on graph":
  let karate = karateClubGraph()
  var labeledEdges: seq[tuple[u, v: Node, direction: string]] = @[]
  for labeledEdge in karate.dfsLabeledEdges():
    labeledEdges.add(labeledEdge)
  check labeledEdges == @[(0, 0, "forward"), (0, 1, "forward"), (1, 0, "nontree"), (1, 2, "forward"), (2, 0, "nontree"), (2, 1, "nontree"), (2, 3, "forward"), (3, 0, "nontree"), (3, 1, "nontree"), (3, 2, "nontree"), (3, 7, "forward"), (7, 0, "nontree"), (7, 1, "nontree"), (7, 2, "nontree"), (7, 3, "nontree"), (3, 7, "reverse"), (3, 12, "forward"), (12, 0, "nontree"), (12, 3, "nontree"), (3, 12, "reverse"), (3, 13, "forward"), (13, 0, "nontree"), (13, 1, "nontree"), (13, 2, "nontree"), (13, 3, "nontree"), (13, 33, "forward"), (33, 8, "forward"), (8, 0, "nontree"), (8, 2, "nontree"), (8, 30, "forward"), (30, 1, "nontree"), (30, 8, "nontree"), (30, 32, "forward"), (32, 2, "nontree"), (32, 8, "nontree"), (32, 14, "forward"), (14, 32, "nontree"), (14, 33, "nontree"), (32, 14, "reverse"), (32, 15, "forward"), (15, 32, "nontree"), (15, 33, "nontree"), (32, 15, "reverse"), (32, 18, "forward"), (18, 32, "nontree"), (18, 33, "nontree"), (32, 18, "reverse"), (32, 20, "forward"), (20, 32, "nontree"), (20, 33, "nontree"), (32, 20, "reverse"), (32, 22, "forward"), (22, 32, "nontree"), (22, 33, "nontree"), (32, 22, "reverse"), (32, 23, "forward"), (23, 25, "forward"), (25, 23, "nontree"), (25, 24, "forward"), (24, 25, "nontree"), (24, 27, "forward"), (27, 2, "nontree"), (27, 23, "nontree"), (27, 24, "nontree"), (27, 33, "nontree"), (24, 27, "reverse"), (24, 31, "forward"), (31, 0, "nontree"), (31, 24, "nontree"), (31, 25, "nontree"), (31, 28, "forward"), (28, 2, "nontree"), (28, 31, "nontree"), (28, 33, "nontree"), (31, 28, "reverse"), (31, 32, "nontree"), (31, 33, "nontree"), (24, 31, "reverse"), (25, 24, "reverse"), (25, 31, "nontree"), (23, 25, "reverse"), (23, 27, "nontree"), (23, 29, "forward"), (29, 23, "nontree"), (29, 26, "forward"), (26, 29, "nontree"), (26, 33, "nontree"), (29, 26, "reverse"), (29, 32, "nontree"), (29, 33, "nontree"), (23, 29, "reverse"), (23, 32, "nontree"), (23, 33, "nontree"), (32, 23, "reverse"), (32, 29, "nontree"), (32, 30, "nontree"), (32, 31, "nontree"), (32, 33, "nontree"), (30, 32, "reverse"), (30, 33, "nontree"), (8, 30, "reverse"), (8, 32, "nontree"), (8, 33, "nontree"), (33, 8, "reverse"), (33, 9, "forward"), (9, 2, "nontree"), (9, 33, "nontree"), (33, 9, "reverse"), (33, 13, "nontree"), (33, 14, "nontree"), (33, 15, "nontree"), (33, 18, "nontree"), (33, 19, "forward"), (19, 0, "nontree"), (19, 1, "nontree"), (19, 33, "nontree"), (33, 19, "reverse"), (33, 20, "nontree"), (33, 22, "nontree"), (33, 23, "nontree"), (33, 26, "nontree"), (33, 27, "nontree"), (33, 28, "nontree"), (33, 29, "nontree"), (33, 30, "nontree"), (33, 31, "nontree"), (33, 32, "nontree"), (13, 33, "reverse"), (3, 13, "reverse"), (2, 3, "reverse"), (2, 7, "nontree"), (2, 8, "nontree"), (2, 9, "nontree"), (2, 13, "nontree"), (2, 27, "nontree"), (2, 28, "nontree"), (2, 32, "nontree"), (1, 2, "reverse"), (1, 3, "nontree"), (1, 7, "nontree"), (1, 13, "nontree"), (1, 17, "forward"), (17, 0, "nontree"), (17, 1, "nontree"), (1, 17, "reverse"), (1, 19, "nontree"), (1, 21, "forward"), (21, 0, "nontree"), (21, 1, "nontree"), (1, 21, "reverse"), (1, 30, "nontree"), (0, 1, "reverse"), (0, 2, "nontree"), (0, 3, "nontree"), (0, 4, "forward"), (4, 0, "nontree"), (4, 6, "forward"), (6, 0, "nontree"), (6, 4, "nontree"), (6, 5, "forward"), (5, 0, "nontree"), (5, 6, "nontree"), (5, 10, "forward"), (10, 0, "nontree"), (10, 4, "nontree"), (10, 5, "nontree"), (5, 10, "reverse"), (5, 16, "forward"), (16, 5, "nontree"), (16, 6, "nontree"), (5, 16, "reverse"), (6, 5, "reverse"), (6, 16, "nontree"), (4, 6, "reverse"), (4, 10, "nontree"), (0, 4, "reverse"), (0, 5, "nontree"), (0, 6, "nontree"), (0, 7, "nontree"), (0, 8, "nontree"), (0, 10, "nontree"), (0, 11, "forward"), (11, 0, "nontree"), (0, 11, "reverse"), (0, 12, "nontree"), (0, 13, "nontree"), (0, 17, "nontree"), (0, 19, "nontree"), (0, 21, "nontree"), (0, 31, "nontree"), (0, 0, "reverse")]

test "dfs labeled edges on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var labeledEdges: seq[tuple[u, v: Node, direction: string]] = @[]
  for labeledEdge in dkarate.dfsLabeledEdges():
    labeledEdges.add(labeledEdge)
  check labeledEdges == @[(0, 0, "forward"), (0, 1, "forward"), (1, 2, "forward"), (2, 3, "forward"), (3, 7, "forward"), (3, 7, "reverse"), (3, 12, "forward"), (3, 12, "reverse"), (3, 13, "forward"), (13, 33, "forward"), (13, 33, "reverse"), (3, 13, "reverse"), (2, 3, "reverse"), (2, 7, "nontree"), (2, 8, "forward"), (8, 30, "forward"), (30, 32, "forward"), (32, 33, "nontree"), (30, 32, "reverse"), (30, 33, "nontree"), (8, 30, "reverse"), (8, 32, "nontree"), (8, 33, "nontree"), (2, 8, "reverse"), (2, 9, "forward"), (9, 33, "nontree"), (2, 9, "reverse"), (2, 13, "nontree"), (2, 27, "forward"), (27, 33, "nontree"), (2, 27, "reverse"), (2, 28, "forward"), (28, 31, "forward"), (31, 32, "nontree"), (31, 33, "nontree"), (28, 31, "reverse"), (28, 33, "nontree"), (2, 28, "reverse"), (2, 32, "nontree"), (1, 2, "reverse"), (1, 3, "nontree"), (1, 7, "nontree"), (1, 13, "nontree"), (1, 17, "forward"), (1, 17, "reverse"), (1, 19, "forward"), (19, 33, "nontree"), (1, 19, "reverse"), (1, 21, "forward"), (1, 21, "reverse"), (1, 30, "nontree"), (0, 1, "reverse"), (0, 2, "nontree"), (0, 3, "nontree"), (0, 4, "forward"), (4, 6, "forward"), (6, 16, "forward"), (6, 16, "reverse"), (4, 6, "reverse"), (4, 10, "forward"), (4, 10, "reverse"), (0, 4, "reverse"), (0, 5, "forward"), (5, 6, "nontree"), (5, 10, "nontree"), (5, 16, "nontree"), (0, 5, "reverse"), (0, 6, "nontree"), (0, 7, "nontree"), (0, 8, "nontree"), (0, 10, "nontree"), (0, 11, "forward"), (0, 11, "reverse"), (0, 12, "nontree"), (0, 13, "nontree"), (0, 17, "nontree"), (0, 19, "nontree"), (0, 21, "nontree"), (0, 31, "nontree"), (0, 0, "reverse"), (14, 14, "forward"), (14, 32, "nontree"), (14, 33, "nontree"), (14, 14, "reverse"), (15, 15, "forward"), (15, 32, "nontree"), (15, 33, "nontree"), (15, 15, "reverse"), (18, 18, "forward"), (18, 32, "nontree"), (18, 33, "nontree"), (18, 18, "reverse"), (20, 20, "forward"), (20, 32, "nontree"), (20, 33, "nontree"), (20, 20, "reverse"), (22, 22, "forward"), (22, 32, "nontree"), (22, 33, "nontree"), (22, 22, "reverse"), (23, 23, "forward"), (23, 25, "forward"), (25, 31, "nontree"), (23, 25, "reverse"), (23, 27, "nontree"), (23, 29, "forward"), (29, 32, "nontree"), (29, 33, "nontree"), (23, 29, "reverse"), (23, 32, "nontree"), (23, 33, "nontree"), (23, 23, "reverse"), (24, 24, "forward"), (24, 25, "nontree"), (24, 27, "nontree"), (24, 31, "nontree"), (24, 24, "reverse"), (26, 26, "forward"), (26, 29, "nontree"), (26, 33, "nontree"), (26, 26, "reverse")]

test "dfs post order nodes on graph":
  let karate = karateClubGraph()
  check karate.dfsPostOrderNodes() == @[7, 12, 14, 15, 18, 20, 22, 27, 28, 31, 24, 25, 26, 29, 23, 32, 30, 8, 9, 19, 33, 13, 3, 2, 17, 21, 1, 10, 16, 5, 6, 4, 11, 0]

test "dfs post order nodes on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.dfsPostOrderNodes() == @[7, 12, 33, 13, 3, 32, 30, 8, 9, 27, 31, 28, 2, 17, 19, 21, 1, 16, 6, 10, 4, 5, 11, 0, 14, 15, 18, 20, 22, 25, 29, 23, 24, 26]

test "dfs pre order nodes on graph":
  let karate = karateClubGraph()
  check karate.dfsPreOrderNodes() == @[0, 1, 2, 3, 7, 12, 13, 33, 8, 30, 32, 14, 15, 18, 20, 22, 23, 25, 24, 27, 31, 28, 29, 26, 9, 19, 17, 21, 4, 6, 5, 10, 16, 11]

test "dfs pre order nodes on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.dfsPreOrderNodes() == @[0, 1, 2, 3, 7, 12, 13, 33, 8, 30, 32, 9, 27, 28, 31, 17, 19, 21, 4, 6, 16, 10, 5, 11, 14, 15, 18, 20, 22, 23, 25, 29, 24, 26]

test "bfs edges on graph":
  let karate = karateClubGraph()
  var bfsOrderedEdges: seq[Edge] = @[]
  for edge in bfsEdges(karate, 0):
    bfsOrderedEdges.add(edge)
  check bfsOrderedEdges == @[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 30), (2, 9), (2, 27), (2, 28), (2, 32), (5, 16), (8, 33), (31, 24), (31, 25), (27, 23), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 29), (33, 26)]

test "bfs edges on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var bfsOrderedEdges: seq[Edge] = @[]
  for edge in bfsEdges(dkarate, 0):
    bfsOrderedEdges.add(edge)
  check bfsOrderedEdges == @[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 30), (2, 9), (2, 27), (2, 28), (2, 32), (5, 16), (8, 33)]

test "bfs tree on graph":
  let karate = karateClubGraph()
  let tree = bfsTree(karate, 0)
  check tree.isDirected() == true
  check tree.numberOfNodes() == 34
  check tree.numberOfEdges() == 33
  check tree.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
  check tree.edges() == @[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 30), (2, 9), (2, 27), (2, 28), (2, 32), (5, 16), (8, 33), (27, 23), (31, 24), (31, 25), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 29), (33, 26)]

test "bfs tree on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let tree = bfsTree(dkarate, 0)
  check tree.isDirected() == true
  check tree.numberOfNodes() == 24
  check tree.numberOfEdges() == 23
  check tree.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 27, 28, 30, 31, 32, 33]
  check tree.edges() == @[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 30), (2, 9), (2, 27), (2, 28), (2, 32), (5, 16), (8, 33)]

test "bfs predecessor on graph":
  let karate = karateClubGraph()
  var ret: seq[tuple[node: Node, predecessor: Node]] = @[]
  for pair in karate.bfsPredecessors(0):
    ret.add(pair)
  check ret == @[(1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (10, 0), (11, 0), (12, 0), (13, 0), (17, 0), (19, 0), (21, 0), (31, 0), (30, 1), (9, 2), (27, 2), (28, 2), (32, 2), (16, 5), (33, 8), (24, 31), (25, 31), (23, 27), (14, 32), (15, 32), (18, 32), (20, 32), (22, 32), (29, 32), (26, 33)]

test "bfs predecessor on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var ret: seq[tuple[node: Node, predecessor: Node]] = @[]
  for pair in dkarate.bfsPredecessors(0):
    ret.add(pair)
  check ret == @[(1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (10, 0), (11, 0), (12, 0), (13, 0), (17, 0), (19, 0), (21, 0), (31, 0), (30, 1), (9, 2), (27, 2), (28, 2), (32, 2), (16, 5), (33, 8)]

test "bfs successors on graph":
  let karate = karateClubGraph()
  var ret: seq[tuple[node: Node, successors: seq[Node]]] = @[]
  for pair in karate.bfsSuccessors(0):
    ret.add(pair)
  check ret == @[
    (0, @[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 21, 31]),
    (1, @[30]),
    (2, @[9, 27, 28, 32]),
    (5, @[16]),
    (8, @[33]),
    (31, @[24, 25]),
    (27, @[23]),
    (32, @[14, 15, 18, 20, 22, 29]),
    (33, @[26])
  ]

test "bfs successors on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var ret: seq[tuple[node: Node, successors: seq[Node]]] = @[]
  for pair in dkarate.bfsSuccessors(0):
    ret.add(pair)
  check ret == @[
    (0, @[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 21, 31]),
    (1, @[30]),
    (2, @[9, 27, 28, 32]),
    (5, @[16]),
    (8, @[33])]

test "descendants at distance on graph":
  let karate = karateClubGraph()

  var nodesAtDist0: HashSet[Node] = initHashSet[Node]()
  for node in @[0]:
    nodesAtDist0.incl(node)
  check nodesAtDist0 == karate.descendantsAtDistance(0, 0)

  var nodesAtDist1: HashSet[Node] = initHashSet[Node]()
  for node in @[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 21, 31]:
    nodesAtDist1.incl(node)
  check nodesAtDist1 == karate.descendantsAtDistance(0, 1)

  var nodesAtDist2: HashSet[Node] = initHashSet[Node]()
  for node in @[32, 33, 9, 16, 24, 25, 27, 28, 30]:
    nodesAtDist2.incl(node)
  check nodesAtDist2 == karate.descendantsAtDistance(0, 2)

  var nodesAtDist3: HashSet[Node] = initHashSet[Node]()
  for node in @[14, 15, 18, 20, 22, 23, 26, 29]:
    nodesAtDist3.incl(node)
  check nodesAtDist3 == karate.descendantsAtDistance(0, 3)

  check len(karate.descendantsAtDistance(0, 4)) == 0

test "descendants at distance on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())

  var nodesAtDist0: HashSet[Node] = initHashSet[Node]()
  for node in @[0]:
    nodesAtDist0.incl(node)
  check nodesAtDist0 == dkarate.descendantsAtDistance(0, 0)

  var nodesAtDist1: HashSet[Node] = initHashSet[Node]()
  for node in @[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 21, 31]:
    nodesAtDist1.incl(node)
  check nodesAtDist1 == dkarate.descendantsAtDistance(0, 1)

  var nodesAtDist2: HashSet[Node] = initHashSet[Node]()
  for node in @[32, 33, 9, 16, 27, 28, 30]:
    nodesAtDist2.incl(node)
  check nodesAtDist2 == dkarate.descendantsAtDistance(0, 2)

  check len(dkarate.descendantsAtDistance(0, 3)) == 0

test "bfs beam edges on graph":
  let karate = karateClubGraph()
  let centrality = proc(node: Node): float =
    let table: Table[Node, float] = {0: 0.3554834941851943, 1: 0.2659538704545025, 2: 0.31718938996844476, 3: 0.2111740783205706, 4: 0.07596645881657382, 5: 0.07948057788594247, 6: 0.07948057788594247, 7: 0.17095511498035434, 8: 0.2274050914716605, 9: 0.10267519030637758, 10: 0.07596645881657381, 11: 0.05285416945233648, 12: 0.08425192086558088, 13: 0.22646969838808148, 14: 0.10140627846270832, 15: 0.10140627846270832, 16: 0.023634794260596875, 17: 0.09239675666845953, 18: 0.10140627846270832, 19: 0.14791134007618667, 20: 0.10140627846270832, 21: 0.09239675666845953, 22: 0.10140627846270832, 23: 0.15012328691726787, 24: 0.05705373563802805, 25: 0.05920820250279008, 26: 0.07558192219009324, 27: 0.13347932684333308, 28: 0.13107925627221215, 29: 0.13496528673866567, 30: 0.17476027834493085, 31: 0.19103626979791702, 32: 0.3086510477336959, 33: 0.373371213013235}.toTable()
    return table[node]
  var edges: seq[Edge] = @[]
  for edge in karate.bfsBeamEdges(0, centrality, 5):
    edges.add(edge)
  check edges == @[(0, 2), (0, 1), (0, 8), (0, 13), (0, 3), (2, 32), (1, 30), (8, 33), (3, 7), (32, 31), (31, 28), (31, 25), (25, 23), (25, 24), (23, 29), (23, 27), (29, 26)]

test "bfs beam edges on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let centrality = proc(node: Node): float =
    let table: Table[Node, float] = {0: 0.3554834941851943, 1: 0.2659538704545025, 2: 0.31718938996844476, 3: 0.2111740783205706, 4: 0.07596645881657382, 5: 0.07948057788594247, 6: 0.07948057788594247, 7: 0.17095511498035434, 8: 0.2274050914716605, 9: 0.10267519030637758, 10: 0.07596645881657381, 11: 0.05285416945233648, 12: 0.08425192086558088, 13: 0.22646969838808148, 14: 0.10140627846270832, 15: 0.10140627846270832, 16: 0.023634794260596875, 17: 0.09239675666845953, 18: 0.10140627846270832, 19: 0.14791134007618667, 20: 0.10140627846270832, 21: 0.09239675666845953, 22: 0.10140627846270832, 23: 0.15012328691726787, 24: 0.05705373563802805, 25: 0.05920820250279008, 26: 0.07558192219009324, 27: 0.13347932684333308, 28: 0.13107925627221215, 29: 0.13496528673866567, 30: 0.17476027834493085, 31: 0.19103626979791702, 32: 0.3086510477336959, 33: 0.373371213013235}.toTable()
    return table[node]
  var edges: seq[Edge] = @[]
  for edge in dkarate.bfsBeamEdges(0, centrality, 5):
    edges.add(edge)
  check edges == @[(0, 2), (0, 1), (0, 8), (0, 13), (0, 3), (2, 32), (2, 7), (1, 30), (8, 33), (3, 12)]

# -------------------------------------------------------------------
# Tree
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Triads
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Vitality
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Voronoi cells
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Wiener Index
# -------------------------------------------------------------------