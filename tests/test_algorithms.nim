import unittest

import tables
import sets
import sequtils
import algorithm

import nimnet
import nimnet/generators
import nimnet/algorithms

const DELTA = 1.0e-8
proc equal(a, b: float): bool =
  if DELTA < abs(a - b):
      return false
  return true

# -------------------------------------------------------------------
# Approximations and Heuristics
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Assortativity
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Asteroidal
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Bipartite
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Boundary
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Centrality
# -------------------------------------------------------------------

test "degree centrality for undirected graph":
  let karate = karateClubGraph()
  let got = degreeCentrality(karate)
  let expected = {0: 0.48484848484848486, 1: 0.2727272727272727, 2: 0.30303030303030304, 3: 0.18181818181818182, 4: 0.09090909090909091, 5: 0.12121212121212122, 6: 0.12121212121212122, 7: 0.12121212121212122, 8: 0.15151515151515152, 9: 0.06060606060606061, 10: 0.09090909090909091, 11: 0.030303030303030304, 12: 0.06060606060606061, 13: 0.15151515151515152, 14: 0.06060606060606061, 15: 0.06060606060606061, 16: 0.06060606060606061, 17: 0.06060606060606061, 18: 0.06060606060606061, 19: 0.09090909090909091, 20: 0.06060606060606061, 21: 0.06060606060606061, 22: 0.06060606060606061, 23: 0.15151515151515152, 24: 0.09090909090909091, 25: 0.09090909090909091, 26: 0.06060606060606061, 27: 0.12121212121212122, 28: 0.09090909090909091, 29: 0.12121212121212122, 30: 0.12121212121212122, 31: 0.18181818181818182, 32: 0.36363636363636365, 33: 0.5151515151515151}.toTable()
  for (node, val) in got.pairs():
    check equal(val, expected[node]) == true

test "in-degree centrality for directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = inDegreeCentrality(dkarate)
  let expected = {0: 0.0, 1: 0.030303030303030304, 2: 0.06060606060606061, 3: 0.09090909090909091, 4: 0.030303030303030304, 5: 0.030303030303030304, 6: 0.09090909090909091, 7: 0.12121212121212122, 8: 0.06060606060606061, 10: 0.09090909090909091, 11: 0.030303030303030304, 12: 0.06060606060606061, 13: 0.12121212121212122, 17: 0.06060606060606061, 19: 0.06060606060606061, 21: 0.06060606060606061, 31: 0.12121212121212122, 30: 0.06060606060606061, 9: 0.030303030303030304, 27: 0.09090909090909091, 28: 0.030303030303030304, 32: 0.33333333333333337, 16: 0.06060606060606061, 33: 0.5151515151515151, 14: 0.0, 15: 0.0, 18: 0.0, 20: 0.0, 22: 0.0, 23: 0.0, 25: 0.06060606060606061, 29: 0.06060606060606061, 24: 0.0, 26: 0.0}.toTable()
  for (node, val) in got.pairs():
    check equal(val, expected[node]) == true

test "out-degree centrality for directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = outDegreeCentrality(dkarate)
  let expected = {0: 0.48484848484848486, 1: 0.24242424242424243, 2: 0.24242424242424243, 3: 0.09090909090909091, 4: 0.06060606060606061, 5: 0.09090909090909091, 6: 0.030303030303030304, 7: 0.0, 8: 0.09090909090909091, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.030303030303030304, 17: 0.0, 19: 0.030303030303030304, 21: 0.0, 31: 0.06060606060606061, 30: 0.06060606060606061, 9: 0.030303030303030304, 27: 0.030303030303030304, 28: 0.06060606060606061, 32: 0.030303030303030304, 16: 0.0, 33: 0.0, 14: 0.06060606060606061, 15: 0.06060606060606061, 18: 0.06060606060606061, 20: 0.06060606060606061, 22: 0.06060606060606061, 23: 0.15151515151515152, 25: 0.030303030303030304, 29: 0.06060606060606061, 24: 0.09090909090909091, 26: 0.06060606060606061}.toTable()
  for (node, val) in got.pairs():
    check equal(val, expected[node]) == true

# -------------------------------------------------------------------
# Chordal
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Clique
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Clutering
# -------------------------------------------------------------------

test "triangles in graph":
  let karate = karateClubGraph()
  let got = karate.triangles()
  let expected = {0: 18, 1: 12, 2: 11, 3: 10, 4: 2, 5: 3, 6: 3, 7: 6, 8: 5, 9: 0, 10: 2, 11: 0, 12: 1, 13: 6, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1, 21: 1, 22: 1, 23: 4, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1, 29: 4, 30: 3, 31: 3, 32: 13, 33: 15}.toTable()
  for (node, numTri) in got.pairs():
    check numTri == expected[node]

test "transitivity in graph":
  let karate = karateClubGraph()
  check equal(karate.transitivity(), 0.2556818181818182) == true

test "transitivity in directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check equal(dkarate.transitivity(), 0.1076555023923445) == true

# -------------------------------------------------------------------
# Coloring
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Communicability
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Communities
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Components
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Cores
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Covering
# -------------------------------------------------------------------

test "core number of graph":
  let karate = karateClubGraph()
  let got = coreNumber(karate)
  let expected = {0: 4, 1: 4, 2: 4, 3: 4, 4: 3, 5: 3, 6: 3, 7: 4, 8: 4, 9: 2, 10: 3, 11: 1, 12: 2, 13: 4, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 3, 20: 2, 21: 2, 22: 2, 23: 3, 24: 3, 25: 3, 26: 2, 27: 3, 28: 3, 29: 3, 30: 4, 31: 3, 32: 4, 33: 4}.toTable()
  for (node, val) in got.pairs():
    check val == expected[node]

test "core number of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = coreNumber(dkarate)
  let expected = {0: 4, 1: 4, 2: 4, 3: 4, 4: 3, 5: 3, 6: 3, 7: 4, 8: 4, 10: 3, 11: 1, 12: 2, 13: 4, 17: 2, 19: 3, 21: 2, 31: 3, 30: 4, 9: 2, 27: 3, 28: 3, 32: 4, 16: 2, 33: 4, 14: 2, 15: 2, 18: 2, 20: 2, 22: 2, 23: 3, 25: 3, 29: 3, 24: 3, 26: 2}.toTable()
  for (node, val) in got.pairs():
    check val == expected[node]

test "k core of graph":
  let karate = karateClubGraph()
  let got = kCore(karate)
  check got.isDirected() == false
  check got.edges() == @[(0, 1), (0, 2), (0, 3), (0, 7), (0, 8), (0, 13), (1, 2), (1, 3), (1, 7), (1, 13), (1, 30), (2, 3), (2, 7), (2, 8), (2, 13), (2, 32), (3, 7), (3, 13), (8, 30), (8, 32), (8, 33), (13, 33), (30, 32), (30, 33), (32, 33)]

test "k core of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = kCore(dkarate)
  check got.isDirected() == true
  check got.edges() == @[(0, 1), (0, 2), (0, 3), (0, 7), (0, 8), (0, 13), (1, 2), (1, 3), (1, 7), (1, 13), (1, 30), (2, 3), (2, 7), (2, 8), (2, 13), (2, 32), (3, 7), (3, 13), (8, 30), (8, 32), (8, 33), (13, 33), (30, 32), (30, 33), (32, 33)]

test "k shell of graph":
  let karate = karateClubGraph()
  let got = kShell(karate, 3)
  check got.isDirected() == false
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (23, 25), (23, 27), (23, 29), (24, 25), (24, 27), (24, 31), (25, 31), (28, 31)]

test "k shell of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = kShell(dkarate, 3)
  check got.isDirected() == true
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (23, 25), (23, 27), (23, 29), (24, 25), (24, 27), (24, 31), (25, 31), (28, 31)]

test "k crust of graph":
  let karate = karateClubGraph()
  let got = kCrust(karate, 3)
  check got.isDirected() == false
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (23, 25), (23, 27), (23, 29), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (28, 31)]

test "k crust of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = kCrust(dkarate, 3)
  check got.isDirected() == true
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (23, 25), (23, 27), (23, 29), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (28, 31)]

test "k corona of graph":
  let karate = karateClubGraph()
  let got = kCorona(karate, 3)
  check got.isDirected() == false
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (24, 25)]

test "k corona of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = kCorona(dkarate, 3)
  check got.isDirected() == true
  check got.edges() == @[(4, 6), (4, 10), (5, 6), (5, 10), (24, 25)]

test "k truss of graph":
  let karate = karateClubGraph()
  let got = kTruss(karate, 4)
  check got.isDirected() == false
  check got.edges() == [(0, 1), (0, 2), (0, 3), (0, 7), (0, 13), (1, 2), (1, 3), (1, 7), (1, 13), (2, 3), (2, 7), (2, 13), (3, 7), (3, 13), (8, 30), (8, 32), (8, 33), (23, 29), (23, 32), (23, 33), (29, 32), (29, 33), (30, 32), (30, 33), (32, 33)]

test "onion layers of graph":
  let karate = karateClubGraph()
  let got = onionLayers(karate)
  let expected = {11: 1, 9: 2, 12: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 20: 2, 21: 2, 22: 2, 26: 2, 4: 3, 5: 3, 6: 3, 10: 3, 19: 3, 24: 3, 25: 3, 28: 3, 29: 3, 23: 4, 27: 4, 31: 4, 7: 5, 30: 5, 32: 5, 33: 5, 8: 6, 1: 6, 3: 6, 13: 6, 0: 7, 2: 7}.toTable()
  for (node, val) in got.pairs():
    check val == expected[node]

# -------------------------------------------------------------------
# Cycle
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Cuts
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# D-Separation
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# DAG
# -------------------------------------------------------------------

test "topological generations in directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.topologicalGenerations().toSeq() == @[@[0, 14, 15, 18, 20, 22, 23, 24, 26], @[1, 4, 5, 11, 25, 29], @[2, 17, 19, 21, 6, 10], @[3, 8, 9, 27, 28, 16], @[7, 12, 13, 30, 31], @[32], @[33]]

test "topological sort in directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.topologicalSort().toSeq() == @[0, 14, 15, 18, 20, 22, 23, 24, 26, 1, 4, 5, 11, 25, 29, 2, 17, 19, 21, 6, 10, 3, 8, 9, 27, 28, 16, 7, 12, 13, 30, 31, 32, 33]

test "lexicographical sort in directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.lexicographicalTopologicalSort().toSeq() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

test "all topological sorts on directed graph":
  let DG = newDiGraph(@[(1, 2), (2, 3), (2, 4)])
  check DG.allTopologicalSorts().toSeq() == @[@[1, 2, 4, 3], @[1, 2, 3, 4]]

# -------------------------------------------------------------------
# Distance Measures
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Distance-Regular Graphs
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Dominance
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Dominating Sets
# -------------------------------------------------------------------

test "dominating set of graph":
  let karate = karateClubGraph()
  check karate.dominatingSet() == @[0, 9, 14, 15, 16, 18, 20, 22, 23, 24, 26, 28, 30].toHashSet()

test "dominating set of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.dominatingSet() == @[0, 9, 14, 15, 16, 18, 20, 22, 23, 24, 26, 28, 30].toHashSet()

test "check node set is dominating set of graph":
  let karate = karateClubGraph()
  check karate.isDominatingSet(@[0, 9, 14, 15, 16, 18, 20, 22, 23, 24, 26, 28, 30]) == true
  check karate.isDominatingSet(@[0, 9, 14, 15, 16, 18, 20, 22, 23, 24, 26, 28, 30].toHashSet()) == true

test "check node set is dominating set of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.isDominatingSet(@[0, 9, 14, 15, 16, 18, 20, 22, 23, 24, 26, 28, 30]) == true
  check dkarate.isDominatingSet(@[0, 9, 14, 15, 16, 18, 20, 22, 23, 24, 26, 28, 30].toHashSet()) == true

# -------------------------------------------------------------------
# Efficiency
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Flows
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Graph Hashing
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Graphical Degree Sequence
# -------------------------------------------------------------------

test "check whether the degree sequence is valid":
  let karate = pathGraph(4)
  var sequence: seq[int] = @[]
  for node in karate.nodes():
    sequence.add(karate.degree(node))
  check isGraphical(sequence) == true

test "check whether the degree sequence is valid":
  let dkarate = pathDiGraph(4)
  var inSequence: seq[int] = @[]
  var outSequence: seq[int] = @[]
  for node in dkarate.nodes():
    inSequence.add(dkarate.inDegree(node))
    outSequence.add(dkarate.outDegree(node))
  check isDiGraphical(inSequence, outSequence) == true

test "check whether the degree sequence is valid":
  let karate = karateClubGraph()
  var sequence: seq[int] = @[]
  for node in karate.nodes():
    sequence.add(karate.degree(node))
  check isGraphical(sequence) == true

test "check whether the degree sequence is valid":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var inSequence: seq[int] = @[]
  var outSequence: seq[int] = @[]
  for node in dkarate.nodes():
    inSequence.add(dkarate.inDegree(node))
    outSequence.add(dkarate.outDegree(node))
  check isDiGraphical(inSequence, outSequence) == true

# -------------------------------------------------------------------
# Hierarchy
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Hybrid
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Isolates
# -------------------------------------------------------------------

test "isolated nodes in graph":
  let G = newGraph()
  G.addEdge(1, 2)
  G.addNode(3)
  check G.isolates() == @[3]
  check G.isIsolate(1) == false
  check G.isIsolate(3) == true
  check G.numberOfIsolates() == 1

test "isolated nodes in directed graph":
  let DG = newDiGraph()
  DG.addEdge(1, 2)
  DG.addNode(3)
  check DG.isolates() == @[3]
  check DG.isIsolate(1) == false
  check DG.isIsolate(3) == true
  check DG.numberOfIsolates() == 1

# -------------------------------------------------------------------
# Isomorphism
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Link Analysis
# -------------------------------------------------------------------

test "pagerank on graph":
  let karate = karateClubGraph()
  let got = karate.pagerank()
  let expected = {0: 0.09700181758983706, 1: 0.052878391037427, 2: 0.05707842304763673, 3: 0.035860643223064786, 4: 0.021979406974834498, 5: 0.02911334166344221, 6: 0.029113341663442205, 7: 0.02449075803950918, 8: 0.029765339186167028, 9: 0.014308950284462798, 10: 0.021979406974834494, 11: 0.009564916863537146, 12: 0.014645186487916188, 13: 0.02953631497720298, 14: 0.014535161524273824, 15: 0.014535161524273824, 16: 0.016785378110253487, 17: 0.01455885977424349, 18: 0.014535161524273824, 19: 0.01960441671193729, 20: 0.014535161524273824, 21: 0.01455885977424349, 22: 0.014535161524273824, 23: 0.03152091531163227, 24: 0.021075455001162945, 25: 0.02100562817474579, 26: 0.015043395360629753, 27: 0.025638803528350497, 28: 0.019572960509438537, 29: 0.026287262837112076, 30: 0.024589336534292478, 31: 0.037156635922679405, 32: 0.07169213006588289, 33: 0.1009179167487121}.toTable()
  for (node, pr) in got.pairs():
    check equal(pr, expected[node]) == true

test "pagerank on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = dkarate.pagerank()
  let expected = {0: 0.015060398201356053, 1: 0.01586047829183153, 2: 0.017545657516999914, 3: 0.019409903871309163, 4: 0.01586047829183153, 5: 0.01586047829183153, 6: 0.02709500645962076, 7: 0.02490945458306441, 8: 0.017724724646140777, 10: 0.02709500645962076, 11: 0.01586047829183153, 12: 0.021360029003586772, 13: 0.02490945458306441, 17: 0.017545657516999914, 19: 0.017545657516999914, 21: 0.017545657516999914, 31: 0.04592580168141822, 30: 0.021767615793904047, 9: 0.0169246445556653, 27: 0.023751994661056024, 28: 0.0169246445556653, 32: 0.09548948104425681, 16: 0.04258589015733158, 33: 0.2590491773753372, 14: 0.015060398201356053, 15: 0.015060398201356053, 18: 0.015060398201356053, 20: 0.015060398201356053, 22: 0.015060398201356053, 23: 0.015060398201356053, 25: 0.021887748306746776, 29: 0.024021295214681375, 24: 0.015060398201356053, 26: 0.015060398201356053}.toTable()
  for (node, pr) in got.pairs():
    check equal(pr, expected[node]) == true

test "hits on graph":
  let karate = karateClubGraph()
  let (hits, authorities) = karate.hits()
  let expectedHits = {0: 0.07141272880825199, 1: 0.05342723123552999, 2: 0.0637190645563748, 3: 0.042422737124708995, 4: 0.015260959706207484, 5: 0.015966913503059645, 6: 0.015966913503059645, 7: 0.03434316721905366, 8: 0.04568192511975031, 9: 0.020625667749388638, 10: 0.015260959706207484, 11: 0.010617891511071221, 12: 0.01692545079230686, 13: 0.04549486406805637, 14: 0.020370345825614276, 15: 0.020370345825614276, 16: 0.004748031847301573, 17: 0.018561637037432084, 18: 0.020370345825614276, 19: 0.0297133338864348, 20: 0.020370345825614276, 21: 0.018561637037432084, 22: 0.020370345825614276, 23: 0.030156497509356395, 24: 0.011460952230971704, 25: 0.011893664396281386, 26: 0.015182734330338383, 27: 0.026813494117104774, 28: 0.02633150577795389, 29: 0.02711153962821767, 30: 0.03510623797671439, 31: 0.038375741862956045, 32: 0.062001846473830974, 33: 0.07500294215657552}.toTable()
  let expectedAuthorities = {0: 0.07141272880825196, 1: 0.05342723123553, 2: 0.06371906455637479, 3: 0.042422737124708995, 4: 0.015260959706207484, 5: 0.015966913503059642, 6: 0.015966913503059642, 7: 0.03434316721905365, 8: 0.04568192511975032, 9: 0.020625667749388645, 10: 0.015260959706207484, 11: 0.010617891511071223, 12: 0.016925450792306864, 13: 0.045494864068056376, 14: 0.020370345825614276, 15: 0.020370345825614276, 16: 0.004748031847301572, 17: 0.018561637037432084, 18: 0.020370345825614276, 19: 0.029713333886434806, 20: 0.020370345825614276, 21: 0.018561637037432084, 22: 0.020370345825614276, 23: 0.030156497509356398, 24: 0.011460952230971702, 25: 0.011893664396281383, 26: 0.015182734330338388, 27: 0.026813494117104777, 28: 0.026331505777953897, 29: 0.027111539628217676, 30: 0.035106237976714395, 31: 0.03837574186295605, 32: 0.06200184647383097, 33: 0.07500294215657548}.toTable()
  for (node, val) in hits.pairs():
    check equal(val, expectedHits[node]) == true
  for (node, val) in authorities.pairs():
    check equal(val, expectedAuthorities[node]) == true

test "hits on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let (hits, authorities) = dkarate.hits()
  let expectedHits = {0: 0.0690024964530678, 1: 0.04270746168161383, 2: 0.06066068428226402, 3: 0.018161030730123744, 4: 0.006360305083838001, 5: 0.006627747568539875, 6: 0.0002674424847018737, 7: 0.0, 8: 0.05810056393568192, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.03018393372431276, 17: 0.0, 19: 0.03018393372431276, 21: 0.0, 31: 0.05419054134880567, 30: 0.05419054134880567, 9: 0.03018393372431276, 27: 0.03018393372431276, 28: 0.03491311863867803, 32: 0.03018393372431276, 16: 0.0, 33: 0.0, 14: 0.05419054134880567, 15: 0.05419054134880567, 18: 0.05419054134880567, 20: 0.05419054134880567, 22: 0.05419054134880567, 23: 0.06665169376262196, 25: 0.004729184914365265, 29: 0.05419054134880567, 24: 0.013282831715610934, 26: 0.03409143933688338}.toTable()
  let expectedAuthorities = {0: 0.0, 1: 0.018516928401885582, 2: 0.029977542884472998, 3: 0.046255932876174966, 4: 0.018516928401885582, 5: 0.018516928401885582, 6: 0.022002292749646202, 7: 0.051129474023528555, 8: 0.03479531839358755, 10: 0.022002292749646202, 11: 0.018516928401885582, 12: 0.02339046954923916, 13: 0.051129474023528555, 17: 0.029977542884472998, 19: 0.029977542884472998, 21: 0.029977542884472998, 31: 0.03271947165474219, 30: 0.02705199215452333, 9: 0.016278389991701964, 27: 0.03772894556871447, 28: 0.016278389991701964, 32: 0.1660927901783131, 16: 0.0018503350907037332, 33: 0.20883141213644443, 14: 0.0, 15: 0.0, 18: 0.0, 20: 0.0, 22: 0.0, 23: 0.0, 25: 0.0214505555770125, 29: 0.027034578145356866, 24: 0.0, 26: 0.0}.toTable()
  for (node, val) in hits.pairs():
    check equal(val, expectedHits[node]) == true
  for (node, val) in authorities.pairs():
    check equal(val, expectedAuthorities[node]) == true

# -------------------------------------------------------------------
# Link Prediction
# -------------------------------------------------------------------

test "resource allocation index":
  let karate = karateClubGraph()
  let got = resourceAllocationIndex(karate)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 0.1),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 0.5),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 0.16666666666666666),
    ((0, 25), 0.16666666666666666),
    ((0, 26), 0.0),
    ((0, 27), 0.1),
    ((0, 28), 0.26666666666666666),
    ((0, 29), 0.0),
    ((0, 30), 0.3111111111111111),
    ((0, 32), 0.4666666666666667),
    ((0, 33), 0.9),
    ((1, 4), 0.0625),
    ((1, 5), 0.0625),
    ((1, 6), 0.0625),
    ((1, 8), 0.4125),
    ((1, 9), 0.1),
    ((1, 10), 0.0625),
    ((1, 11), 0.0625),
    ((1, 12), 0.22916666666666666),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 0.1),
    ((1, 28), 0.1),
    ((1, 29), 0.0),
    ((1, 31), 0.0625),
    ((1, 32), 0.35),
    ((1, 33), 0.7833333333333333),
    ((2, 4), 0.0625),
    ((2, 5), 0.0625),
    ((2, 6), 0.0625),
    ((2, 10), 0.0625),
    ((2, 11), 0.0625),
    ((2, 12), 0.22916666666666666),
    ((2, 14), 0.08333333333333333),
    ((2, 15), 0.08333333333333333),
    ((2, 16), 0.0),
    ((2, 17), 0.1736111111111111),
    ((2, 18), 0.08333333333333333),
    ((2, 19), 0.1736111111111111),
    ((2, 20), 0.08333333333333333),
    ((2, 21), 0.1736111111111111),
    ((2, 22), 0.08333333333333333),
    ((2, 23), 0.3333333333333333),
    ((2, 24), 0.25),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 0.08333333333333333),
    ((2, 30), 0.39444444444444443),
    ((2, 31), 0.47916666666666663),
    ((2, 33), 1.5666666666666664),
    ((3, 4), 0.0625),
    ((3, 5), 0.0625),
    ((3, 6), 0.0625),
    ((3, 8), 0.1625),
    ((3, 9), 0.1),
    ((3, 10), 0.0625),
    ((3, 11), 0.0625),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 0.1736111111111111),
    ((3, 18), 0.0),
    ((3, 19), 0.1736111111111111),
    ((3, 20), 0.0),
    ((3, 21), 0.1736111111111111),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 0.1),
    ((3, 28), 0.1),
    ((3, 29), 0.0),
    ((3, 30), 0.1111111111111111),
    ((3, 31), 0.0625),
    ((3, 32), 0.1),
    ((3, 33), 0.2),
    ((4, 5), 0.6458333333333333),
    ((4, 7), 0.0625),
    ((4, 8), 0.0625),
    ((4, 9), 0.0),
    ((4, 11), 0.0625),
    ((4, 12), 0.0625),
    ((4, 13), 0.0625),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 0.25),
    ((4, 17), 0.0625),
    ((4, 18), 0.0),
    ((4, 19), 0.0625),
    ((4, 20), 0.0),
    ((4, 21), 0.0625),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 0.0625),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 0.0625),
    ((5, 8), 0.0625),
    ((5, 9), 0.0),
    ((5, 11), 0.0625),
    ((5, 12), 0.0625),
    ((5, 13), 0.0625),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 0.0625),
    ((5, 18), 0.0),
    ((5, 19), 0.0625),
    ((5, 20), 0.0),
    ((5, 21), 0.0625),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 0.0625),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 0.0625),
    ((6, 8), 0.0625),
    ((6, 9), 0.0),
    ((6, 10), 0.6458333333333333),
    ((6, 11), 0.0625),
    ((6, 12), 0.0625),
    ((6, 13), 0.0625),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 0.0625),
    ((6, 18), 0.0),
    ((6, 19), 0.0625),
    ((6, 20), 0.0),
    ((6, 21), 0.0625),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 0.0625),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 0.1625),
    ((7, 9), 0.1),
    ((7, 10), 0.0625),
    ((7, 11), 0.0625),
    ((7, 12), 0.22916666666666666),
    ((7, 13), 0.44027777777777777),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 0.1736111111111111),
    ((7, 18), 0.0),
    ((7, 19), 0.1736111111111111),
    ((7, 20), 0.0),
    ((7, 21), 0.1736111111111111),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 0.1),
    ((7, 28), 0.1),
    ((7, 29), 0.0),
    ((7, 30), 0.1111111111111111),
    ((7, 31), 0.0625),
    ((7, 32), 0.1),
    ((7, 33), 0.0),
    ((8, 9), 0.1588235294117647),
    ((8, 10), 0.0625),
    ((8, 11), 0.0625),
    ((8, 12), 0.0625),
    ((8, 13), 0.2213235294117647),
    ((8, 14), 0.14215686274509803),
    ((8, 15), 0.14215686274509803),
    ((8, 16), 0.0),
    ((8, 17), 0.0625),
    ((8, 18), 0.14215686274509803),
    ((8, 19), 0.1213235294117647),
    ((8, 20), 0.14215686274509803),
    ((8, 21), 0.0625),
    ((8, 22), 0.14215686274509803),
    ((8, 23), 0.14215686274509803),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 0.058823529411764705),
    ((8, 27), 0.1588235294117647),
    ((8, 28), 0.1588235294117647),
    ((8, 29), 0.14215686274509803),
    ((8, 31), 0.20465686274509803),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 0.1588235294117647),
    ((9, 14), 0.058823529411764705),
    ((9, 15), 0.058823529411764705),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 0.058823529411764705),
    ((9, 19), 0.058823529411764705),
    ((9, 20), 0.058823529411764705),
    ((9, 21), 0.0),
    ((9, 22), 0.058823529411764705),
    ((9, 23), 0.058823529411764705),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 0.058823529411764705),
    ((9, 27), 0.1588235294117647),
    ((9, 28), 0.1588235294117647),
    ((9, 29), 0.058823529411764705),
    ((9, 30), 0.058823529411764705),
    ((9, 31), 0.058823529411764705),
    ((9, 32), 0.1588235294117647),
    ((10, 11), 0.0625),
    ((10, 12), 0.0625),
    ((10, 13), 0.0625),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 0.25),
    ((10, 17), 0.0625),
    ((10, 18), 0.0),
    ((10, 19), 0.0625),
    ((10, 20), 0.0),
    ((10, 21), 0.0625),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 0.0625),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 0.0625),
    ((11, 13), 0.0625),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 0.0625),
    ((11, 18), 0.0),
    ((11, 19), 0.0625),
    ((11, 20), 0.0),
    ((11, 21), 0.0625),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 0.0625),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 0.22916666666666666),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 0.0625),
    ((12, 18), 0.0),
    ((12, 19), 0.0625),
    ((12, 20), 0.0),
    ((12, 21), 0.0625),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 0.0625),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 0.058823529411764705),
    ((13, 15), 0.058823529411764705),
    ((13, 16), 0.0),
    ((13, 17), 0.1736111111111111),
    ((13, 18), 0.058823529411764705),
    ((13, 19), 0.23243464052287582),
    ((13, 20), 0.058823529411764705),
    ((13, 21), 0.1736111111111111),
    ((13, 22), 0.058823529411764705),
    ((13, 23), 0.058823529411764705),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 0.058823529411764705),
    ((13, 27), 0.1588235294117647),
    ((13, 28), 0.1588235294117647),
    ((13, 29), 0.058823529411764705),
    ((13, 30), 0.16993464052287582),
    ((13, 31), 0.1213235294117647),
    ((13, 32), 0.1588235294117647),
    ((14, 15), 0.14215686274509803),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 0.14215686274509803),
    ((14, 19), 0.058823529411764705),
    ((14, 20), 0.14215686274509803),
    ((14, 21), 0.0),
    ((14, 22), 0.14215686274509803),
    ((14, 23), 0.14215686274509803),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 0.058823529411764705),
    ((14, 27), 0.058823529411764705),
    ((14, 28), 0.058823529411764705),
    ((14, 29), 0.14215686274509803),
    ((14, 30), 0.14215686274509803),
    ((14, 31), 0.14215686274509803),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 0.14215686274509803),
    ((15, 19), 0.058823529411764705),
    ((15, 20), 0.14215686274509803),
    ((15, 21), 0.0),
    ((15, 22), 0.14215686274509803),
    ((15, 23), 0.14215686274509803),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 0.058823529411764705),
    ((15, 27), 0.058823529411764705),
    ((15, 28), 0.058823529411764705),
    ((15, 29), 0.14215686274509803),
    ((15, 30), 0.14215686274509803),
    ((15, 31), 0.14215686274509803),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 0.1736111111111111),
    ((17, 20), 0.0),
    ((17, 21), 0.1736111111111111),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 0.1111111111111111),
    ((17, 31), 0.0625),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 0.058823529411764705),
    ((18, 20), 0.14215686274509803),
    ((18, 21), 0.0),
    ((18, 22), 0.14215686274509803),
    ((18, 23), 0.14215686274509803),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 0.058823529411764705),
    ((18, 27), 0.058823529411764705),
    ((18, 28), 0.058823529411764705),
    ((18, 29), 0.14215686274509803),
    ((18, 30), 0.14215686274509803),
    ((18, 31), 0.14215686274509803),
    ((19, 20), 0.058823529411764705),
    ((19, 21), 0.1736111111111111),
    ((19, 22), 0.058823529411764705),
    ((19, 23), 0.058823529411764705),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 0.058823529411764705),
    ((19, 27), 0.058823529411764705),
    ((19, 28), 0.058823529411764705),
    ((19, 29), 0.058823529411764705),
    ((19, 30), 0.16993464052287582),
    ((19, 31), 0.1213235294117647),
    ((19, 32), 0.058823529411764705),
    ((20, 21), 0.0),
    ((20, 22), 0.14215686274509803),
    ((20, 23), 0.14215686274509803),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 0.058823529411764705),
    ((20, 27), 0.058823529411764705),
    ((20, 28), 0.058823529411764705),
    ((20, 29), 0.14215686274509803),
    ((20, 30), 0.14215686274509803),
    ((20, 31), 0.14215686274509803),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 0.1111111111111111),
    ((21, 31), 0.0625),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 0.14215686274509803),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 0.058823529411764705),
    ((22, 27), 0.058823529411764705),
    ((22, 28), 0.058823529411764705),
    ((22, 29), 0.14215686274509803),
    ((22, 30), 0.14215686274509803),
    ((22, 31), 0.14215686274509803),
    ((23, 24), 0.5833333333333333),
    ((23, 26), 0.3088235294117647),
    ((23, 28), 0.058823529411764705),
    ((23, 30), 0.14215686274509803),
    ((23, 31), 0.47549019607843135),
    ((24, 26), 0.0),
    ((24, 28), 0.16666666666666666),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 0.16666666666666666),
    ((24, 33), 0.41666666666666663),
    ((25, 26), 0.0),
    ((25, 27), 0.5333333333333333),
    ((25, 28), 0.16666666666666666),
    ((25, 29), 0.2),
    ((25, 30), 0.0),
    ((25, 32), 0.3666666666666667),
    ((25, 33), 0.3666666666666667),
    ((26, 27), 0.058823529411764705),
    ((26, 28), 0.058823529411764705),
    ((26, 30), 0.058823529411764705),
    ((26, 31), 0.058823529411764705),
    ((26, 32), 0.3088235294117647),
    ((27, 28), 0.1588235294117647),
    ((27, 29), 0.25882352941176473),
    ((27, 30), 0.058823529411764705),
    ((27, 31), 0.39215686274509803),
    ((27, 32), 0.35882352941176476),
    ((28, 29), 0.058823529411764705),
    ((28, 30), 0.058823529411764705),
    ((28, 32), 0.3254901960784314),
    ((29, 30), 0.14215686274509803),
    ((29, 31), 0.14215686274509803),
    ((30, 31), 0.14215686274509803)
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "jaccard coefficient":
  let karate = karateClubGraph()
  let got = jaccardCoefficient(karate)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 0.058823529411764705),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 0.125),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 0.05555555555555555),
    ((0, 25), 0.05555555555555555),
    ((0, 26), 0.0),
    ((0, 27), 0.05263157894736842),
    ((0, 28), 0.11764705882352941),
    ((0, 29), 0.0),
    ((0, 30), 0.1111111111111111),
    ((0, 32), 0.12),
    ((0, 33), 0.13793103448275862),
    ((1, 4), 0.09090909090909091),
    ((1, 5), 0.08333333333333333),
    ((1, 6), 0.08333333333333333),
    ((1, 8), 0.2727272727272727),
    ((1, 9), 0.1),
    ((1, 10), 0.09090909090909091),
    ((1, 11), 0.1111111111111111),
    ((1, 12), 0.2222222222222222),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 0.08333333333333333),
    ((1, 28), 0.09090909090909091),
    ((1, 29), 0.0),
    ((1, 31), 0.07142857142857142),
    ((1, 32), 0.10526315789473684),
    ((1, 33), 0.13043478260869565),
    ((2, 4), 0.08333333333333333),
    ((2, 5), 0.07692307692307693),
    ((2, 6), 0.07692307692307693),
    ((2, 10), 0.08333333333333333),
    ((2, 11), 0.1),
    ((2, 12), 0.2),
    ((2, 14), 0.09090909090909091),
    ((2, 15), 0.09090909090909091),
    ((2, 16), 0.0),
    ((2, 17), 0.2),
    ((2, 18), 0.09090909090909091),
    ((2, 19), 0.18181818181818182),
    ((2, 20), 0.09090909090909091),
    ((2, 21), 0.2),
    ((2, 22), 0.09090909090909091),
    ((2, 23), 0.15384615384615385),
    ((2, 24), 0.08333333333333333),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 0.07692307692307693),
    ((2, 30), 0.2727272727272727),
    ((2, 31), 0.23076923076923078),
    ((2, 33), 0.2857142857142857),
    ((3, 4), 0.125),
    ((3, 5), 0.1111111111111111),
    ((3, 6), 0.1111111111111111),
    ((3, 8), 0.2222222222222222),
    ((3, 9), 0.14285714285714285),
    ((3, 10), 0.125),
    ((3, 11), 0.16666666666666666),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 0.3333333333333333),
    ((3, 18), 0.0),
    ((3, 19), 0.2857142857142857),
    ((3, 20), 0.0),
    ((3, 21), 0.3333333333333333),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 0.1111111111111111),
    ((3, 28), 0.125),
    ((3, 29), 0.0),
    ((3, 30), 0.1111111111111111),
    ((3, 31), 0.09090909090909091),
    ((3, 32), 0.058823529411764705),
    ((3, 33), 0.045454545454545456),
    ((4, 5), 0.75),
    ((4, 7), 0.16666666666666666),
    ((4, 8), 0.14285714285714285),
    ((4, 9), 0.0),
    ((4, 11), 0.3333333333333333),
    ((4, 12), 0.25),
    ((4, 13), 0.14285714285714285),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 0.25),
    ((4, 17), 0.25),
    ((4, 18), 0.0),
    ((4, 19), 0.2),
    ((4, 20), 0.0),
    ((4, 21), 0.25),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 0.125),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 0.14285714285714285),
    ((5, 8), 0.125),
    ((5, 9), 0.0),
    ((5, 11), 0.25),
    ((5, 12), 0.2),
    ((5, 13), 0.125),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 0.2),
    ((5, 18), 0.0),
    ((5, 19), 0.16666666666666666),
    ((5, 20), 0.0),
    ((5, 21), 0.2),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 0.1111111111111111),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 0.14285714285714285),
    ((6, 8), 0.125),
    ((6, 9), 0.0),
    ((6, 10), 0.75),
    ((6, 11), 0.25),
    ((6, 12), 0.2),
    ((6, 13), 0.125),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 0.2),
    ((6, 18), 0.0),
    ((6, 19), 0.16666666666666666),
    ((6, 20), 0.0),
    ((6, 21), 0.2),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 0.1111111111111111),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 0.2857142857142857),
    ((7, 9), 0.2),
    ((7, 10), 0.16666666666666666),
    ((7, 11), 0.25),
    ((7, 12), 0.5),
    ((7, 13), 0.8),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 0.5),
    ((7, 18), 0.0),
    ((7, 19), 0.4),
    ((7, 20), 0.0),
    ((7, 21), 0.5),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 0.14285714285714285),
    ((7, 28), 0.16666666666666666),
    ((7, 29), 0.0),
    ((7, 30), 0.14285714285714285),
    ((7, 31), 0.1111111111111111),
    ((7, 32), 0.06666666666666667),
    ((7, 33), 0.0),
    ((8, 9), 0.4),
    ((8, 10), 0.14285714285714285),
    ((8, 11), 0.2),
    ((8, 12), 0.16666666666666666),
    ((8, 13), 0.42857142857142855),
    ((8, 14), 0.4),
    ((8, 15), 0.4),
    ((8, 16), 0.0),
    ((8, 17), 0.16666666666666666),
    ((8, 18), 0.4),
    ((8, 19), 0.3333333333333333),
    ((8, 20), 0.4),
    ((8, 21), 0.16666666666666666),
    ((8, 22), 0.4),
    ((8, 23), 0.25),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 0.16666666666666666),
    ((8, 27), 0.2857142857142857),
    ((8, 28), 0.3333333333333333),
    ((8, 29), 0.2857142857142857),
    ((8, 31), 0.375),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 0.4),
    ((9, 14), 0.3333333333333333),
    ((9, 15), 0.3333333333333333),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 0.3333333333333333),
    ((9, 19), 0.25),
    ((9, 20), 0.3333333333333333),
    ((9, 21), 0.0),
    ((9, 22), 0.3333333333333333),
    ((9, 23), 0.16666666666666666),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 0.3333333333333333),
    ((9, 27), 0.5),
    ((9, 28), 0.6666666666666666),
    ((9, 29), 0.2),
    ((9, 30), 0.2),
    ((9, 31), 0.14285714285714285),
    ((9, 32), 0.16666666666666666),
    ((10, 11), 0.3333333333333333),
    ((10, 12), 0.25),
    ((10, 13), 0.14285714285714285),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 0.25),
    ((10, 17), 0.25),
    ((10, 18), 0.0),
    ((10, 19), 0.2),
    ((10, 20), 0.0),
    ((10, 21), 0.25),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 0.125),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 0.5),
    ((11, 13), 0.2),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 0.5),
    ((11, 18), 0.0),
    ((11, 19), 0.3333333333333333),
    ((11, 20), 0.0),
    ((11, 21), 0.5),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 0.16666666666666666),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 0.4),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 0.3333333333333333),
    ((12, 18), 0.0),
    ((12, 19), 0.25),
    ((12, 20), 0.0),
    ((12, 21), 0.3333333333333333),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 0.14285714285714285),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 0.16666666666666666),
    ((13, 15), 0.16666666666666666),
    ((13, 16), 0.0),
    ((13, 17), 0.4),
    ((13, 18), 0.16666666666666666),
    ((13, 19), 0.6),
    ((13, 20), 0.16666666666666666),
    ((13, 21), 0.4),
    ((13, 22), 0.16666666666666666),
    ((13, 23), 0.1111111111111111),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 0.16666666666666666),
    ((13, 27), 0.2857142857142857),
    ((13, 28), 0.3333333333333333),
    ((13, 29), 0.125),
    ((13, 30), 0.2857142857142857),
    ((13, 31), 0.2222222222222222),
    ((13, 32), 0.13333333333333333),
    ((14, 15), 1.0),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 1.0),
    ((14, 19), 0.25),
    ((14, 20), 1.0),
    ((14, 21), 0.0),
    ((14, 22), 1.0),
    ((14, 23), 0.4),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 0.3333333333333333),
    ((14, 27), 0.2),
    ((14, 28), 0.25),
    ((14, 29), 0.5),
    ((14, 30), 0.5),
    ((14, 31), 0.3333333333333333),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 1.0),
    ((15, 19), 0.25),
    ((15, 20), 1.0),
    ((15, 21), 0.0),
    ((15, 22), 1.0),
    ((15, 23), 0.4),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 0.3333333333333333),
    ((15, 27), 0.2),
    ((15, 28), 0.25),
    ((15, 29), 0.5),
    ((15, 30), 0.5),
    ((15, 31), 0.3333333333333333),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 0.6666666666666666),
    ((17, 20), 0.0),
    ((17, 21), 1.0),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 0.2),
    ((17, 31), 0.14285714285714285),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 0.25),
    ((18, 20), 1.0),
    ((18, 21), 0.0),
    ((18, 22), 1.0),
    ((18, 23), 0.4),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 0.3333333333333333),
    ((18, 27), 0.2),
    ((18, 28), 0.25),
    ((18, 29), 0.5),
    ((18, 30), 0.5),
    ((18, 31), 0.3333333333333333),
    ((19, 20), 0.25),
    ((19, 21), 0.6666666666666666),
    ((19, 22), 0.25),
    ((19, 23), 0.14285714285714285),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 0.25),
    ((19, 27), 0.16666666666666666),
    ((19, 28), 0.2),
    ((19, 29), 0.16666666666666666),
    ((19, 30), 0.4),
    ((19, 31), 0.2857142857142857),
    ((19, 32), 0.07142857142857142),
    ((20, 21), 0.0),
    ((20, 22), 1.0),
    ((20, 23), 0.4),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 0.3333333333333333),
    ((20, 27), 0.2),
    ((20, 28), 0.25),
    ((20, 29), 0.5),
    ((20, 30), 0.5),
    ((20, 31), 0.3333333333333333),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 0.2),
    ((21, 31), 0.14285714285714285),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 0.4),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 0.3333333333333333),
    ((22, 27), 0.2),
    ((22, 28), 0.25),
    ((22, 29), 0.5),
    ((22, 30), 0.5),
    ((22, 31), 0.3333333333333333),
    ((23, 24), 0.3333333333333333),
    ((23, 26), 0.4),
    ((23, 28), 0.14285714285714285),
    ((23, 30), 0.2857142857142857),
    ((23, 31), 0.375),
    ((24, 26), 0.0),
    ((24, 28), 0.2),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 0.07142857142857142),
    ((24, 33), 0.1111111111111111),
    ((25, 26), 0.0),
    ((25, 27), 0.4),
    ((25, 28), 0.2),
    ((25, 29), 0.16666666666666666),
    ((25, 30), 0.0),
    ((25, 32), 0.15384615384615385),
    ((25, 33), 0.1111111111111111),
    ((26, 27), 0.2),
    ((26, 28), 0.25),
    ((26, 30), 0.2),
    ((26, 31), 0.14285714285714285),
    ((26, 32), 0.16666666666666666),
    ((27, 28), 0.4),
    ((27, 29), 0.3333333333333333),
    ((27, 30), 0.14285714285714285),
    ((27, 31), 0.25),
    ((27, 32), 0.23076923076923078),
    ((28, 29), 0.16666666666666666),
    ((28, 30), 0.16666666666666666),
    ((28, 32), 0.25),
    ((29, 30), 0.3333333333333333),
    ((29, 31), 0.25),
    ((30, 31), 0.25)
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "adamic adar index":
  let karate = karateClubGraph()
  let got = adamicAdarIndex(karate)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 0.43429448190325176),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 1.4426950408889634),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 0.5581106265512472),
    ((0, 25), 0.5581106265512472),
    ((0, 26), 0.0),
    ((0, 27), 0.43429448190325176),
    ((0, 28), 0.9924051084544989),
    ((0, 29), 0.0),
    ((0, 30), 1.0764545478730305),
    ((0, 32), 1.613740043014111),
    ((0, 33), 2.7110197222973085),
    ((1, 4), 0.36067376022224085),
    ((1, 5), 0.36067376022224085),
    ((1, 6), 0.36067376022224085),
    ((1, 8), 1.5163157625699744),
    ((1, 9), 0.43429448190325176),
    ((1, 10), 0.36067376022224085),
    ((1, 11), 0.36067376022224085),
    ((1, 12), 0.9187843867734881),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 0.43429448190325176),
    ((1, 28), 0.43429448190325176),
    ((1, 29), 0.0),
    ((1, 31), 0.36067376022224085),
    ((1, 32), 1.1556420023477334),
    ((1, 33), 2.252921681630931),
    ((2, 4), 0.36067376022224085),
    ((2, 5), 0.36067376022224085),
    ((2, 6), 0.36067376022224085),
    ((2, 10), 0.36067376022224085),
    ((2, 11), 0.36067376022224085),
    ((2, 12), 0.9187843867734881),
    ((2, 14), 0.40242960438184466),
    ((2, 15), 0.40242960438184466),
    ((2, 16), 0.0),
    ((2, 17), 0.8157933735356595),
    ((2, 18), 0.40242960438184466),
    ((2, 19), 0.8157933735356595),
    ((2, 20), 0.40242960438184466),
    ((2, 21), 0.8157933735356595),
    ((2, 22), 0.40242960438184466),
    ((2, 23), 1.1237771248263264),
    ((2, 24), 0.7213475204444817),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 0.40242960438184466),
    ((2, 30), 1.4788841522548752),
    ((2, 31), 1.6733425912309228),
    ((2, 33), 4.719381261461351),
    ((3, 4), 0.36067376022224085),
    ((3, 5), 0.36067376022224085),
    ((3, 6), 0.36067376022224085),
    ((3, 8), 0.7949682421254927),
    ((3, 9), 0.43429448190325176),
    ((3, 10), 0.36067376022224085),
    ((3, 11), 0.36067376022224085),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 0.8157933735356595),
    ((3, 18), 0.0),
    ((3, 19), 0.8157933735356595),
    ((3, 20), 0.0),
    ((3, 21), 0.8157933735356595),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 0.43429448190325176),
    ((3, 28), 0.43429448190325176),
    ((3, 29), 0.0),
    ((3, 30), 0.45511961331341866),
    ((3, 31), 0.36067376022224085),
    ((3, 32), 0.43429448190325176),
    ((3, 33), 0.6213349345596119),
    ((4, 5), 1.9922605072935597),
    ((4, 7), 0.36067376022224085),
    ((4, 8), 0.36067376022224085),
    ((4, 9), 0.0),
    ((4, 11), 0.36067376022224085),
    ((4, 12), 0.36067376022224085),
    ((4, 13), 0.36067376022224085),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 0.7213475204444817),
    ((4, 17), 0.36067376022224085),
    ((4, 18), 0.0),
    ((4, 19), 0.36067376022224085),
    ((4, 20), 0.0),
    ((4, 21), 0.36067376022224085),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 0.36067376022224085),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 0.36067376022224085),
    ((5, 8), 0.36067376022224085),
    ((5, 9), 0.0),
    ((5, 11), 0.36067376022224085),
    ((5, 12), 0.36067376022224085),
    ((5, 13), 0.36067376022224085),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 0.36067376022224085),
    ((5, 18), 0.0),
    ((5, 19), 0.36067376022224085),
    ((5, 20), 0.0),
    ((5, 21), 0.36067376022224085),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 0.36067376022224085),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 0.36067376022224085),
    ((6, 8), 0.36067376022224085),
    ((6, 9), 0.0),
    ((6, 10), 1.9922605072935597),
    ((6, 11), 0.36067376022224085),
    ((6, 12), 0.36067376022224085),
    ((6, 13), 0.36067376022224085),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 0.36067376022224085),
    ((6, 18), 0.0),
    ((6, 19), 0.36067376022224085),
    ((6, 20), 0.0),
    ((6, 21), 0.36067376022224085),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 0.36067376022224085),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 0.7949682421254927),
    ((7, 9), 0.43429448190325176),
    ((7, 10), 0.36067376022224085),
    ((7, 11), 0.36067376022224085),
    ((7, 12), 0.9187843867734881),
    ((7, 13), 1.8081984819901584),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 0.8157933735356595),
    ((7, 18), 0.0),
    ((7, 19), 0.8157933735356595),
    ((7, 20), 0.0),
    ((7, 21), 0.8157933735356595),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 0.43429448190325176),
    ((7, 28), 0.43429448190325176),
    ((7, 29), 0.0),
    ((7, 30), 0.45511961331341866),
    ((7, 31), 0.36067376022224085),
    ((7, 32), 0.43429448190325176),
    ((7, 33), 0.0),
    ((8, 9), 0.7872506057680129),
    ((8, 10), 0.36067376022224085),
    ((8, 11), 0.36067376022224085),
    ((8, 12), 0.36067376022224085),
    ((8, 13), 1.1479243659902538),
    ((8, 14), 0.7553857282466059),
    ((8, 15), 0.7553857282466059),
    ((8, 16), 0.0),
    ((8, 17), 0.36067376022224085),
    ((8, 18), 0.7553857282466059),
    ((8, 19), 0.713629884087002),
    ((8, 20), 0.7553857282466059),
    ((8, 21), 0.36067376022224085),
    ((8, 22), 0.7553857282466059),
    ((8, 23), 0.7553857282466059),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 0.35295612386476116),
    ((8, 27), 0.7872506057680129),
    ((8, 28), 0.7872506057680129),
    ((8, 29), 0.7553857282466059),
    ((8, 31), 1.1160594884688466),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 0.7872506057680129),
    ((9, 14), 0.35295612386476116),
    ((9, 15), 0.35295612386476116),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 0.35295612386476116),
    ((9, 19), 0.35295612386476116),
    ((9, 20), 0.35295612386476116),
    ((9, 21), 0.0),
    ((9, 22), 0.35295612386476116),
    ((9, 23), 0.35295612386476116),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 0.35295612386476116),
    ((9, 27), 0.7872506057680129),
    ((9, 28), 0.7872506057680129),
    ((9, 29), 0.35295612386476116),
    ((9, 30), 0.35295612386476116),
    ((9, 31), 0.35295612386476116),
    ((9, 32), 0.7872506057680129),
    ((10, 11), 0.36067376022224085),
    ((10, 12), 0.36067376022224085),
    ((10, 13), 0.36067376022224085),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 0.7213475204444817),
    ((10, 17), 0.36067376022224085),
    ((10, 18), 0.0),
    ((10, 19), 0.36067376022224085),
    ((10, 20), 0.0),
    ((10, 21), 0.36067376022224085),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 0.36067376022224085),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 0.36067376022224085),
    ((11, 13), 0.36067376022224085),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 0.36067376022224085),
    ((11, 18), 0.0),
    ((11, 19), 0.36067376022224085),
    ((11, 20), 0.0),
    ((11, 21), 0.36067376022224085),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 0.36067376022224085),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 0.9187843867734881),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 0.36067376022224085),
    ((12, 18), 0.0),
    ((12, 19), 0.36067376022224085),
    ((12, 20), 0.0),
    ((12, 21), 0.36067376022224085),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 0.36067376022224085),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 0.35295612386476116),
    ((13, 15), 0.35295612386476116),
    ((13, 16), 0.0),
    ((13, 17), 0.8157933735356595),
    ((13, 18), 0.35295612386476116),
    ((13, 19), 1.1687494974004207),
    ((13, 20), 0.35295612386476116),
    ((13, 21), 0.8157933735356595),
    ((13, 22), 0.35295612386476116),
    ((13, 23), 0.35295612386476116),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 0.35295612386476116),
    ((13, 27), 0.7872506057680129),
    ((13, 28), 0.7872506057680129),
    ((13, 29), 0.35295612386476116),
    ((13, 30), 0.8080757371781798),
    ((13, 31), 0.713629884087002),
    ((13, 32), 0.7872506057680129),
    ((14, 15), 0.7553857282466059),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 0.7553857282466059),
    ((14, 19), 0.35295612386476116),
    ((14, 20), 0.7553857282466059),
    ((14, 21), 0.0),
    ((14, 22), 0.7553857282466059),
    ((14, 23), 0.7553857282466059),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 0.35295612386476116),
    ((14, 27), 0.35295612386476116),
    ((14, 28), 0.35295612386476116),
    ((14, 29), 0.7553857282466059),
    ((14, 30), 0.7553857282466059),
    ((14, 31), 0.7553857282466059),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 0.7553857282466059),
    ((15, 19), 0.35295612386476116),
    ((15, 20), 0.7553857282466059),
    ((15, 21), 0.0),
    ((15, 22), 0.7553857282466059),
    ((15, 23), 0.7553857282466059),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 0.35295612386476116),
    ((15, 27), 0.35295612386476116),
    ((15, 28), 0.35295612386476116),
    ((15, 29), 0.7553857282466059),
    ((15, 30), 0.7553857282466059),
    ((15, 31), 0.7553857282466059),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 0.8157933735356595),
    ((17, 20), 0.0),
    ((17, 21), 0.8157933735356595),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 0.45511961331341866),
    ((17, 31), 0.36067376022224085),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 0.35295612386476116),
    ((18, 20), 0.7553857282466059),
    ((18, 21), 0.0),
    ((18, 22), 0.7553857282466059),
    ((18, 23), 0.7553857282466059),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 0.35295612386476116),
    ((18, 27), 0.35295612386476116),
    ((18, 28), 0.35295612386476116),
    ((18, 29), 0.7553857282466059),
    ((18, 30), 0.7553857282466059),
    ((18, 31), 0.7553857282466059),
    ((19, 20), 0.35295612386476116),
    ((19, 21), 0.8157933735356595),
    ((19, 22), 0.35295612386476116),
    ((19, 23), 0.35295612386476116),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 0.35295612386476116),
    ((19, 27), 0.35295612386476116),
    ((19, 28), 0.35295612386476116),
    ((19, 29), 0.35295612386476116),
    ((19, 30), 0.8080757371781798),
    ((19, 31), 0.713629884087002),
    ((19, 32), 0.35295612386476116),
    ((20, 21), 0.0),
    ((20, 22), 0.7553857282466059),
    ((20, 23), 0.7553857282466059),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 0.35295612386476116),
    ((20, 27), 0.35295612386476116),
    ((20, 28), 0.35295612386476116),
    ((20, 29), 0.7553857282466059),
    ((20, 30), 0.7553857282466059),
    ((20, 31), 0.7553857282466059),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 0.45511961331341866),
    ((21, 31), 0.36067376022224085),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 0.7553857282466059),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 0.35295612386476116),
    ((22, 27), 0.35295612386476116),
    ((22, 28), 0.35295612386476116),
    ((22, 29), 0.7553857282466059),
    ((22, 30), 0.7553857282466059),
    ((22, 31), 0.7553857282466059),
    ((23, 24), 1.631586747071319),
    ((23, 26), 1.0743036443092429),
    ((23, 28), 0.35295612386476116),
    ((23, 30), 0.7553857282466059),
    ((23, 31), 1.6656249548734432),
    ((24, 26), 0.0),
    ((24, 28), 0.5581106265512472),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 0.5581106265512472),
    ((24, 33), 1.279458146995729),
    ((25, 26), 0.0),
    ((25, 27), 1.531574161186449),
    ((25, 28), 0.5581106265512472),
    ((25, 29), 0.6213349345596119),
    ((25, 30), 0.0),
    ((25, 32), 1.179445561110859),
    ((25, 33), 1.179445561110859),
    ((26, 27), 0.35295612386476116),
    ((26, 28), 0.35295612386476116),
    ((26, 30), 0.35295612386476116),
    ((26, 31), 0.35295612386476116),
    ((26, 32), 1.0743036443092429),
    ((27, 28), 0.7872506057680129),
    ((27, 29), 0.974291058424373),
    ((27, 30), 0.35295612386476116),
    ((27, 31), 1.2631953504915985),
    ((27, 32), 1.4085855403276248),
    ((28, 29), 0.35295612386476116),
    ((28, 30), 0.35295612386476116),
    ((28, 32), 1.34536123231926),
    ((29, 30), 0.7553857282466059),
    ((29, 31), 0.7553857282466059),
    ((30, 31), 0.7553857282466059),
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "prefential attachment":
  let karate = karateClubGraph()
  let got = prefentialAttachment(karate)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 32.0),
    ((0, 14), 32.0),
    ((0, 15), 32.0),
    ((0, 16), 32.0),
    ((0, 18), 32.0),
    ((0, 20), 32.0),
    ((0, 22), 32.0),
    ((0, 23), 80.0),
    ((0, 24), 48.0),
    ((0, 25), 48.0),
    ((0, 26), 32.0),
    ((0, 27), 64.0),
    ((0, 28), 48.0),
    ((0, 29), 64.0),
    ((0, 30), 64.0),
    ((0, 32), 192.0),
    ((0, 33), 272.0),
    ((1, 4), 27.0),
    ((1, 5), 36.0),
    ((1, 6), 36.0),
    ((1, 8), 45.0),
    ((1, 9), 18.0),
    ((1, 10), 27.0),
    ((1, 11), 9.0),
    ((1, 12), 18.0),
    ((1, 14), 18.0),
    ((1, 15), 18.0),
    ((1, 16), 18.0),
    ((1, 18), 18.0),
    ((1, 20), 18.0),
    ((1, 22), 18.0),
    ((1, 23), 45.0),
    ((1, 24), 27.0),
    ((1, 25), 27.0),
    ((1, 26), 18.0),
    ((1, 27), 36.0),
    ((1, 28), 27.0),
    ((1, 29), 36.0),
    ((1, 31), 54.0),
    ((1, 32), 108.0),
    ((1, 33), 153.0),
    ((2, 4), 30.0),
    ((2, 5), 40.0),
    ((2, 6), 40.0),
    ((2, 10), 30.0),
    ((2, 11), 10.0),
    ((2, 12), 20.0),
    ((2, 14), 20.0),
    ((2, 15), 20.0),
    ((2, 16), 20.0),
    ((2, 17), 20.0),
    ((2, 18), 20.0),
    ((2, 19), 30.0),
    ((2, 20), 20.0),
    ((2, 21), 20.0),
    ((2, 22), 20.0),
    ((2, 23), 50.0),
    ((2, 24), 30.0),
    ((2, 25), 30.0),
    ((2, 26), 20.0),
    ((2, 29), 40.0),
    ((2, 30), 40.0),
    ((2, 31), 60.0),
    ((2, 33), 170.0),
    ((3, 4), 18.0),
    ((3, 5), 24.0),
    ((3, 6), 24.0),
    ((3, 8), 30.0),
    ((3, 9), 12.0),
    ((3, 10), 18.0),
    ((3, 11), 6.0),
    ((3, 14), 12.0),
    ((3, 15), 12.0),
    ((3, 16), 12.0),
    ((3, 17), 12.0),
    ((3, 18), 12.0),
    ((3, 19), 18.0),
    ((3, 20), 12.0),
    ((3, 21), 12.0),
    ((3, 22), 12.0),
    ((3, 23), 30.0),
    ((3, 24), 18.0),
    ((3, 25), 18.0),
    ((3, 26), 12.0),
    ((3, 27), 24.0),
    ((3, 28), 18.0),
    ((3, 29), 24.0),
    ((3, 30), 24.0),
    ((3, 31), 36.0),
    ((3, 32), 72.0),
    ((3, 33), 102.0),
    ((4, 5), 12.0),
    ((4, 7), 12.0),
    ((4, 8), 15.0),
    ((4, 9), 6.0),
    ((4, 11), 3.0),
    ((4, 12), 6.0),
    ((4, 13), 15.0),
    ((4, 14), 6.0),
    ((4, 15), 6.0),
    ((4, 16), 6.0),
    ((4, 17), 6.0),
    ((4, 18), 6.0),
    ((4, 19), 9.0),
    ((4, 20), 6.0),
    ((4, 21), 6.0),
    ((4, 22), 6.0),
    ((4, 23), 15.0),
    ((4, 24), 9.0),
    ((4, 25), 9.0),
    ((4, 26), 6.0),
    ((4, 27), 12.0),
    ((4, 28), 9.0),
    ((4, 29), 12.0),
    ((4, 30), 12.0),
    ((4, 31), 18.0),
    ((4, 32), 36.0),
    ((4, 33), 51.0),
    ((5, 7), 16.0),
    ((5, 8), 20.0),
    ((5, 9), 8.0),
    ((5, 11), 4.0),
    ((5, 12), 8.0),
    ((5, 13), 20.0),
    ((5, 14), 8.0),
    ((5, 15), 8.0),
    ((5, 17), 8.0),
    ((5, 18), 8.0),
    ((5, 19), 12.0),
    ((5, 20), 8.0),
    ((5, 21), 8.0),
    ((5, 22), 8.0),
    ((5, 23), 20.0),
    ((5, 24), 12.0),
    ((5, 25), 12.0),
    ((5, 26), 8.0),
    ((5, 27), 16.0),
    ((5, 28), 12.0),
    ((5, 29), 16.0),
    ((5, 30), 16.0),
    ((5, 31), 24.0),
    ((5, 32), 48.0),
    ((5, 33), 68.0),
    ((6, 7), 16.0),
    ((6, 8), 20.0),
    ((6, 9), 8.0),
    ((6, 10), 12.0),
    ((6, 11), 4.0),
    ((6, 12), 8.0),
    ((6, 13), 20.0),
    ((6, 14), 8.0),
    ((6, 15), 8.0),
    ((6, 17), 8.0),
    ((6, 18), 8.0),
    ((6, 19), 12.0),
    ((6, 20), 8.0),
    ((6, 21), 8.0),
    ((6, 22), 8.0),
    ((6, 23), 20.0),
    ((6, 24), 12.0),
    ((6, 25), 12.0),
    ((6, 26), 8.0),
    ((6, 27), 16.0),
    ((6, 28), 12.0),
    ((6, 29), 16.0),
    ((6, 30), 16.0),
    ((6, 31), 24.0),
    ((6, 32), 48.0),
    ((6, 33), 68.0),
    ((7, 8), 20.0),
    ((7, 9), 8.0),
    ((7, 10), 12.0),
    ((7, 11), 4.0),
    ((7, 12), 8.0),
    ((7, 13), 20.0),
    ((7, 14), 8.0),
    ((7, 15), 8.0),
    ((7, 16), 8.0),
    ((7, 17), 8.0),
    ((7, 18), 8.0),
    ((7, 19), 12.0),
    ((7, 20), 8.0),
    ((7, 21), 8.0),
    ((7, 22), 8.0),
    ((7, 23), 20.0),
    ((7, 24), 12.0),
    ((7, 25), 12.0),
    ((7, 26), 8.0),
    ((7, 27), 16.0),
    ((7, 28), 12.0),
    ((7, 29), 16.0),
    ((7, 30), 16.0),
    ((7, 31), 24.0),
    ((7, 32), 48.0),
    ((7, 33), 68.0),
    ((8, 9), 10.0),
    ((8, 10), 15.0),
    ((8, 11), 5.0),
    ((8, 12), 10.0),
    ((8, 13), 25.0),
    ((8, 14), 10.0),
    ((8, 15), 10.0),
    ((8, 16), 10.0),
    ((8, 17), 10.0),
    ((8, 18), 10.0),
    ((8, 19), 15.0),
    ((8, 20), 10.0),
    ((8, 21), 10.0),
    ((8, 22), 10.0),
    ((8, 23), 25.0),
    ((8, 24), 15.0),
    ((8, 25), 15.0),
    ((8, 26), 10.0),
    ((8, 27), 20.0),
    ((8, 28), 15.0),
    ((8, 29), 20.0),
    ((8, 31), 30.0),
    ((9, 10), 6.0),
    ((9, 11), 2.0),
    ((9, 12), 4.0),
    ((9, 13), 10.0),
    ((9, 14), 4.0),
    ((9, 15), 4.0),
    ((9, 16), 4.0),
    ((9, 17), 4.0),
    ((9, 18), 4.0),
    ((9, 19), 6.0),
    ((9, 20), 4.0),
    ((9, 21), 4.0),
    ((9, 22), 4.0),
    ((9, 23), 10.0),
    ((9, 24), 6.0),
    ((9, 25), 6.0),
    ((9, 26), 4.0),
    ((9, 27), 8.0),
    ((9, 28), 6.0),
    ((9, 29), 8.0),
    ((9, 30), 8.0),
    ((9, 31), 12.0),
    ((9, 32), 24.0),
    ((10, 11), 3.0),
    ((10, 12), 6.0),
    ((10, 13), 15.0),
    ((10, 14), 6.0),
    ((10, 15), 6.0),
    ((10, 16), 6.0),
    ((10, 17), 6.0),
    ((10, 18), 6.0),
    ((10, 19), 9.0),
    ((10, 20), 6.0),
    ((10, 21), 6.0),
    ((10, 22), 6.0),
    ((10, 23), 15.0),
    ((10, 24), 9.0),
    ((10, 25), 9.0),
    ((10, 26), 6.0),
    ((10, 27), 12.0),
    ((10, 28), 9.0),
    ((10, 29), 12.0),
    ((10, 30), 12.0),
    ((10, 31), 18.0),
    ((10, 32), 36.0),
    ((10, 33), 51.0),
    ((11, 12), 2.0),
    ((11, 13), 5.0),
    ((11, 14), 2.0),
    ((11, 15), 2.0),
    ((11, 16), 2.0),
    ((11, 17), 2.0),
    ((11, 18), 2.0),
    ((11, 19), 3.0),
    ((11, 20), 2.0),
    ((11, 21), 2.0),
    ((11, 22), 2.0),
    ((11, 23), 5.0),
    ((11, 24), 3.0),
    ((11, 25), 3.0),
    ((11, 26), 2.0),
    ((11, 27), 4.0),
    ((11, 28), 3.0),
    ((11, 29), 4.0),
    ((11, 30), 4.0),
    ((11, 31), 6.0),
    ((11, 32), 12.0),
    ((11, 33), 17.0),
    ((12, 13), 10.0),
    ((12, 14), 4.0),
    ((12, 15), 4.0),
    ((12, 16), 4.0),
    ((12, 17), 4.0),
    ((12, 18), 4.0),
    ((12, 19), 6.0),
    ((12, 20), 4.0),
    ((12, 21), 4.0),
    ((12, 22), 4.0),
    ((12, 23), 10.0),
    ((12, 24), 6.0),
    ((12, 25), 6.0),
    ((12, 26), 4.0),
    ((12, 27), 8.0),
    ((12, 28), 6.0),
    ((12, 29), 8.0),
    ((12, 30), 8.0),
    ((12, 31), 12.0),
    ((12, 32), 24.0),
    ((12, 33), 34.0),
    ((13, 14), 10.0),
    ((13, 15), 10.0),
    ((13, 16), 10.0),
    ((13, 17), 10.0),
    ((13, 18), 10.0),
    ((13, 19), 15.0),
    ((13, 20), 10.0),
    ((13, 21), 10.0),
    ((13, 22), 10.0),
    ((13, 23), 25.0),
    ((13, 24), 15.0),
    ((13, 25), 15.0),
    ((13, 26), 10.0),
    ((13, 27), 20.0),
    ((13, 28), 15.0),
    ((13, 29), 20.0),
    ((13, 30), 20.0),
    ((13, 31), 30.0),
    ((13, 32), 60.0),
    ((14, 15), 4.0),
    ((14, 16), 4.0),
    ((14, 17), 4.0),
    ((14, 18), 4.0),
    ((14, 19), 6.0),
    ((14, 20), 4.0),
    ((14, 21), 4.0),
    ((14, 22), 4.0),
    ((14, 23), 10.0),
    ((14, 24), 6.0),
    ((14, 25), 6.0),
    ((14, 26), 4.0),
    ((14, 27), 8.0),
    ((14, 28), 6.0),
    ((14, 29), 8.0),
    ((14, 30), 8.0),
    ((14, 31), 12.0),
    ((15, 16), 4.0),
    ((15, 17), 4.0),
    ((15, 18), 4.0),
    ((15, 19), 6.0),
    ((15, 20), 4.0),
    ((15, 21), 4.0),
    ((15, 22), 4.0),
    ((15, 23), 10.0),
    ((15, 24), 6.0),
    ((15, 25), 6.0),
    ((15, 26), 4.0),
    ((15, 27), 8.0),
    ((15, 28), 6.0),
    ((15, 29), 8.0),
    ((15, 30), 8.0),
    ((15, 31), 12.0),
    ((16, 17), 4.0),
    ((16, 18), 4.0),
    ((16, 19), 6.0),
    ((16, 20), 4.0),
    ((16, 21), 4.0),
    ((16, 22), 4.0),
    ((16, 23), 10.0),
    ((16, 24), 6.0),
    ((16, 25), 6.0),
    ((16, 26), 4.0),
    ((16, 27), 8.0),
    ((16, 28), 6.0),
    ((16, 29), 8.0),
    ((16, 30), 8.0),
    ((16, 31), 12.0),
    ((16, 32), 24.0),
    ((16, 33), 34.0),
    ((17, 18), 4.0),
    ((17, 19), 6.0),
    ((17, 20), 4.0),
    ((17, 21), 4.0),
    ((17, 22), 4.0),
    ((17, 23), 10.0),
    ((17, 24), 6.0),
    ((17, 25), 6.0),
    ((17, 26), 4.0),
    ((17, 27), 8.0),
    ((17, 28), 6.0),
    ((17, 29), 8.0),
    ((17, 30), 8.0),
    ((17, 31), 12.0),
    ((17, 32), 24.0),
    ((17, 33), 34.0),
    ((18, 19), 6.0),
    ((18, 20), 4.0),
    ((18, 21), 4.0),
    ((18, 22), 4.0),
    ((18, 23), 10.0),
    ((18, 24), 6.0),
    ((18, 25), 6.0),
    ((18, 26), 4.0),
    ((18, 27), 8.0),
    ((18, 28), 6.0),
    ((18, 29), 8.0),
    ((18, 30), 8.0),
    ((18, 31), 12.0),
    ((19, 20), 6.0),
    ((19, 21), 6.0),
    ((19, 22), 6.0),
    ((19, 23), 15.0),
    ((19, 24), 9.0),
    ((19, 25), 9.0),
    ((19, 26), 6.0),
    ((19, 27), 12.0),
    ((19, 28), 9.0),
    ((19, 29), 12.0),
    ((19, 30), 12.0),
    ((19, 31), 18.0),
    ((19, 32), 36.0),
    ((20, 21), 4.0),
    ((20, 22), 4.0),
    ((20, 23), 10.0),
    ((20, 24), 6.0),
    ((20, 25), 6.0),
    ((20, 26), 4.0),
    ((20, 27), 8.0),
    ((20, 28), 6.0),
    ((20, 29), 8.0),
    ((20, 30), 8.0),
    ((20, 31), 12.0),
    ((21, 22), 4.0),
    ((21, 23), 10.0),
    ((21, 24), 6.0),
    ((21, 25), 6.0),
    ((21, 26), 4.0),
    ((21, 27), 8.0),
    ((21, 28), 6.0),
    ((21, 29), 8.0),
    ((21, 30), 8.0),
    ((21, 31), 12.0),
    ((21, 32), 24.0),
    ((21, 33), 34.0),
    ((22, 23), 10.0),
    ((22, 24), 6.0),
    ((22, 25), 6.0),
    ((22, 26), 4.0),
    ((22, 27), 8.0),
    ((22, 28), 6.0),
    ((22, 29), 8.0),
    ((22, 30), 8.0),
    ((22, 31), 12.0),
    ((23, 24), 15.0),
    ((23, 26), 10.0),
    ((23, 28), 15.0),
    ((23, 30), 20.0),
    ((23, 31), 30.0),
    ((24, 26), 6.0),
    ((24, 28), 9.0),
    ((24, 29), 12.0),
    ((24, 30), 12.0),
    ((24, 32), 36.0),
    ((24, 33), 51.0),
    ((25, 26), 6.0),
    ((25, 27), 12.0),
    ((25, 28), 9.0),
    ((25, 29), 12.0),
    ((25, 30), 12.0),
    ((25, 32), 36.0),
    ((25, 33), 51.0),
    ((26, 27), 8.0),
    ((26, 28), 6.0),
    ((26, 30), 8.0),
    ((26, 31), 12.0),
    ((26, 32), 24.0),
    ((27, 28), 12.0),
    ((27, 29), 16.0),
    ((27, 30), 16.0),
    ((27, 31), 24.0),
    ((27, 32), 48.0),
    ((28, 29), 12.0),
    ((28, 30), 12.0),
    ((28, 32), 36.0),
    ((29, 30), 16.0),
    ((29, 31), 24.0),
    ((30, 31), 24.0),
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "cn soundarajan hopcroft":
  let karate = karateClubGraph()
  let community = {
    0: 0, 1: 1, 2: 1, 3: 1, 4: 0, 5: 0, 6: 0, 7: 1, 8: 2, 9: 1,
    10: 0, 11: 0, 12: 1, 13: 1, 14: 2, 15: 2, 16: 0, 17: 1, 18: 2, 19: 0,
    20: 2, 21: 1, 22: 2, 23: 2, 24: 2, 25: 2, 26: 2, 27: 2, 28: 2, 29: 2,
    30: 2, 31: 2, 32: 2, 33: 2,
  }.toTable()
  let got = cnSoundarajanHopcroft(karate, community)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 1.0),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 4.0),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 1.0),
    ((0, 25), 1.0),
    ((0, 26), 0.0),
    ((0, 27), 1.0),
    ((0, 28), 2.0),
    ((0, 29), 0.0),
    ((0, 30), 2.0),
    ((0, 32), 3.0),
    ((0, 33), 4.0),
    ((1, 4), 1.0),
    ((1, 5), 1.0),
    ((1, 6), 1.0),
    ((1, 8), 3.0),
    ((1, 9), 2.0),
    ((1, 10), 1.0),
    ((1, 11), 1.0),
    ((1, 12), 3.0),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 1.0),
    ((1, 28), 1.0),
    ((1, 29), 0.0),
    ((1, 31), 1.0),
    ((1, 32), 2.0),
    ((1, 33), 3.0),
    ((2, 4), 1.0),
    ((2, 5), 1.0),
    ((2, 6), 1.0),
    ((2, 10), 1.0),
    ((2, 11), 1.0),
    ((2, 12), 3.0),
    ((2, 14), 1.0),
    ((2, 15), 1.0),
    ((2, 16), 0.0),
    ((2, 17), 3.0),
    ((2, 18), 1.0),
    ((2, 19), 2.0),
    ((2, 20), 1.0),
    ((2, 21), 3.0),
    ((2, 22), 1.0),
    ((2, 23), 2.0),
    ((2, 24), 1.0),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 1.0),
    ((2, 30), 3.0),
    ((2, 31), 3.0),
    ((2, 33), 6.0),
    ((3, 4), 1.0),
    ((3, 5), 1.0),
    ((3, 6), 1.0),
    ((3, 8), 2.0),
    ((3, 9), 2.0),
    ((3, 10), 1.0),
    ((3, 11), 1.0),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 3.0),
    ((3, 18), 0.0),
    ((3, 19), 2.0),
    ((3, 20), 0.0),
    ((3, 21), 3.0),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 1.0),
    ((3, 28), 1.0),
    ((3, 29), 0.0),
    ((3, 30), 1.0),
    ((3, 31), 1.0),
    ((3, 32), 1.0),
    ((3, 33), 1.0),
    ((4, 5), 6.0),
    ((4, 7), 1.0),
    ((4, 8), 1.0),
    ((4, 9), 0.0),
    ((4, 11), 2.0),
    ((4, 12), 1.0),
    ((4, 13), 1.0),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 2.0),
    ((4, 17), 1.0),
    ((4, 18), 0.0),
    ((4, 19), 2.0),
    ((4, 20), 0.0),
    ((4, 21), 1.0),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 1.0),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 1.0),
    ((5, 8), 1.0),
    ((5, 9), 0.0),
    ((5, 11), 2.0),
    ((5, 12), 1.0),
    ((5, 13), 1.0),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 1.0),
    ((5, 18), 0.0),
    ((5, 19), 2.0),
    ((5, 20), 0.0),
    ((5, 21), 1.0),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 1.0),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 1.0),
    ((6, 8), 1.0),
    ((6, 9), 0.0),
    ((6, 10), 6.0),
    ((6, 11), 2.0),
    ((6, 12), 1.0),
    ((6, 13), 1.0),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 1.0),
    ((6, 18), 0.0),
    ((6, 19), 2.0),
    ((6, 20), 0.0),
    ((6, 21), 1.0),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 1.0),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 2.0),
    ((7, 9), 2.0),
    ((7, 10), 1.0),
    ((7, 11), 1.0),
    ((7, 12), 3.0),
    ((7, 13), 7.0),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 3.0),
    ((7, 18), 0.0),
    ((7, 19), 2.0),
    ((7, 20), 0.0),
    ((7, 21), 3.0),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 1.0),
    ((7, 28), 1.0),
    ((7, 29), 0.0),
    ((7, 30), 1.0),
    ((7, 31), 1.0),
    ((7, 32), 1.0),
    ((7, 33), 0.0),
    ((8, 9), 2.0),
    ((8, 10), 1.0),
    ((8, 11), 1.0),
    ((8, 12), 1.0),
    ((8, 13), 3.0),
    ((8, 14), 4.0),
    ((8, 15), 4.0),
    ((8, 16), 0.0),
    ((8, 17), 1.0),
    ((8, 18), 4.0),
    ((8, 19), 2.0),
    ((8, 20), 4.0),
    ((8, 21), 1.0),
    ((8, 22), 4.0),
    ((8, 23), 4.0),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 2.0),
    ((8, 27), 3.0),
    ((8, 28), 3.0),
    ((8, 29), 4.0),
    ((8, 31), 5.0),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 3.0),
    ((9, 14), 1.0),
    ((9, 15), 1.0),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 1.0),
    ((9, 19), 1.0),
    ((9, 20), 1.0),
    ((9, 21), 0.0),
    ((9, 22), 1.0),
    ((9, 23), 1.0),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 1.0),
    ((9, 27), 2.0),
    ((9, 28), 2.0),
    ((9, 29), 1.0),
    ((9, 30), 1.0),
    ((9, 31), 1.0),
    ((9, 32), 2.0),
    ((10, 11), 2.0),
    ((10, 12), 1.0),
    ((10, 13), 1.0),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 2.0),
    ((10, 17), 1.0),
    ((10, 18), 0.0),
    ((10, 19), 2.0),
    ((10, 20), 0.0),
    ((10, 21), 1.0),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 1.0),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 1.0),
    ((11, 13), 1.0),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 1.0),
    ((11, 18), 0.0),
    ((11, 19), 2.0),
    ((11, 20), 0.0),
    ((11, 21), 1.0),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 1.0),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 3.0),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 1.0),
    ((12, 18), 0.0),
    ((12, 19), 1.0),
    ((12, 20), 0.0),
    ((12, 21), 1.0),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 1.0),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 1.0),
    ((13, 15), 1.0),
    ((13, 16), 0.0),
    ((13, 17), 3.0),
    ((13, 18), 1.0),
    ((13, 19), 3.0),
    ((13, 20), 1.0),
    ((13, 21), 3.0),
    ((13, 22), 1.0),
    ((13, 23), 1.0),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 1.0),
    ((13, 27), 2.0),
    ((13, 28), 2.0),
    ((13, 29), 1.0),
    ((13, 30), 2.0),
    ((13, 31), 2.0),
    ((13, 32), 2.0),
    ((14, 15), 4.0),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 4.0),
    ((14, 19), 1.0),
    ((14, 20), 4.0),
    ((14, 21), 0.0),
    ((14, 22), 4.0),
    ((14, 23), 4.0),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 2.0),
    ((14, 27), 2.0),
    ((14, 28), 2.0),
    ((14, 29), 4.0),
    ((14, 30), 4.0),
    ((14, 31), 4.0),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 4.0),
    ((15, 19), 1.0),
    ((15, 20), 4.0),
    ((15, 21), 0.0),
    ((15, 22), 4.0),
    ((15, 23), 4.0),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 2.0),
    ((15, 27), 2.0),
    ((15, 28), 2.0),
    ((15, 29), 4.0),
    ((15, 30), 4.0),
    ((15, 31), 4.0),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 2.0),
    ((17, 20), 0.0),
    ((17, 21), 3.0),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 1.0),
    ((17, 31), 1.0),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 1.0),
    ((18, 20), 4.0),
    ((18, 21), 0.0),
    ((18, 22), 4.0),
    ((18, 23), 4.0),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 2.0),
    ((18, 27), 2.0),
    ((18, 28), 2.0),
    ((18, 29), 4.0),
    ((18, 30), 4.0),
    ((18, 31), 4.0),
    ((19, 20), 1.0),
    ((19, 21), 2.0),
    ((19, 22), 1.0),
    ((19, 23), 1.0),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 1.0),
    ((19, 27), 1.0),
    ((19, 28), 1.0),
    ((19, 29), 1.0),
    ((19, 30), 2.0),
    ((19, 31), 2.0),
    ((19, 32), 1.0),
    ((20, 21), 0.0),
    ((20, 22), 4.0),
    ((20, 23), 4.0),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 2.0),
    ((20, 27), 2.0),
    ((20, 28), 2.0),
    ((20, 29), 4.0),
    ((20, 30), 4.0),
    ((20, 31), 4.0),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 1.0),
    ((21, 31), 1.0),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 4.0),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 2.0),
    ((22, 27), 2.0),
    ((22, 28), 2.0),
    ((22, 29), 4.0),
    ((22, 30), 4.0),
    ((22, 31), 4.0),
    ((23, 24), 4.0),
    ((23, 26), 4.0),
    ((23, 28), 2.0),
    ((23, 30), 4.0),
    ((23, 31), 6.0),
    ((24, 26), 0.0),
    ((24, 28), 2.0),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 2.0),
    ((24, 33), 4.0),
    ((25, 26), 0.0),
    ((25, 27), 4.0),
    ((25, 28), 2.0),
    ((25, 29), 2.0),
    ((25, 30), 0.0),
    ((25, 32), 4.0),
    ((25, 33), 4.0),
    ((26, 27), 2.0),
    ((26, 28), 2.0),
    ((26, 30), 2.0),
    ((26, 31), 2.0),
    ((26, 32), 4.0),
    ((27, 28), 3.0),
    ((27, 29), 4.0),
    ((27, 30), 2.0),
    ((27, 31), 4.0),
    ((27, 32), 5.0),
    ((28, 29), 2.0),
    ((28, 30), 2.0),
    ((28, 32), 5.0),
    ((29, 30), 4.0),
    ((29, 31), 4.0),
    ((30, 31), 4.0),
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "ra index soundarajan hopcroft":
  let karate = karateClubGraph()
  let community = {
    0: 0, 1: 1, 2: 1, 3: 1, 4: 0, 5: 0, 6: 0, 7: 1, 8: 2, 9: 1,
    10: 0, 11: 0, 12: 1, 13: 1, 14: 2, 15: 2, 16: 0, 17: 1, 18: 2, 19: 0,
    20: 2, 21: 1, 22: 2, 23: 2, 24: 2, 25: 2, 26: 2, 27: 2, 28: 2, 29: 2,
    30: 2, 31: 2, 32: 2, 33: 2,
  }.toTable()
  let got = raIndexSoundarajanHopcroft(karate, community)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 0.0),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 0.5),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 0.0),
    ((0, 25), 0.0),
    ((0, 26), 0.0),
    ((0, 27), 0.0),
    ((0, 28), 0.0),
    ((0, 29), 0.0),
    ((0, 30), 0.0),
    ((0, 32), 0.0),
    ((0, 33), 0.0),
    ((1, 4), 0.0),
    ((1, 5), 0.0),
    ((1, 6), 0.0),
    ((1, 8), 0.0),
    ((1, 9), 0.1),
    ((1, 10), 0.0),
    ((1, 11), 0.0),
    ((1, 12), 0.16666666666666666),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 0.0),
    ((1, 28), 0.0),
    ((1, 29), 0.0),
    ((1, 31), 0.0),
    ((1, 32), 0.0),
    ((1, 33), 0.0),
    ((2, 4), 0.0),
    ((2, 5), 0.0),
    ((2, 6), 0.0),
    ((2, 10), 0.0),
    ((2, 11), 0.0),
    ((2, 12), 0.16666666666666666),
    ((2, 14), 0.0),
    ((2, 15), 0.0),
    ((2, 16), 0.0),
    ((2, 17), 0.1111111111111111),
    ((2, 18), 0.0),
    ((2, 19), 0.0),
    ((2, 20), 0.0),
    ((2, 21), 0.1111111111111111),
    ((2, 22), 0.0),
    ((2, 23), 0.0),
    ((2, 24), 0.0),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 0.0),
    ((2, 30), 0.0),
    ((2, 31), 0.0),
    ((2, 33), 0.0),
    ((3, 4), 0.0),
    ((3, 5), 0.0),
    ((3, 6), 0.0),
    ((3, 8), 0.0),
    ((3, 9), 0.1),
    ((3, 10), 0.0),
    ((3, 11), 0.0),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 0.1111111111111111),
    ((3, 18), 0.0),
    ((3, 19), 0.0),
    ((3, 20), 0.0),
    ((3, 21), 0.1111111111111111),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 0.0),
    ((3, 28), 0.0),
    ((3, 29), 0.0),
    ((3, 30), 0.0),
    ((3, 31), 0.0),
    ((3, 32), 0.0),
    ((3, 33), 0.0),
    ((4, 5), 0.6458333333333333),
    ((4, 7), 0.0),
    ((4, 8), 0.0),
    ((4, 9), 0.0),
    ((4, 11), 0.0625),
    ((4, 12), 0.0),
    ((4, 13), 0.0),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 0.25),
    ((4, 17), 0.0),
    ((4, 18), 0.0),
    ((4, 19), 0.0625),
    ((4, 20), 0.0),
    ((4, 21), 0.0),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 0.0),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 0.0),
    ((5, 8), 0.0),
    ((5, 9), 0.0),
    ((5, 11), 0.0625),
    ((5, 12), 0.0),
    ((5, 13), 0.0),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 0.0),
    ((5, 18), 0.0),
    ((5, 19), 0.0625),
    ((5, 20), 0.0),
    ((5, 21), 0.0),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 0.0),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 0.0),
    ((6, 8), 0.0),
    ((6, 9), 0.0),
    ((6, 10), 0.6458333333333333),
    ((6, 11), 0.0625),
    ((6, 12), 0.0),
    ((6, 13), 0.0),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 0.0),
    ((6, 18), 0.0),
    ((6, 19), 0.0625),
    ((6, 20), 0.0),
    ((6, 21), 0.0),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 0.0),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 0.0),
    ((7, 9), 0.1),
    ((7, 10), 0.0),
    ((7, 11), 0.0),
    ((7, 12), 0.16666666666666666),
    ((7, 13), 0.37777777777777777),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 0.1111111111111111),
    ((7, 18), 0.0),
    ((7, 19), 0.0),
    ((7, 20), 0.0),
    ((7, 21), 0.1111111111111111),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 0.0),
    ((7, 28), 0.0),
    ((7, 29), 0.0),
    ((7, 30), 0.0),
    ((7, 31), 0.0),
    ((7, 32), 0.0),
    ((7, 33), 0.0),
    ((8, 9), 0.0),
    ((8, 10), 0.0),
    ((8, 11), 0.0),
    ((8, 12), 0.0),
    ((8, 13), 0.0),
    ((8, 14), 0.14215686274509803),
    ((8, 15), 0.14215686274509803),
    ((8, 16), 0.0),
    ((8, 17), 0.0),
    ((8, 18), 0.14215686274509803),
    ((8, 19), 0.0),
    ((8, 20), 0.14215686274509803),
    ((8, 21), 0.0),
    ((8, 22), 0.14215686274509803),
    ((8, 23), 0.14215686274509803),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 0.058823529411764705),
    ((8, 27), 0.058823529411764705),
    ((8, 28), 0.058823529411764705),
    ((8, 29), 0.14215686274509803),
    ((8, 31), 0.14215686274509803),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 0.1),
    ((9, 14), 0.0),
    ((9, 15), 0.0),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 0.0),
    ((9, 19), 0.0),
    ((9, 20), 0.0),
    ((9, 21), 0.0),
    ((9, 22), 0.0),
    ((9, 23), 0.0),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 0.0),
    ((9, 27), 0.0),
    ((9, 28), 0.0),
    ((9, 29), 0.0),
    ((9, 30), 0.0),
    ((9, 31), 0.0),
    ((9, 32), 0.0),
    ((10, 11), 0.0625),
    ((10, 12), 0.0),
    ((10, 13), 0.0),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 0.25),
    ((10, 17), 0.0),
    ((10, 18), 0.0),
    ((10, 19), 0.0625),
    ((10, 20), 0.0),
    ((10, 21), 0.0),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 0.0),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 0.0),
    ((11, 13), 0.0),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 0.0),
    ((11, 18), 0.0),
    ((11, 19), 0.0625),
    ((11, 20), 0.0),
    ((11, 21), 0.0),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 0.0),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 0.16666666666666666),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 0.0),
    ((12, 18), 0.0),
    ((12, 19), 0.0),
    ((12, 20), 0.0),
    ((12, 21), 0.0),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 0.0),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 0.0),
    ((13, 15), 0.0),
    ((13, 16), 0.0),
    ((13, 17), 0.1111111111111111),
    ((13, 18), 0.0),
    ((13, 19), 0.0),
    ((13, 20), 0.0),
    ((13, 21), 0.1111111111111111),
    ((13, 22), 0.0),
    ((13, 23), 0.0),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 0.0),
    ((13, 27), 0.0),
    ((13, 28), 0.0),
    ((13, 29), 0.0),
    ((13, 30), 0.0),
    ((13, 31), 0.0),
    ((13, 32), 0.0),
    ((14, 15), 0.14215686274509803),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 0.14215686274509803),
    ((14, 19), 0.0),
    ((14, 20), 0.14215686274509803),
    ((14, 21), 0.0),
    ((14, 22), 0.14215686274509803),
    ((14, 23), 0.14215686274509803),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 0.058823529411764705),
    ((14, 27), 0.058823529411764705),
    ((14, 28), 0.058823529411764705),
    ((14, 29), 0.14215686274509803),
    ((14, 30), 0.14215686274509803),
    ((14, 31), 0.14215686274509803),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 0.14215686274509803),
    ((15, 19), 0.0),
    ((15, 20), 0.14215686274509803),
    ((15, 21), 0.0),
    ((15, 22), 0.14215686274509803),
    ((15, 23), 0.14215686274509803),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 0.058823529411764705),
    ((15, 27), 0.058823529411764705),
    ((15, 28), 0.058823529411764705),
    ((15, 29), 0.14215686274509803),
    ((15, 30), 0.14215686274509803),
    ((15, 31), 0.14215686274509803),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 0.0),
    ((17, 20), 0.0),
    ((17, 21), 0.1111111111111111),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 0.0),
    ((17, 31), 0.0),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 0.0),
    ((18, 20), 0.14215686274509803),
    ((18, 21), 0.0),
    ((18, 22), 0.14215686274509803),
    ((18, 23), 0.14215686274509803),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 0.058823529411764705),
    ((18, 27), 0.058823529411764705),
    ((18, 28), 0.058823529411764705),
    ((18, 29), 0.14215686274509803),
    ((18, 30), 0.14215686274509803),
    ((18, 31), 0.14215686274509803),
    ((19, 20), 0.0),
    ((19, 21), 0.0),
    ((19, 22), 0.0),
    ((19, 23), 0.0),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 0.0),
    ((19, 27), 0.0),
    ((19, 28), 0.0),
    ((19, 29), 0.0),
    ((19, 30), 0.0),
    ((19, 31), 0.0),
    ((19, 32), 0.0),
    ((20, 21), 0.0),
    ((20, 22), 0.14215686274509803),
    ((20, 23), 0.14215686274509803),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 0.058823529411764705),
    ((20, 27), 0.058823529411764705),
    ((20, 28), 0.058823529411764705),
    ((20, 29), 0.14215686274509803),
    ((20, 30), 0.14215686274509803),
    ((20, 31), 0.14215686274509803),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 0.0),
    ((21, 31), 0.0),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 0.14215686274509803),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 0.058823529411764705),
    ((22, 27), 0.058823529411764705),
    ((22, 28), 0.058823529411764705),
    ((22, 29), 0.14215686274509803),
    ((22, 30), 0.14215686274509803),
    ((22, 31), 0.14215686274509803),
    ((23, 24), 0.5833333333333333),
    ((23, 26), 0.3088235294117647),
    ((23, 28), 0.058823529411764705),
    ((23, 30), 0.14215686274509803),
    ((23, 31), 0.47549019607843135),
    ((24, 26), 0.0),
    ((24, 28), 0.16666666666666666),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 0.16666666666666666),
    ((24, 33), 0.41666666666666663),
    ((25, 26), 0.0),
    ((25, 27), 0.5333333333333333),
    ((25, 28), 0.16666666666666666),
    ((25, 29), 0.2),
    ((25, 30), 0.0),
    ((25, 32), 0.3666666666666667),
    ((25, 33), 0.3666666666666667),
    ((26, 27), 0.058823529411764705),
    ((26, 28), 0.058823529411764705),
    ((26, 30), 0.058823529411764705),
    ((26, 31), 0.058823529411764705),
    ((26, 32), 0.3088235294117647),
    ((27, 28), 0.058823529411764705),
    ((27, 29), 0.25882352941176473),
    ((27, 30), 0.058823529411764705),
    ((27, 31), 0.39215686274509803),
    ((27, 32), 0.25882352941176473),
    ((28, 29), 0.058823529411764705),
    ((28, 30), 0.058823529411764705),
    ((28, 32), 0.22549019607843135),
    ((29, 30), 0.14215686274509803),
    ((29, 31), 0.14215686274509803),
    ((30, 31), 0.14215686274509803),
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

test "within inter cluster":
  let karate = karateClubGraph()
  let community = {
    0: 0, 1: 1, 2: 1, 3: 1, 4: 0, 5: 0, 6: 0, 7: 1, 8: 2, 9: 1,
    10: 0, 11: 0, 12: 1, 13: 1, 14: 2, 15: 2, 16: 0, 17: 1, 18: 2, 19: 0,
    20: 2, 21: 1, 22: 2, 23: 2, 24: 2, 25: 2, 26: 2, 27: 2, 28: 2, 29: 2,
    30: 2, 31: 2, 32: 2, 33: 2,
  }.toTable()
  let got = withinInterCluster(karate, community)
  let expected: seq[tuple[edge: Edge, prediction: float]] = @[
    ((0, 9), 0.0),
    ((0, 14), 0.0),
    ((0, 15), 0.0),
    ((0, 16), 2000.0),
    ((0, 18), 0.0),
    ((0, 20), 0.0),
    ((0, 22), 0.0),
    ((0, 23), 0.0),
    ((0, 24), 0.0),
    ((0, 25), 0.0),
    ((0, 26), 0.0),
    ((0, 27), 0.0),
    ((0, 28), 0.0),
    ((0, 29), 0.0),
    ((0, 30), 0.0),
    ((0, 32), 0.0),
    ((0, 33), 0.0),
    ((1, 4), 0.0),
    ((1, 5), 0.0),
    ((1, 6), 0.0),
    ((1, 8), 0.0),
    ((1, 9), 1000.0),
    ((1, 10), 0.0),
    ((1, 11), 0.0),
    ((1, 12), 0.9990009990009991),
    ((1, 14), 0.0),
    ((1, 15), 0.0),
    ((1, 16), 0.0),
    ((1, 18), 0.0),
    ((1, 20), 0.0),
    ((1, 22), 0.0),
    ((1, 23), 0.0),
    ((1, 24), 0.0),
    ((1, 25), 0.0),
    ((1, 26), 0.0),
    ((1, 27), 0.0),
    ((1, 28), 0.0),
    ((1, 29), 0.0),
    ((1, 31), 0.0),
    ((1, 32), 0.0),
    ((1, 33), 0.0),
    ((2, 4), 0.0),
    ((2, 5), 0.0),
    ((2, 6), 0.0),
    ((2, 10), 0.0),
    ((2, 11), 0.0),
    ((2, 12), 0.9990009990009991),
    ((2, 14), 0.0),
    ((2, 15), 0.0),
    ((2, 16), 0.0),
    ((2, 17), 0.9990009990009991),
    ((2, 18), 0.0),
    ((2, 19), 0.0),
    ((2, 20), 0.0),
    ((2, 21), 0.9990009990009991),
    ((2, 22), 0.0),
    ((2, 23), 0.0),
    ((2, 24), 0.0),
    ((2, 25), 0.0),
    ((2, 26), 0.0),
    ((2, 29), 0.0),
    ((2, 30), 0.0),
    ((2, 31), 0.0),
    ((2, 33), 0.0),
    ((3, 4), 0.0),
    ((3, 5), 0.0),
    ((3, 6), 0.0),
    ((3, 8), 0.0),
    ((3, 9), 1000.0),
    ((3, 10), 0.0),
    ((3, 11), 0.0),
    ((3, 14), 0.0),
    ((3, 15), 0.0),
    ((3, 16), 0.0),
    ((3, 17), 0.9990009990009991),
    ((3, 18), 0.0),
    ((3, 19), 0.0),
    ((3, 20), 0.0),
    ((3, 21), 0.9990009990009991),
    ((3, 22), 0.0),
    ((3, 23), 0.0),
    ((3, 24), 0.0),
    ((3, 25), 0.0),
    ((3, 26), 0.0),
    ((3, 27), 0.0),
    ((3, 28), 0.0),
    ((3, 29), 0.0),
    ((3, 30), 0.0),
    ((3, 31), 0.0),
    ((3, 32), 0.0),
    ((3, 33), 0.0),
    ((4, 5), 3000.0),
    ((4, 7), 0.0),
    ((4, 8), 0.0),
    ((4, 9), 0.0),
    ((4, 11), 1000.0),
    ((4, 12), 0.0),
    ((4, 13), 0.0),
    ((4, 14), 0.0),
    ((4, 15), 0.0),
    ((4, 16), 1000.0),
    ((4, 17), 0.0),
    ((4, 18), 0.0),
    ((4, 19), 1000.0),
    ((4, 20), 0.0),
    ((4, 21), 0.0),
    ((4, 22), 0.0),
    ((4, 23), 0.0),
    ((4, 24), 0.0),
    ((4, 25), 0.0),
    ((4, 26), 0.0),
    ((4, 27), 0.0),
    ((4, 28), 0.0),
    ((4, 29), 0.0),
    ((4, 30), 0.0),
    ((4, 31), 0.0),
    ((4, 32), 0.0),
    ((4, 33), 0.0),
    ((5, 7), 0.0),
    ((5, 8), 0.0),
    ((5, 9), 0.0),
    ((5, 11), 1000.0),
    ((5, 12), 0.0),
    ((5, 13), 0.0),
    ((5, 14), 0.0),
    ((5, 15), 0.0),
    ((5, 17), 0.0),
    ((5, 18), 0.0),
    ((5, 19), 1000.0),
    ((5, 20), 0.0),
    ((5, 21), 0.0),
    ((5, 22), 0.0),
    ((5, 23), 0.0),
    ((5, 24), 0.0),
    ((5, 25), 0.0),
    ((5, 26), 0.0),
    ((5, 27), 0.0),
    ((5, 28), 0.0),
    ((5, 29), 0.0),
    ((5, 30), 0.0),
    ((5, 31), 0.0),
    ((5, 32), 0.0),
    ((5, 33), 0.0),
    ((6, 7), 0.0),
    ((6, 8), 0.0),
    ((6, 9), 0.0),
    ((6, 10), 3000.0),
    ((6, 11), 1000.0),
    ((6, 12), 0.0),
    ((6, 13), 0.0),
    ((6, 14), 0.0),
    ((6, 15), 0.0),
    ((6, 17), 0.0),
    ((6, 18), 0.0),
    ((6, 19), 1000.0),
    ((6, 20), 0.0),
    ((6, 21), 0.0),
    ((6, 22), 0.0),
    ((6, 23), 0.0),
    ((6, 24), 0.0),
    ((6, 25), 0.0),
    ((6, 26), 0.0),
    ((6, 27), 0.0),
    ((6, 28), 0.0),
    ((6, 29), 0.0),
    ((6, 30), 0.0),
    ((6, 31), 0.0),
    ((6, 32), 0.0),
    ((6, 33), 0.0),
    ((7, 8), 0.0),
    ((7, 9), 1000.0),
    ((7, 10), 0.0),
    ((7, 11), 0.0),
    ((7, 12), 0.9990009990009991),
    ((7, 13), 2.997002997002997),
    ((7, 14), 0.0),
    ((7, 15), 0.0),
    ((7, 16), 0.0),
    ((7, 17), 0.9990009990009991),
    ((7, 18), 0.0),
    ((7, 19), 0.0),
    ((7, 20), 0.0),
    ((7, 21), 0.9990009990009991),
    ((7, 22), 0.0),
    ((7, 23), 0.0),
    ((7, 24), 0.0),
    ((7, 25), 0.0),
    ((7, 26), 0.0),
    ((7, 27), 0.0),
    ((7, 28), 0.0),
    ((7, 29), 0.0),
    ((7, 30), 0.0),
    ((7, 31), 0.0),
    ((7, 32), 0.0),
    ((7, 33), 0.0),
    ((8, 9), 0.0),
    ((8, 10), 0.0),
    ((8, 11), 0.0),
    ((8, 12), 0.0),
    ((8, 13), 0.0),
    ((8, 14), 2000.0),
    ((8, 15), 2000.0),
    ((8, 16), 0.0),
    ((8, 17), 0.0),
    ((8, 18), 2000.0),
    ((8, 19), 0.0),
    ((8, 20), 2000.0),
    ((8, 21), 0.0),
    ((8, 22), 2000.0),
    ((8, 23), 2000.0),
    ((8, 24), 0.0),
    ((8, 25), 0.0),
    ((8, 26), 1000.0),
    ((8, 27), 0.9990009990009991),
    ((8, 28), 0.9990009990009991),
    ((8, 29), 2000.0),
    ((8, 31), 1.9980019980019983),
    ((9, 10), 0.0),
    ((9, 11), 0.0),
    ((9, 12), 0.0),
    ((9, 13), 0.9990009990009991),
    ((9, 14), 0.0),
    ((9, 15), 0.0),
    ((9, 16), 0.0),
    ((9, 17), 0.0),
    ((9, 18), 0.0),
    ((9, 19), 0.0),
    ((9, 20), 0.0),
    ((9, 21), 0.0),
    ((9, 22), 0.0),
    ((9, 23), 0.0),
    ((9, 24), 0.0),
    ((9, 25), 0.0),
    ((9, 26), 0.0),
    ((9, 27), 0.0),
    ((9, 28), 0.0),
    ((9, 29), 0.0),
    ((9, 30), 0.0),
    ((9, 31), 0.0),
    ((9, 32), 0.0),
    ((10, 11), 1000.0),
    ((10, 12), 0.0),
    ((10, 13), 0.0),
    ((10, 14), 0.0),
    ((10, 15), 0.0),
    ((10, 16), 1000.0),
    ((10, 17), 0.0),
    ((10, 18), 0.0),
    ((10, 19), 1000.0),
    ((10, 20), 0.0),
    ((10, 21), 0.0),
    ((10, 22), 0.0),
    ((10, 23), 0.0),
    ((10, 24), 0.0),
    ((10, 25), 0.0),
    ((10, 26), 0.0),
    ((10, 27), 0.0),
    ((10, 28), 0.0),
    ((10, 29), 0.0),
    ((10, 30), 0.0),
    ((10, 31), 0.0),
    ((10, 32), 0.0),
    ((10, 33), 0.0),
    ((11, 12), 0.0),
    ((11, 13), 0.0),
    ((11, 14), 0.0),
    ((11, 15), 0.0),
    ((11, 16), 0.0),
    ((11, 17), 0.0),
    ((11, 18), 0.0),
    ((11, 19), 1000.0),
    ((11, 20), 0.0),
    ((11, 21), 0.0),
    ((11, 22), 0.0),
    ((11, 23), 0.0),
    ((11, 24), 0.0),
    ((11, 25), 0.0),
    ((11, 26), 0.0),
    ((11, 27), 0.0),
    ((11, 28), 0.0),
    ((11, 29), 0.0),
    ((11, 30), 0.0),
    ((11, 31), 0.0),
    ((11, 32), 0.0),
    ((11, 33), 0.0),
    ((12, 13), 0.9990009990009991),
    ((12, 14), 0.0),
    ((12, 15), 0.0),
    ((12, 16), 0.0),
    ((12, 17), 0.0),
    ((12, 18), 0.0),
    ((12, 19), 0.0),
    ((12, 20), 0.0),
    ((12, 21), 0.0),
    ((12, 22), 0.0),
    ((12, 23), 0.0),
    ((12, 24), 0.0),
    ((12, 25), 0.0),
    ((12, 26), 0.0),
    ((12, 27), 0.0),
    ((12, 28), 0.0),
    ((12, 29), 0.0),
    ((12, 30), 0.0),
    ((12, 31), 0.0),
    ((12, 32), 0.0),
    ((12, 33), 0.0),
    ((13, 14), 0.0),
    ((13, 15), 0.0),
    ((13, 16), 0.0),
    ((13, 17), 0.9990009990009991),
    ((13, 18), 0.0),
    ((13, 19), 0.0),
    ((13, 20), 0.0),
    ((13, 21), 0.9990009990009991),
    ((13, 22), 0.0),
    ((13, 23), 0.0),
    ((13, 24), 0.0),
    ((13, 25), 0.0),
    ((13, 26), 0.0),
    ((13, 27), 0.0),
    ((13, 28), 0.0),
    ((13, 29), 0.0),
    ((13, 30), 0.0),
    ((13, 31), 0.0),
    ((13, 32), 0.0),
    ((14, 15), 2000.0),
    ((14, 16), 0.0),
    ((14, 17), 0.0),
    ((14, 18), 2000.0),
    ((14, 19), 0.0),
    ((14, 20), 2000.0),
    ((14, 21), 0.0),
    ((14, 22), 2000.0),
    ((14, 23), 2000.0),
    ((14, 24), 0.0),
    ((14, 25), 0.0),
    ((14, 26), 1000.0),
    ((14, 27), 1000.0),
    ((14, 28), 1000.0),
    ((14, 29), 2000.0),
    ((14, 30), 2000.0),
    ((14, 31), 2000.0),
    ((15, 16), 0.0),
    ((15, 17), 0.0),
    ((15, 18), 2000.0),
    ((15, 19), 0.0),
    ((15, 20), 2000.0),
    ((15, 21), 0.0),
    ((15, 22), 2000.0),
    ((15, 23), 2000.0),
    ((15, 24), 0.0),
    ((15, 25), 0.0),
    ((15, 26), 1000.0),
    ((15, 27), 1000.0),
    ((15, 28), 1000.0),
    ((15, 29), 2000.0),
    ((15, 30), 2000.0),
    ((15, 31), 2000.0),
    ((16, 17), 0.0),
    ((16, 18), 0.0),
    ((16, 19), 0.0),
    ((16, 20), 0.0),
    ((16, 21), 0.0),
    ((16, 22), 0.0),
    ((16, 23), 0.0),
    ((16, 24), 0.0),
    ((16, 25), 0.0),
    ((16, 26), 0.0),
    ((16, 27), 0.0),
    ((16, 28), 0.0),
    ((16, 29), 0.0),
    ((16, 30), 0.0),
    ((16, 31), 0.0),
    ((16, 32), 0.0),
    ((16, 33), 0.0),
    ((17, 18), 0.0),
    ((17, 19), 0.0),
    ((17, 20), 0.0),
    ((17, 21), 0.9990009990009991),
    ((17, 22), 0.0),
    ((17, 23), 0.0),
    ((17, 24), 0.0),
    ((17, 25), 0.0),
    ((17, 26), 0.0),
    ((17, 27), 0.0),
    ((17, 28), 0.0),
    ((17, 29), 0.0),
    ((17, 30), 0.0),
    ((17, 31), 0.0),
    ((17, 32), 0.0),
    ((17, 33), 0.0),
    ((18, 19), 0.0),
    ((18, 20), 2000.0),
    ((18, 21), 0.0),
    ((18, 22), 2000.0),
    ((18, 23), 2000.0),
    ((18, 24), 0.0),
    ((18, 25), 0.0),
    ((18, 26), 1000.0),
    ((18, 27), 1000.0),
    ((18, 28), 1000.0),
    ((18, 29), 2000.0),
    ((18, 30), 2000.0),
    ((18, 31), 2000.0),
    ((19, 20), 0.0),
    ((19, 21), 0.0),
    ((19, 22), 0.0),
    ((19, 23), 0.0),
    ((19, 24), 0.0),
    ((19, 25), 0.0),
    ((19, 26), 0.0),
    ((19, 27), 0.0),
    ((19, 28), 0.0),
    ((19, 29), 0.0),
    ((19, 30), 0.0),
    ((19, 31), 0.0),
    ((19, 32), 0.0),
    ((20, 21), 0.0),
    ((20, 22), 2000.0),
    ((20, 23), 2000.0),
    ((20, 24), 0.0),
    ((20, 25), 0.0),
    ((20, 26), 1000.0),
    ((20, 27), 1000.0),
    ((20, 28), 1000.0),
    ((20, 29), 2000.0),
    ((20, 30), 2000.0),
    ((20, 31), 2000.0),
    ((21, 22), 0.0),
    ((21, 23), 0.0),
    ((21, 24), 0.0),
    ((21, 25), 0.0),
    ((21, 26), 0.0),
    ((21, 27), 0.0),
    ((21, 28), 0.0),
    ((21, 29), 0.0),
    ((21, 30), 0.0),
    ((21, 31), 0.0),
    ((21, 32), 0.0),
    ((21, 33), 0.0),
    ((22, 23), 2000.0),
    ((22, 24), 0.0),
    ((22, 25), 0.0),
    ((22, 26), 1000.0),
    ((22, 27), 1000.0),
    ((22, 28), 1000.0),
    ((22, 29), 2000.0),
    ((22, 30), 2000.0),
    ((22, 31), 2000.0),
    ((23, 24), 2000.0),
    ((23, 26), 2000.0),
    ((23, 28), 1000.0),
    ((23, 30), 2000.0),
    ((23, 31), 3000.0),
    ((24, 26), 0.0),
    ((24, 28), 1000.0),
    ((24, 29), 0.0),
    ((24, 30), 0.0),
    ((24, 32), 1000.0),
    ((24, 33), 2000.0),
    ((25, 26), 0.0),
    ((25, 27), 2000.0),
    ((25, 28), 1000.0),
    ((25, 29), 1000.0),
    ((25, 30), 0.0),
    ((25, 32), 2000.0),
    ((25, 33), 2000.0),
    ((26, 27), 1000.0),
    ((26, 28), 1000.0),
    ((26, 30), 1000.0),
    ((26, 31), 1000.0),
    ((26, 32), 2000.0),
    ((27, 28), 0.9990009990009991),
    ((27, 29), 2000.0),
    ((27, 30), 1000.0),
    ((27, 31), 2000.0),
    ((27, 32), 1.9980019980019983),
    ((28, 29), 1000.0),
    ((28, 30), 1000.0),
    ((28, 32), 1.9980019980019983),
    ((29, 30), 2000.0),
    ((29, 31), 2000.0),
    ((30, 31), 2000.0)
  ]
  for i in 0..<len(got):
    check (got[i].edge == expected[i].edge and equal(got[i].prediction, expected[i].prediction)) == true

# -------------------------------------------------------------------
# Lowest Common Ancestor
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Matching
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Minors
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Maximal Independent Set
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Non-randomness
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Moral
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Node Classification
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Operators
# -------------------------------------------------------------------

test "complement of graph":
  let karate = karateClubGraph()
  let got = complement(karate)
  check got.isDirected() == false
  check got.numberOfNodes() == 34
  check got.numberOfEdges() == 483
  check got.edges() == @[(0, 9), (0, 14), (0, 15), (0, 16), (0, 18), (0, 20), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 32), (0, 33), (1, 4), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 14), (1, 15), (1, 16), (1, 18), (1, 20), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 31), (1, 32), (1, 33), (2, 4), (2, 5), (2, 6), (2, 10), (2, 11), (2, 12), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (2, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 29), (2, 30), (2, 31), (2, 33), (3, 4), (3, 5), (3, 6), (3, 8), (3, 9), (3, 10), (3, 11), (3, 14), (3, 15), (3, 16), (3, 17), (3, 18), (3, 19), (3, 20), (3, 21), (3, 22), (3, 23), (3, 24), (3, 25), (3, 26), (3, 27), (3, 28), (3, 29), (3, 30), (3, 31), (3, 32), (3, 33), (4, 5), (4, 7), (4, 8), (4, 9), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (4, 24), (4, 25), (4, 26), (4, 27), (4, 28), (4, 29), (4, 30), (4, 31), (4, 32), (4, 33), (5, 7), (5, 8), (5, 9), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21), (5, 22), (5, 23), (5, 24), (5, 25), (5, 26), (5, 27), (5, 28), (5, 29), (5, 30), (5, 31), (5, 32), (5, 33), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (6, 14), (6, 15), (6, 17), (6, 18), (6, 19), (6, 20), (6, 21), (6, 22), (6, 23), (6, 24), (6, 25), (6, 26), (6, 27), (6, 28), (6, 29), (6, 30), (6, 31), (6, 32), (6, 33), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20), (7, 21), (7, 22), (7, 23), (7, 24), (7, 25), (7, 26), (7, 27), (7, 28), (7, 29), (7, 30), (7, 31), (7, 32), (7, 33), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (8, 24), (8, 25), (8, 26), (8, 27), (8, 28), (8, 29), (8, 31), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 24), (9, 25), (9, 26), (9, 27), (9, 28), (9, 29), (9, 30), (9, 31), (9, 32), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (10, 24), (10, 25), (10, 26), (10, 27), (10, 28), (10, 29), (10, 30), (10, 31), (10, 32), (10, 33), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 20), (11, 21), (11, 22), (11, 23), (11, 24), (11, 25), (11, 26), (11, 27), (11, 28), (11, 29), (11, 30), (11, 31), (11, 32), (11, 33), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (12, 24), (12, 25), (12, 26), (12, 27), (12, 28), (12, 29), (12, 30), (12, 31), (12, 32), (12, 33), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 21), (13, 22), (13, 23), (13, 24), (13, 25), (13, 26), (13, 27), (13, 28), (13, 29), (13, 30), (13, 31), (13, 32), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (14, 25), (14, 26), (14, 27), (14, 28), (14, 29), (14, 30), (14, 31), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (15, 25), (15, 26), (15, 27), (15, 28), (15, 29), (15, 30), (15, 31), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 23), (16, 24), (16, 25), (16, 26), (16, 27), (16, 28), (16, 29), (16, 30), (16, 31), (16, 32), (16, 33), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (17, 24), (17, 25), (17, 26), (17, 27), (17, 28), (17, 29), (17, 30), (17, 31), (17, 32), (17, 33), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (18, 25), (18, 26), (18, 27), (18, 28), (18, 29), (18, 30), (18, 31), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (19, 25), (19, 26), (19, 27), (19, 28), (19, 29), (19, 30), (19, 31), (19, 32), (20, 21), (20, 22), (20, 23), (20, 24), (20, 25), (20, 26), (20, 27), (20, 28), (20, 29), (20, 30), (20, 31), (21, 22), (21, 23), (21, 24), (21, 25), (21, 26), (21, 27), (21, 28), (21, 29), (21, 30), (21, 31), (21, 32), (21, 33), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (22, 28), (22, 29), (22, 30), (22, 31), (23, 24), (23, 26), (23, 28), (23, 30), (23, 31), (24, 26), (24, 28), (24, 29), (24, 30), (24, 32), (24, 33), (25, 26), (25, 27), (25, 28), (25, 29), (25, 30), (25, 32), (25, 33), (26, 27), (26, 28), (26, 30), (26, 31), (26, 32), (27, 28), (27, 29), (27, 30), (27, 31), (27, 32), (28, 29), (28, 30), (28, 32), (29, 30), (29, 31), (30, 31)]

test "complement of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = complement(dkarate)
  check got.isDirected() == true
  check got.numberOfNodes() == 34
  check got.numberOfEdges() == 1044
  check got.edges() == @[(0, 9), (0, 14), (0, 15), (0, 16), (0, 18), (0, 20), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 32), (0, 33), (1, 0), (1, 4), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 14), (1, 15), (1, 16), (1, 18), (1, 20), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 31), (1, 32), (1, 33), (2, 0), (2, 1), (2, 4), (2, 5), (2, 6), (2, 10), (2, 11), (2, 12), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (2, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 29), (2, 30), (2, 31), (2, 33), (3, 0), (3, 1), (3, 2), (3, 4), (3, 5), (3, 6), (3, 8), (3, 9), (3, 10), (3, 11), (3, 14), (3, 15), (3, 16), (3, 17), (3, 18), (3, 19), (3, 20), (3, 21), (3, 22), (3, 23), (3, 24), (3, 25), (3, 26), (3, 27), (3, 28), (3, 29), (3, 30), (3, 31), (3, 32), (3, 33), (4, 0), (4, 1), (4, 2), (4, 3), (4, 5), (4, 7), (4, 8), (4, 9), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (4, 24), (4, 25), (4, 26), (4, 27), (4, 28), (4, 29), (4, 30), (4, 31), (4, 32), (4, 33), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 7), (5, 8), (5, 9), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21), (5, 22), (5, 23), (5, 24), (5, 25), (5, 26), (5, 27), (5, 28), (5, 29), (5, 30), (5, 31), (5, 32), (5, 33), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (6, 14), (6, 15), (6, 17), (6, 18), (6, 19), (6, 20), (6, 21), (6, 22), (6, 23), (6, 24), (6, 25), (6, 26), (6, 27), (6, 28), (6, 29), (6, 30), (6, 31), (6, 32), (6, 33), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20), (7, 21), (7, 22), (7, 23), (7, 24), (7, 25), (7, 26), (7, 27), (7, 28), (7, 29), (7, 30), (7, 31), (7, 32), (7, 33), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (8, 24), (8, 25), (8, 26), (8, 27), (8, 28), (8, 29), (8, 31), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 24), (9, 25), (9, 26), (9, 27), (9, 28), (9, 29), (9, 30), (9, 31), (9, 32), (10, 0), (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 9), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (10, 24), (10, 25), (10, 26), (10, 27), (10, 28), (10, 29), (10, 30), (10, 31), (10, 32), (10, 33), (11, 0), (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 7), (11, 8), (11, 9), (11, 10), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 20), (11, 21), (11, 22), (11, 23), (11, 24), (11, 25), (11, 26), (11, 27), (11, 28), (11, 29), (11, 30), (11, 31), (11, 32), (11, 33), (12, 0), (12, 1), (12, 2), (12, 3), (12, 4), (12, 5), (12, 6), (12, 7), (12, 8), (12, 9), (12, 10), (12, 11), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (12, 24), (12, 25), (12, 26), (12, 27), (12, 28), (12, 29), (12, 30), (12, 31), (12, 32), (12, 33), (13, 0), (13, 1), (13, 2), (13, 3), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 9), (13, 10), (13, 11), (13, 12), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 21), (13, 22), (13, 23), (13, 24), (13, 25), (13, 26), (13, 27), (13, 28), (13, 29), (13, 30), (13, 31), (13, 32), (14, 0), (14, 1), (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), (14, 12), (14, 13), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (14, 25), (14, 26), (14, 27), (14, 28), (14, 29), (14, 30), (14, 31), (15, 0), (15, 1), (15, 2), (15, 3), (15, 4), (15, 5), (15, 6), (15, 7), (15, 8), (15, 9), (15, 10), (15, 11), (15, 12), (15, 13), (15, 14), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (15, 25), (15, 26), (15, 27), (15, 28), (15, 29), (15, 30), (15, 31), (16, 0), (16, 1), (16, 2), (16, 3), (16, 4), (16, 5), (16, 6), (16, 7), (16, 8), (16, 9), (16, 10), (16, 11), (16, 12), (16, 13), (16, 14), (16, 15), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 23), (16, 24), (16, 25), (16, 26), (16, 27), (16, 28), (16, 29), (16, 30), (16, 31), (16, 32), (16, 33), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7), (17, 8), (17, 9), (17, 10), (17, 11), (17, 12), (17, 13), (17, 14), (17, 15), (17, 16), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (17, 24), (17, 25), (17, 26), (17, 27), (17, 28), (17, 29), (17, 30), (17, 31), (17, 32), (17, 33), (18, 0), (18, 1), (18, 2), (18, 3), (18, 4), (18, 5), (18, 6), (18, 7), (18, 8), (18, 9), (18, 10), (18, 11), (18, 12), (18, 13), (18, 14), (18, 15), (18, 16), (18, 17), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (18, 25), (18, 26), (18, 27), (18, 28), (18, 29), (18, 30), (18, 31), (19, 0), (19, 1), (19, 2), (19, 3), (19, 4), (19, 5), (19, 6), (19, 7), (19, 8), (19, 9), (19, 10), (19, 11), (19, 12), (19, 13), (19, 14), (19, 15), (19, 16), (19, 17), (19, 18), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (19, 25), (19, 26), (19, 27), (19, 28), (19, 29), (19, 30), (19, 31), (19, 32), (20, 0), (20, 1), (20, 2), (20, 3), (20, 4), (20, 5), (20, 6), (20, 7), (20, 8), (20, 9), (20, 10), (20, 11), (20, 12), (20, 13), (20, 14), (20, 15), (20, 16), (20, 17), (20, 18), (20, 19), (20, 21), (20, 22), (20, 23), (20, 24), (20, 25), (20, 26), (20, 27), (20, 28), (20, 29), (20, 30), (20, 31), (21, 0), (21, 1), (21, 2), (21, 3), (21, 4), (21, 5), (21, 6), (21, 7), (21, 8), (21, 9), (21, 10), (21, 11), (21, 12), (21, 13), (21, 14), (21, 15), (21, 16), (21, 17), (21, 18), (21, 19), (21, 20), (21, 22), (21, 23), (21, 24), (21, 25), (21, 26), (21, 27), (21, 28), (21, 29), (21, 30), (21, 31), (21, 32), (21, 33), (22, 0), (22, 1), (22, 2), (22, 3), (22, 4), (22, 5), (22, 6), (22, 7), (22, 8), (22, 9), (22, 10), (22, 11), (22, 12), (22, 13), (22, 14), (22, 15), (22, 16), (22, 17), (22, 18), (22, 19), (22, 20), (22, 21), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (22, 28), (22, 29), (22, 30), (22, 31), (23, 0), (23, 1), (23, 2), (23, 3), (23, 4), (23, 5), (23, 6), (23, 7), (23, 8), (23, 9), (23, 10), (23, 11), (23, 12), (23, 13), (23, 14), (23, 15), (23, 16), (23, 17), (23, 18), (23, 19), (23, 20), (23, 21), (23, 22), (23, 24), (23, 26), (23, 28), (23, 30), (23, 31), (24, 0), (24, 1), (24, 2), (24, 3), (24, 4), (24, 5), (24, 6), (24, 7), (24, 8), (24, 9), (24, 10), (24, 11), (24, 12), (24, 13), (24, 14), (24, 15), (24, 16), (24, 17), (24, 18), (24, 19), (24, 20), (24, 21), (24, 22), (24, 23), (24, 26), (24, 28), (24, 29), (24, 30), (24, 32), (24, 33), (25, 0), (25, 1), (25, 2), (25, 3), (25, 4), (25, 5), (25, 6), (25, 7), (25, 8), (25, 9), (25, 10), (25, 11), (25, 12), (25, 13), (25, 14), (25, 15), (25, 16), (25, 17), (25, 18), (25, 19), (25, 20), (25, 21), (25, 22), (25, 23), (25, 24), (25, 26), (25, 27), (25, 28), (25, 29), (25, 30), (25, 32), (25, 33), (26, 0), (26, 1), (26, 2), (26, 3), (26, 4), (26, 5), (26, 6), (26, 7), (26, 8), (26, 9), (26, 10), (26, 11), (26, 12), (26, 13), (26, 14), (26, 15), (26, 16), (26, 17), (26, 18), (26, 19), (26, 20), (26, 21), (26, 22), (26, 23), (26, 24), (26, 25), (26, 27), (26, 28), (26, 30), (26, 31), (26, 32), (27, 0), (27, 1), (27, 2), (27, 3), (27, 4), (27, 5), (27, 6), (27, 7), (27, 8), (27, 9), (27, 10), (27, 11), (27, 12), (27, 13), (27, 14), (27, 15), (27, 16), (27, 17), (27, 18), (27, 19), (27, 20), (27, 21), (27, 22), (27, 23), (27, 24), (27, 25), (27, 26), (27, 28), (27, 29), (27, 30), (27, 31), (27, 32), (28, 0), (28, 1), (28, 2), (28, 3), (28, 4), (28, 5), (28, 6), (28, 7), (28, 8), (28, 9), (28, 10), (28, 11), (28, 12), (28, 13), (28, 14), (28, 15), (28, 16), (28, 17), (28, 18), (28, 19), (28, 20), (28, 21), (28, 22), (28, 23), (28, 24), (28, 25), (28, 26), (28, 27), (28, 29), (28, 30), (28, 32), (29, 0), (29, 1), (29, 2), (29, 3), (29, 4), (29, 5), (29, 6), (29, 7), (29, 8), (29, 9), (29, 10), (29, 11), (29, 12), (29, 13), (29, 14), (29, 15), (29, 16), (29, 17), (29, 18), (29, 19), (29, 20), (29, 21), (29, 22), (29, 23), (29, 24), (29, 25), (29, 26), (29, 27), (29, 28), (29, 30), (29, 31), (30, 0), (30, 1), (30, 2), (30, 3), (30, 4), (30, 5), (30, 6), (30, 7), (30, 8), (30, 9), (30, 10), (30, 11), (30, 12), (30, 13), (30, 14), (30, 15), (30, 16), (30, 17), (30, 18), (30, 19), (30, 20), (30, 21), (30, 22), (30, 23), (30, 24), (30, 25), (30, 26), (30, 27), (30, 28), (30, 29), (30, 31), (31, 0), (31, 1), (31, 2), (31, 3), (31, 4), (31, 5), (31, 6), (31, 7), (31, 8), (31, 9), (31, 10), (31, 11), (31, 12), (31, 13), (31, 14), (31, 15), (31, 16), (31, 17), (31, 18), (31, 19), (31, 20), (31, 21), (31, 22), (31, 23), (31, 24), (31, 25), (31, 26), (31, 27), (31, 28), (31, 29), (31, 30), (32, 0), (32, 1), (32, 2), (32, 3), (32, 4), (32, 5), (32, 6), (32, 7), (32, 8), (32, 9), (32, 10), (32, 11), (32, 12), (32, 13), (32, 14), (32, 15), (32, 16), (32, 17), (32, 18), (32, 19), (32, 20), (32, 21), (32, 22), (32, 23), (32, 24), (32, 25), (32, 26), (32, 27), (32, 28), (32, 29), (32, 30), (32, 31), (33, 0), (33, 1), (33, 2), (33, 3), (33, 4), (33, 5), (33, 6), (33, 7), (33, 8), (33, 9), (33, 10), (33, 11), (33, 12), (33, 13), (33, 14), (33, 15), (33, 16), (33, 17), (33, 18), (33, 19), (33, 20), (33, 21), (33, 22), (33, 23), (33, 24), (33, 25), (33, 26), (33, 27), (33, 28), (33, 29), (33, 30), (33, 31), (33, 32)]

test "reverse directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = reverse(dkarate)
  check got.isDirected() == true
  check got.numberOfNodes() == 34
  check got.numberOfEdges() == 78
  check got.edges() == @[(1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2), (4, 0), (5, 0), (6, 0), (6, 4), (6, 5), (7, 0), (7, 1), (7, 2), (7, 3), (8, 0), (8, 2), (9, 2), (10, 0), (10, 4), (10, 5), (11, 0), (12, 0), (12, 3), (13, 0), (13, 1), (13, 2), (13, 3), (16, 5), (16, 6), (17, 0), (17, 1), (19, 0), (19, 1), (21, 0), (21, 1), (25, 23), (25, 24), (27, 2), (27, 23), (27, 24), (28, 2), (29, 23), (29, 26), (30, 1), (30, 8), (31, 0), (31, 24), (31, 25), (31, 28), (32, 2), (32, 8), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 30), (32, 31), (33, 8), (33, 9), (33, 13), (33, 14), (33, 15), (33, 18), (33, 19), (33, 20), (33, 22), (33, 23), (33, 26), (33, 27), (33, 28), (33, 29), (33, 30), (33, 31), (33, 32)]

test "reverse directed graph in place":
  var dkarate = newDiGraph(karateClubGraph().edges())
  reverseInplace(dkarate)
  check dkarate.isDirected() == true
  check dkarate.numberOfNodes() == 34
  check dkarate.numberOfEdges() == 78
  check dkarate.edges() == @[(1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2), (4, 0), (5, 0), (6, 0), (6, 4), (6, 5), (7, 0), (7, 1), (7, 2), (7, 3), (8, 0), (8, 2), (9, 2), (10, 0), (10, 4), (10, 5), (11, 0), (12, 0), (12, 3), (13, 0), (13, 1), (13, 2), (13, 3), (16, 5), (16, 6), (17, 0), (17, 1), (19, 0), (19, 1), (21, 0), (21, 1), (25, 23), (25, 24), (27, 2), (27, 23), (27, 24), (28, 2), (29, 23), (29, 26), (30, 1), (30, 8), (31, 0), (31, 24), (31, 25), (31, 28), (32, 2), (32, 8), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 30), (32, 31), (33, 8), (33, 9), (33, 13), (33, 14), (33, 15), (33, 18), (33, 19), (33, 20), (33, 22), (33, 23), (33, 26), (33, 27), (33, 28), (33, 29), (33, 30), (33, 31), (33, 32)]

test "compose graphs":
  let G = newGraph(@[(1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 3), (3, 5), (3, 6), (3, 7)])
  let R = compose(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 7
  check R.numberOfEdges() == 6
  check R.edges() == @[(1, 2), (1, 3), (1, 4), (3, 5), (3, 6), (3, 7)]

test "compose directed graphs":
  let DG = newDiGraph(@[(1, 2), (1, 3), (1, 4)])
  let DH = newDiGraph(@[(3, 1), (3, 5), (3, 6), (3, 7)])
  let DR = compose(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 7
  check DR.numberOfEdges() == 7
  check DR.edges() == @[(1, 2), (1, 3), (1, 4), (3, 1), (3, 5), (3, 6), (3, 7)]

test "try to union graphs":
  let G = newGraph(@[(1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 3), (3, 5), (3, 6), (3, 7)])
  try:
    discard compose(G, H)
  except NNError as e:
    check e.msg == "nodes sets of G and H are not disjoint"

test "try to union directed graphs":
  let DG = newDiGraph(@[(1, 2), (1, 3), (1, 4)])
  let DH = newDiGraph(@[(3, 1), (3, 5), (3, 6), (3, 7)])
  try:
    discard compose(DG, DH)
  except NNError as e:
    check e.msg == "nodes sets of DG and DH are not disjoint"

test "union disjoint graphs":
  let G = newGraph(@[1, 2, 3, 4])
  G.addEdgesFrom(@[(1, 2), (1, 3), (2, 4), (3, 4)])
  let H = newGraph(@[5, 6, 7])
  H.addEdgesFrom(@[(5, 6)])
  let R = compose(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 7
  check R.numberOfEdges() == 5
  check R.edges() == @[(1, 2), (1, 3), (2, 4), (3, 4), (5, 6)]

test "union disjoin directed graphs":
  let DG = newDiGraph(@[1, 2, 3, 4])
  DG.addEdgesFrom(@[(1, 2), (1, 3), (2, 4), (3, 4)])
  let DH = newDiGraph(@[5, 6, 7])
  DH.addEdgesFrom(@[(5, 6)])
  let DR = compose(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 7
  check DR.numberOfEdges() == 5
  check DR.edges() == @[(1, 2), (1, 3), (2, 4), (3, 4), (5, 6)]

test "try to union graphs and success":
  let G = newGraph(@[(1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 3), (3, 5), (3, 6), (3, 7)])
  let R = disjointUnion(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 9
  check R.numberOfEdges() == 7
  check R.edges() == @[(0, 1), (0, 2), (0, 3), (4, 5), (5, 6), (5, 7), (5, 8)]

test "try to union directed graphs and success":
  let DG = newDiGraph(@[(1, 2), (1, 3), (1, 4)])
  let DH = newDiGraph(@[(3, 1), (3, 5), (3, 6), (3, 7)])
  let DR = disjointUnion(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 9
  check DR.numberOfEdges() == 7
  check DR.edges() == @[(0, 1), (0, 2), (0, 3), (5, 4), (5, 6), (5, 7), (5, 8)]

test "intersection of graphs":
  let G = newGraph(@[(1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 3), (3, 5), (3, 6), (3, 7)])
  let R = intersection(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 2
  check R.numberOfEdges() == 1
  check R.edges() == @[(1, 3)]

test "intersection of directed graphs":
  let DG = newDiGraph(@[(1, 2), (1, 3), (1, 4)])
  let DH = newDiGraph(@[(1, 2), (3, 1), (3, 5), (3, 6), (3, 7)])
  let DR = intersection(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 3
  check DR.numberOfEdges() == 1
  check DR.nodes() == @[1, 2, 3]
  check DR.edges() == @[(1, 2)]

test "difference of graphs":
  let G = newGraph(@[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)])
  let H = newGraph(@[(0, 3), (1, 2)])
  let R = difference(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 4
  check R.numberOfEdges() == 4
  check R.nodes() == @[0, 1, 2, 3]
  check R.edges() == @[(0, 1), (0, 2), (1, 3), (2, 3)]

test "difference of directed graphs":
  let DG = newDiGraph(@[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3), (3, 2)])
  let DH = newDiGraph(@[(0, 3), (1, 2)])
  let DR = difference(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 4
  check DR.numberOfEdges() == 5
  check DR.nodes() == @[0, 1, 2, 3]
  check DR.edges() == @[(0, 1), (0, 2), (1, 3), (2, 3), (3, 2)]

test "symmetric difference of graphs":
  let G = newGraph(@[(0, 1), (0, 3), (1, 2)])
  let H = newGraph(@[(0, 2), (0, 3), (1, 2)])
  let R = symmetricDifference(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 3
  check R.numberOfEdges() == 2
  check R.nodes() == @[0, 1, 2]
  check R.edges() == @[(0, 1), (0, 2)]

test "symmetric difference of directed graphs":
  let DG = newDiGraph(@[(0, 1), (0, 3), (1, 2)])
  let DH = newDiGraph(@[(0, 2), (0, 3), (1, 2), (2, 1)])
  let DR = symmetricDifference(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 3
  check DR.numberOfEdges() == 3
  check DR.nodes() == @[0, 1, 2]
  check DR.edges() == @[(0, 1), (0, 2), (2, 1)]

test "full join of graphs":
  let G = newGraph(@[(0, 3), (1, 2), (1, 3)])
  let H = newGraph(@[(4, 6), (5, 7), (6, 7)])
  let R = fullJoin(G, H)
  check R.isDirected() == false
  check R.numberOfNodes() == 8
  check R.numberOfEdges() == 22
  check R.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7]
  check R.edges() == @[(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 6), (5, 7), (6, 7)]

test "full join of directed graphs":
  let DG = newDiGraph(@[(0, 3), (1, 2), (1, 3)])
  let DH = newDiGraph(@[(4, 6), (5, 7), (6, 7)])
  let DR = fullJoin(DG, DH)
  check DR.isDirected() == true
  check DR.numberOfNodes() == 8
  check DR.numberOfEdges() == 38
  check DR.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7]
  check DR.edges() == @[(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 0), (4, 1), (4, 2), (4, 3), (4, 6), (5, 0), (5, 1), (5, 2), (5, 3), (5, 7), (6, 0), (6, 1), (6, 2), (6, 3), (6, 7), (7, 0), (7, 1), (7, 2), (7, 3)]

test "compose all graphs":
  let G = newGraph(@[(0, 1), (1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let I = newGraph(@[(4, 7), (7, 8), (7, 9), (7, 10)])
  let R = composeAll(@[G, H, I])
  check R.isDirected() == false
  check R.numberOfNodes() == 11
  check R.numberOfEdges() == 10
  check R.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  check R.edges() == @[(0, 1), (1, 2), (1, 3), (1, 4), (4, 5), (4, 6), (4, 7), (7, 8), (7, 9), (7, 10)]

test "compose all directed graphs":
  let DG = newDiGraph(@[(0, 1), (1, 2), (1, 3), (1, 4), (4, 1)])
  let DH = newDiGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let DI = newDiGraph(@[(4, 7), (7, 8), (7, 9), (7, 10)])
  let DR = composeAll(@[DG, DH, DI])
  check DR.isDirected() == true
  check DR.numberOfNodes() == 11
  check DR.numberOfEdges() == 11
  check DR.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  check DR.edges() == @[(0, 1), (1, 2), (1, 3), (1, 4), (4, 1), (4, 5), (4, 6), (4, 7), (7, 8), (7, 9), (7, 10)]

test "union all graphs":
  let G = newGraph(@[(1, 2), (2, 3)])
  let H = newGraph(@[(4, 5)])
  let I = newGraph(@[(6, 7), (7, 8), (8, 9)])
  let R = unionAll(@[G, H, I])
  check R.isDirected() == false
  check R.numberOfNodes() == 9
  check R.numberOfEdges() == 6
  check R.nodes() == @[1, 2, 3, 4, 5, 6, 7, 8, 9]
  check R.edges() == @[(1, 2), (2, 3), (4, 5), (6, 7), (7, 8), (8, 9)]

test "union all directed graphs":
  let DG = newDiGraph(@[(1, 2), (2, 3)])
  let DH = newDiGraph(@[(4, 5)])
  let DI = newDiGraph(@[(6, 7), (7, 8), (8, 9)])
  let DR = unionAll(@[DG, DH, DI])
  check DR.isDirected() == true
  check DR.numberOfNodes() == 9
  check DR.numberOfEdges() == 6
  check DR.nodes() == @[1, 2, 3, 4, 5, 6, 7, 8, 9]
  check DR.edges() == @[(1, 2), (2, 3), (4, 5), (6, 7), (7, 8), (8, 9)]

test "union disjoint all graphs":
  let G = newGraph(@[(0, 1), (1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let I = newGraph(@[(4, 7), (7, 8), (7, 9), (7, 10)])
  let R = disjointUnionAll(@[G, H, I])
  check R.isDirected() == false
  check R.numberOfNodes() == 15
  check R.numberOfEdges() == 12
  check R.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
  check R.edges() == @[(0, 1), (1, 2), (1, 3), (1, 4), (5, 6), (6, 7), (6, 8), (6, 9), (10, 11), (11, 12), (11, 13), (11, 14)]

test "union disjoint all directed graphs":
  let DG = newDiGraph(@[(0, 1), (1, 2), (1, 3), (1, 4), (4, 1)])
  let DH = newDiGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let DI = newDiGraph(@[(4, 7), (7, 8), (7, 9), (7, 10)])
  let DR = disjointUnionAll(@[DG, DH, DI])
  check DR.isDirected() == true
  check DR.numberOfNodes() == 15
  check DR.numberOfEdges() == 13
  check DR.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
  check DR.edges() == @[(0, 1), (1, 2), (1, 3), (1, 4), (4, 1), (5, 6), (6, 7), (6, 8), (6, 9), (10, 11), (11, 12), (11, 13), (11, 14)]

test "intersection all graphs":
  let G = newGraph(@[(0, 1), (1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let I = newGraph(@[(1, 4), (4, 7), (7, 8), (7, 9), (7, 10)])
  let R = intersectionAll(@[G, H, I])
  check R.isDirected() == false
  check R.numberOfNodes() == 2
  check R.numberOfEdges() == 1
  check R.nodes() == @[1, 4]
  check R.edges() == @[(1, 4)]

test "intersection all directed graphs":
  let DG = newDiGraph(@[(0, 1), (1, 2), (1, 3), (1, 4), (4, 1)])
  let DH = newDiGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let DI = newDiGraph(@[(1, 4), (4, 7), (7, 8), (7, 9), (7, 10)])
  let DR = intersectionAll(@[DG, DH, DI])
  check DR.isDirected() == true
  check DR.numberOfNodes() == 2
  check DR.numberOfEdges() == 1
  check DR.nodes() == @[1, 4]
  check DR.edges() == @[(1, 4)]

test "try to apply intersectionAll to empty graph and fail":
  let G = newGraph(@[(0, 1), (1, 2), (1, 3), (1, 4)])
  let H = newGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let I = newGraph()
  try:
    discard intersectionAll(@[G, H, I])
  except NNError as e:
    check e.msg == "cannot apply intersectionAll to empty graph sequence"

test "try to apply intersectionAll to empty directed graph and fail":
  let DG = newDiGraph(@[(0, 1), (1, 2), (1, 3), (1, 4)])
  let DH = newDiGraph(@[(1, 4), (4, 5), (4, 6), (4, 7)])
  let DI = newDiGraph()
  try:
    discard intersectionAll(@[DG, DH, DI])
  except NNError as e:
    check e.msg == "cannot apply intersectionAll to empty directed graph sequence"

test "power product of graph":
  let G = pathGraph(4)
  let G2 = power(G, 2)
  check G2.isDirected() == false
  check G2.numberOfNodes() == 4
  check G2.numberOfEdges() == 5
  check G2.nodes() == @[0, 1, 2, 3]
  check G2.edges() == @[(0, 1), (0, 2), (1, 2), (1, 3), (2, 3)]
  let G4 = power(G, 4)
  check G4.isDirected() == false
  check G4.numberOfNodes() == 4
  check G4.numberOfEdges() == 6
  check G4.nodes() == @[0, 1, 2, 3]
  check G4.edges() == @[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]

# -------------------------------------------------------------------
# Planarity
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Planar Drawing
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Reciprocity
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Regular
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Rich Club
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Shortest Paths
# -------------------------------------------------------------------

test "single source shortest path length on graph":
  let karate = karateClubGraph()
  let got = karate.singleSourceShortestPathLength(0)
  let expected = {0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 10: 1, 11: 1, 12: 1, 13: 1, 17: 1, 19: 1, 21: 1, 31: 1, 9: 2, 16: 2, 24: 2, 25: 2, 27: 2, 28: 2, 30: 2, 32: 2, 33: 2, 14: 3, 15: 3, 18: 3, 20: 3, 22: 3, 23: 3, 26: 3, 29: 3}.toTable()
  for (node, length) in got.pairs():
    check length == expected[node]

test "single source shortest path length on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = dkarate.singleSourceShortestPathLength(0)
  let expected = {0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 10: 1, 11: 1, 12: 1, 13: 1, 17: 1, 19: 1, 21: 1, 31: 1, 32: 2, 33: 2, 9: 2, 16: 2, 27: 2, 28: 2, 30: 2}.toTable()
  for (node, length) in got.pairs():
    check length == expected[node]

test "single target shortest path length on graph":
  let karate = karateClubGraph()
  let got = karate.singleTargetShortestPathLength(0)
  let expected = {0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 10: 1, 11: 1, 12: 1, 13: 1, 17: 1, 19: 1, 21: 1, 31: 1, 9: 2, 16: 2, 24: 2, 25: 2, 27: 2, 28: 2, 30: 2, 32: 2, 33: 2, 14: 3, 15: 3, 18: 3, 20: 3, 22: 3, 23: 3, 26: 3, 29: 3}.toTable()
  for (node, length) in got.pairs():
    check length == expected[node]

test "single target shortest path length on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = dkarate.singleTargetShortestPathLength(0)
  let expected = {0: 0}.toTable()
  for (node, length) in got.pairs():
    check length == expected[node]

test "all pairs shortest path length on graph":
  let karate = karateClubGraph()
  let got = karate.allPairsShortestPathLength().toSeq()
  let expected = @[(0, { 0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 10: 1, 11: 1, 12: 1, 13: 1, 17: 1, 19: 1, 21: 1, 31: 1, 9: 2, 16: 2, 24: 2, 25: 2, 27: 2, 28: 2, 30: 2, 32: 2, 33: 2, 14: 3, 15: 3, 18: 3, 20: 3, 22: 3, 23: 3, 26: 3, 29: 3 }.toTable()), (1, { 1: 0, 0: 1, 2: 1, 3: 1, 7: 1, 13: 1, 17: 1, 19: 1, 21: 1, 30: 1, 4: 2, 5: 2, 6: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 27: 2, 28: 2, 31: 2, 32: 2, 33: 2, 14: 3, 15: 3, 16: 3, 18: 3, 20: 3, 22: 3, 23: 3, 24: 3, 25: 3, 26: 3, 29: 3 }.toTable()), (2, { 2: 0, 0: 1, 1: 1, 32: 1, 3: 1, 7: 1, 8: 1, 9: 1, 13: 1, 27: 1, 28: 1, 4: 2, 5: 2, 6: 2, 10: 2, 11: 2, 12: 2, 14: 2, 15: 2, 17: 2, 18: 2, 19: 2, 20: 2, 21: 2, 22: 2, 23: 2, 24: 2, 29: 2, 30: 2, 31: 2, 33: 2, 16: 3, 25: 3, 26: 3 }.toTable()), (3, { 3: 0, 0: 1, 1: 1, 2: 1, 7: 1, 12: 1, 13: 1, 4: 2, 5: 2, 6: 2, 8: 2, 9: 2, 10: 2, 11: 2, 17: 2, 19: 2, 21: 2, 27: 2, 28: 2, 30: 2, 31: 2, 32: 2, 33: 2, 14: 3, 15: 3, 16: 3, 18: 3, 20: 3, 22: 3, 23: 3, 24: 3, 25: 3, 26: 3, 29: 3 }.toTable()), (4, { 4: 0, 0: 1, 10: 1, 6: 1, 1: 2, 2: 2, 3: 2, 5: 2, 7: 2, 8: 2, 11: 2, 12: 2, 13: 2, 16: 2, 17: 2, 19: 2, 21: 2, 31: 2, 9: 3, 24: 3, 25: 3, 27: 3, 28: 3, 30: 3, 32: 3, 33: 3, 14: 4, 15: 4, 18: 4, 20: 4, 22: 4, 23: 4, 26: 4, 29: 4 }.toTable()), (5, { 5: 0, 0: 1, 16: 1, 10: 1, 6: 1, 1: 2, 2: 2, 3: 2, 4: 2, 7: 2, 8: 2, 11: 2, 12: 2, 13: 2, 17: 2, 19: 2, 21: 2, 31: 2, 9: 3, 24: 3, 25: 3, 27: 3, 28: 3, 30: 3, 32: 3, 33: 3, 14: 4, 15: 4, 18: 4, 20: 4, 22: 4, 23: 4, 26: 4, 29: 4 }.toTable()), (6, { 6: 0, 0: 1, 16: 1, 4: 1, 5: 1, 1: 2, 2: 2, 3: 2, 7: 2, 8: 2, 10: 2, 11: 2, 12: 2, 13: 2, 17: 2, 19: 2, 21: 2, 31: 2, 9: 3, 24: 3, 25: 3, 27: 3, 28: 3, 30: 3, 32: 3, 33: 3, 14: 4, 15: 4, 18: 4, 20: 4, 22: 4, 23: 4, 26: 4, 29: 4 }.toTable()), (7, { 7: 0, 0: 1, 1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 17: 2, 19: 2, 21: 2, 27: 2, 28: 2, 30: 2, 31: 2, 32: 2, 14: 3, 15: 3, 16: 3, 18: 3, 20: 3, 22: 3, 23: 3, 24: 3, 25: 3, 29: 3, 33: 3, 26: 4 }.toTable()), (8, { 8: 0, 0: 1, 33: 1, 2: 1, 32: 1, 30: 1, 1: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 17: 2, 18: 2, 19: 2, 20: 2, 21: 2, 22: 2, 23: 2, 26: 2, 27: 2, 28: 2, 29: 2, 31: 2, 16: 3, 24: 3, 25: 3 }.toTable()), (9, { 9: 0, 33: 1, 2: 1, 0: 2, 1: 2, 3: 2, 7: 2, 8: 2, 13: 2, 14: 2, 15: 2, 18: 2, 19: 2, 20: 2, 22: 2, 23: 2, 26: 2, 27: 2, 28: 2, 29: 2, 30: 2, 31: 2, 32: 2, 4: 3, 5: 3, 6: 3, 10: 3, 11: 3, 12: 3, 17: 3, 21: 3, 24: 3, 25: 3, 16: 4 }.toTable()), (10, { 10: 0, 0: 1, 4: 1, 5: 1, 1: 2, 2: 2, 3: 2, 6: 2, 7: 2, 8: 2, 11: 2, 12: 2, 13: 2, 16: 2, 17: 2, 19: 2, 21: 2, 31: 2, 9: 3, 24: 3, 25: 3, 27: 3, 28: 3, 30: 3, 32: 3, 33: 3, 14: 4, 15: 4, 18: 4, 20: 4, 22: 4, 23: 4, 26: 4, 29: 4 }.toTable()), (11, { 11: 0, 0: 1, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 10: 2, 12: 2, 13: 2, 17: 2, 19: 2, 21: 2, 31: 2, 9: 3, 16: 3, 24: 3, 25: 3, 27: 3, 28: 3, 30: 3, 32: 3, 33: 3, 14: 4, 15: 4, 18: 4, 20: 4, 22: 4, 23: 4, 26: 4, 29: 4 }.toTable()), (12, { 12: 0, 0: 1, 3: 1, 1: 2, 2: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 10: 2, 11: 2, 13: 2, 17: 2, 19: 2, 21: 2, 31: 2, 9: 3, 16: 3, 24: 3, 25: 3, 27: 3, 28: 3, 30: 3, 32: 3, 33: 3, 14: 4, 15: 4, 18: 4, 20: 4, 22: 4, 23: 4, 26: 4, 29: 4 }.toTable()), (13, { 13: 0, 0: 1, 1: 1, 2: 1, 3: 1, 33: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 14: 2, 15: 2, 17: 2, 18: 2, 19: 2, 20: 2, 21: 2, 22: 2, 23: 2, 26: 2, 27: 2, 28: 2, 29: 2, 30: 2, 31: 2, 32: 2, 16: 3, 24: 3, 25: 3 }.toTable()), (14, { 14: 0, 32: 1, 33: 1, 2: 2, 8: 2, 9: 2, 13: 2, 15: 2, 18: 2, 19: 2, 20: 2, 22: 2, 23: 2, 26: 2, 27: 2, 28: 2, 29: 2, 30: 2, 31: 2, 0: 3, 1: 3, 3: 3, 7: 3, 24: 3, 25: 3, 4: 4, 5: 4, 6: 4, 10: 4, 11: 4, 12: 4, 17: 4, 21: 4, 16: 5 }.toTable()), (15, { 15: 0, 32: 1, 33: 1, 2: 2, 8: 2, 9: 2, 13: 2, 14: 2, 18: 2, 19: 2, 20: 2, 22: 2, 23: 2, 26: 2, 27: 2, 28: 2, 29: 2, 30: 2, 31: 2, 0: 3, 1: 3, 3: 3, 7: 3, 24: 3, 25: 3, 4: 4, 5: 4, 6: 4, 10: 4, 11: 4, 12: 4, 17: 4, 21: 4, 16: 5 }.toTable()), (16, { 16: 0, 5: 1, 6: 1, 0: 2, 4: 2, 10: 2, 1: 3, 2: 3, 3: 3, 7: 3, 8: 3, 11: 3, 12: 3, 13: 3, 17: 3, 19: 3, 21: 3, 31: 3, 9: 4, 24: 4, 25: 4, 27: 4, 28: 4, 30: 4, 32: 4, 33: 4, 14: 5, 15: 5, 18: 5, 20: 5, 22: 5, 23: 5, 26: 5, 29: 5 }.toTable()), (17, { 17: 0, 0: 1, 1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 10: 2, 11: 2, 12: 2, 13: 2, 19: 2, 21: 2, 30: 2, 31: 2, 9: 3, 16: 3, 24: 3, 25: 3, 27: 3, 28: 3, 32: 3, 33: 3, 14: 4, 15: 4, 18: 4, 20: 4, 22: 4, 23: 4, 26: 4, 29: 4 }.toTable()), (18, { 18: 0, 32: 1, 33: 1, 2: 2, 8: 2, 9: 2, 13: 2, 14: 2, 15: 2, 19: 2, 20: 2, 22: 2, 23: 2, 26: 2, 27: 2, 28: 2, 29: 2, 30: 2, 31: 2, 0: 3, 1: 3, 3: 3, 7: 3, 24: 3, 25: 3, 4: 4, 5: 4, 6: 4, 10: 4, 11: 4, 12: 4, 17: 4, 21: 4, 16: 5 }.toTable()), (19, { 19: 0, 0: 1, 1: 1, 33: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 17: 2, 18: 2, 20: 2, 21: 2, 22: 2, 23: 2, 26: 2, 27: 2, 28: 2, 29: 2, 30: 2, 31: 2, 32: 2, 16: 3, 24: 3, 25: 3 }.toTable()), (20, { 20: 0, 32: 1, 33: 1, 2: 2, 8: 2, 9: 2, 13: 2, 14: 2, 15: 2, 18: 2, 19: 2, 22: 2, 23: 2, 26: 2, 27: 2, 28: 2, 29: 2, 30: 2, 31: 2, 0: 3, 1: 3, 3: 3, 7: 3, 24: 3, 25: 3, 4: 4, 5: 4, 6: 4, 10: 4, 11: 4, 12: 4, 17: 4, 21: 4, 16: 5 }.toTable()), (21, { 21: 0, 0: 1, 1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 10: 2, 11: 2, 12: 2, 13: 2, 17: 2, 19: 2, 30: 2, 31: 2, 9: 3, 16: 3, 24: 3, 25: 3, 27: 3, 28: 3, 32: 3, 33: 3, 14: 4, 15: 4, 18: 4, 20: 4, 22: 4, 23: 4, 26: 4, 29: 4 }.toTable()), (22, { 22: 0, 32: 1, 33: 1, 2: 2, 8: 2, 9: 2, 13: 2, 14: 2, 15: 2, 18: 2, 19: 2, 20: 2, 23: 2, 26: 2, 27: 2, 28: 2, 29: 2, 30: 2, 31: 2, 0: 3, 1: 3, 3: 3, 7: 3, 24: 3, 25: 3, 4: 4, 5: 4, 6: 4, 10: 4, 11: 4, 12: 4, 17: 4, 21: 4, 16: 5 }.toTable()), (23, { 23: 0, 32: 1, 33: 1, 25: 1, 27: 1, 29: 1, 2: 2, 8: 2, 9: 2, 13: 2, 14: 2, 15: 2, 18: 2, 19: 2, 20: 2, 22: 2, 24: 2, 26: 2, 28: 2, 30: 2, 31: 2, 0: 3, 1: 3, 3: 3, 7: 3, 4: 4, 5: 4, 6: 4, 10: 4, 11: 4, 12: 4, 17: 4, 21: 4, 16: 5 }.toTable()), (24, { 24: 0, 25: 1, 27: 1, 31: 1, 0: 2, 33: 2, 2: 2, 32: 2, 23: 2, 28: 2, 1: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 17: 3, 18: 3, 19: 3, 20: 3, 21: 3, 22: 3, 26: 3, 29: 3, 30: 3, 16: 4 }.toTable()), (25, { 25: 0, 24: 1, 31: 1, 23: 1, 0: 2, 32: 2, 33: 2, 27: 2, 28: 2, 29: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 17: 3, 18: 3, 19: 3, 20: 3, 21: 3, 22: 3, 26: 3, 30: 3, 16: 4 }.toTable()), (26, { 26: 0, 33: 1, 29: 1, 32: 2, 8: 2, 9: 2, 13: 2, 14: 2, 15: 2, 18: 2, 19: 2, 20: 2, 22: 2, 23: 2, 27: 2, 28: 2, 30: 2, 31: 2, 0: 3, 1: 3, 2: 3, 3: 3, 24: 3, 25: 3, 4: 4, 5: 4, 6: 4, 7: 4, 10: 4, 11: 4, 12: 4, 17: 4, 21: 4, 16: 5 }.toTable()), (27, { 27: 0, 24: 1, 33: 1, 2: 1, 23: 1, 0: 2, 1: 2, 3: 2, 7: 2, 8: 2, 9: 2, 13: 2, 14: 2, 15: 2, 18: 2, 19: 2, 20: 2, 22: 2, 25: 2, 26: 2, 28: 2, 29: 2, 30: 2, 31: 2, 32: 2, 4: 3, 5: 3, 6: 3, 10: 3, 11: 3, 12: 3, 17: 3, 21: 3, 16: 4 }.toTable()), (28, { 28: 0, 33: 1, 2: 1, 31: 1, 0: 2, 1: 2, 3: 2, 7: 2, 8: 2, 9: 2, 13: 2, 14: 2, 15: 2, 18: 2, 19: 2, 20: 2, 22: 2, 23: 2, 24: 2, 25: 2, 26: 2, 27: 2, 29: 2, 30: 2, 32: 2, 4: 3, 5: 3, 6: 3, 10: 3, 11: 3, 12: 3, 17: 3, 21: 3, 16: 4 }.toTable()), (29, { 29: 0, 32: 1, 33: 1, 26: 1, 23: 1, 2: 2, 8: 2, 9: 2, 13: 2, 14: 2, 15: 2, 18: 2, 19: 2, 20: 2, 22: 2, 25: 2, 27: 2, 28: 2, 30: 2, 31: 2, 0: 3, 1: 3, 3: 3, 7: 3, 24: 3, 4: 4, 5: 4, 6: 4, 10: 4, 11: 4, 12: 4, 17: 4, 21: 4, 16: 5 }.toTable()), (30, { 30: 0, 8: 1, 1: 1, 32: 1, 33: 1, 0: 2, 2: 2, 3: 2, 7: 2, 9: 2, 13: 2, 14: 2, 15: 2, 17: 2, 18: 2, 19: 2, 20: 2, 21: 2, 22: 2, 23: 2, 26: 2, 27: 2, 28: 2, 29: 2, 31: 2, 4: 3, 5: 3, 6: 3, 10: 3, 11: 3, 12: 3, 24: 3, 25: 3, 16: 4 }.toTable()), (31, { 31: 0, 0: 1, 32: 1, 33: 1, 24: 1, 25: 1, 28: 1, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 17: 2, 18: 2, 19: 2, 20: 2, 21: 2, 22: 2, 23: 2, 26: 2, 27: 2, 29: 2, 30: 2, 16: 3 }.toTable()), (32, { 32: 0, 33: 1, 2: 1, 8: 1, 14: 1, 15: 1, 18: 1, 20: 1, 22: 1, 23: 1, 29: 1, 30: 1, 31: 1, 0: 2, 1: 2, 3: 2, 7: 2, 9: 2, 13: 2, 19: 2, 24: 2, 25: 2, 26: 2, 27: 2, 28: 2, 4: 3, 5: 3, 6: 3, 10: 3, 11: 3, 12: 3, 17: 3, 21: 3, 16: 4 }.toTable()), (33, { 33: 0, 32: 1, 8: 1, 9: 1, 13: 1, 14: 1, 15: 1, 18: 1, 19: 1, 20: 1, 22: 1, 23: 1, 26: 1, 27: 1, 28: 1, 29: 1, 30: 1, 31: 1, 0: 2, 1: 2, 2: 2, 3: 2, 24: 2, 25: 2, 4: 3, 5: 3, 6: 3, 7: 3, 10: 3, 11: 3, 12: 3, 17: 3, 21: 3, 16: 4 }.toTable())]
  for i in 0..<len(got):
    check got[i] == expected[i]

test "all pairs shortest path length on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = dkarate.allPairsShortestPathLength().toSeq()
  let expected = @[(0, { 0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 10: 1, 11: 1, 12: 1, 13: 1, 17: 1, 19: 1, 21: 1, 31: 1, 32: 2, 33: 2, 9: 2, 16: 2, 27: 2, 28: 2, 30: 2 }.toTable()), (1, { 1: 0, 2: 1, 3: 1, 7: 1, 13: 1, 17: 1, 19: 1, 21: 1, 30: 1, 32: 2, 33: 2, 8: 2, 9: 2, 12: 2, 27: 2, 28: 2, 31: 3 }.toTable()), (2, { 2: 0, 32: 1, 3: 1, 7: 1, 8: 1, 9: 1, 13: 1, 27: 1, 28: 1, 33: 2, 12: 2, 30: 2, 31: 2 }.toTable()), (3, { 3: 0, 12: 1, 13: 1, 7: 1, 33: 2 }.toTable()), (4, { 4: 0, 10: 1, 6: 1, 16: 2 }.toTable()), (5, { 5: 0, 16: 1, 10: 1, 6: 1 }.toTable()), (6, { 6: 0, 16: 1 }.toTable()), (7, { 7: 0 }.toTable()), (8, { 8: 0, 32: 1, 33: 1, 30: 1 }.toTable()), (9, { 9: 0, 33: 1 }.toTable()), (10, { 10: 0 }.toTable()), (11, { 11: 0 }.toTable()), (12, { 12: 0 }.toTable()), (13, { 13: 0, 33: 1 }.toTable()), (14, { 14: 0, 32: 1, 33: 1 }.toTable()), (15, { 15: 0, 32: 1, 33: 1 }.toTable()), (16, { 16: 0 }.toTable()), (17, { 17: 0 }.toTable()), (18, { 18: 0, 32: 1, 33: 1 }.toTable()), (19, { 19: 0, 33: 1 }.toTable()), (20, { 20: 0, 32: 1, 33: 1 }.toTable()), (21, { 21: 0 }.toTable()), (22, { 22: 0, 32: 1, 33: 1 }.toTable()), (23, { 23: 0, 32: 1, 33: 1, 25: 1, 27: 1, 29: 1, 31: 2 }.toTable()), (24, { 24: 0, 25: 1, 27: 1, 31: 1, 32: 2, 33: 2 }.toTable()), (25, { 25: 0, 31: 1, 32: 2, 33: 2 }.toTable()), (26, { 26: 0, 33: 1, 29: 1, 32: 2 }.toTable()), (27, { 27: 0, 33: 1 }.toTable()), (28, { 28: 0, 33: 1, 31: 1, 32: 2 }.toTable()), (29, { 29: 0, 32: 1, 33: 1 }.toTable()), (30, { 30: 0, 32: 1, 33: 1 }.toTable()), (31, { 31: 0, 32: 1, 33: 1 }.toTable()), (32, { 32: 0, 33: 1 }.toTable()), (33, { 33: 0 }.toTable())]
  for i in 0..<len(got):
    check got[i] == expected[i]

test "bidirectional shortest path on graph":
  let karate = karateClubGraph()
  check karate.bidirectionalShortestPath(0, 33) == @[0, 8, 33]

test "bidirectional shortest path on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.bidirectionalShortestPath(0, 33) == @[0, 8, 33]

test "single source shortest path on graph":
  let karate = karateClubGraph()
  let shortestPathLength = karate.singleSourceShortestPathLength(0)
  let shortestPath = karate.singleSourceShortestPath(0)
  for (target, path) in shortestPath.pairs():
    check path[0] == 0
    check path[^1] == target
    check len(path) == shortestPathLength[target] + 1 # add source
    for i in 0..<(len(path)-1):
      check (path[i], path[i+1]) in karate

test "single source shortest path on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let shortestPathLength = dkarate.singleSourceShortestPathLength(0)
  let shortestPath = dkarate.singleSourceShortestPath(0)
  for (target, path) in shortestPath.pairs():
    check path[0] == 0
    check path[^1] == target
    check len(path) == shortestPathLength[target] + 1 # add source
    for i in 0..<(len(path)-1):
      check (path[i], path[i+1]) in dkarate

test "single target shortest path on graph":
  let karate = karateClubGraph()
  for target in karate.nodes():
    let shortestPathLength = karate.singleTargetShortestPathLength(target)
    let shortestPath = karate.singleTargetShortestPath(target)
    for (source, path) in shortestPath.pairs():
      check path[0] == source
      check path[^1] == target
      check len(path) == shortestPathLength[source] + 1 # add source
      for i in 0..<(len(path)-1):
        check (path[i], path[i+1]) in karate

test "single target shortest path on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  for target in dkarate.nodes():
    let shortestPathLength = dkarate.singleTargetShortestPathLength(target)
    let shortestPath = dkarate.singleTargetShortestPath(target)
    for (source, path) in shortestPath.pairs():
      check path[0] == source
      check path[^1] == target
      check len(path) == shortestPathLength[source] + 1 # add source
      for i in 0..<(len(path)-1):
        check (path[i], path[i+1]) in dkarate

test "all pairs shortest path on graph":
  let karate = karateClubGraph()
  for (source, shortestPath) in karate.allPairsShortestPath():
    let shortestPathLength = karate.singleSourceShortestPathLength(source)
    for (target, path) in shortestPath.pairs():
      check path[0] == source
      check path[^1] == target
      check len(path) == shortestPathLength[target] + 1 # add source
      for i in 0..<(len(path)-1):
        check (path[i], path[i+1]) in karate

test "all pairs shortest path on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  for (source, shortestPath) in dkarate.allPairsShortestPath():
    let shortestPathLength = dkarate.singleSourceShortestPathLength(source)
    for (target, path) in shortestPath.pairs():
      check path[0] == source
      check path[^1] == target
      check len(path) == shortestPathLength[target] + 1 # add source
      for i in 0..<(len(path)-1):
        check (path[i], path[i+1]) in dkarate

test "predecessors on graph":
  let karate = karateClubGraph()
  check karate.predecessor(0) == {0: @[], 1: @[0], 2: @[0], 3: @[0], 4: @[0], 5: @[0], 6: @[0], 7: @[0], 8: @[0], 10: @[0], 11: @[0], 12: @[0], 13: @[0], 17: @[0], 19: @[0], 21: @[0], 31: @[0], 30: @[1, 8], 9: @[2], 27: @[2], 28: @[2, 31], 32: @[2, 8, 31], 16: @[5, 6], 33: @[8, 13, 19, 31], 24: @[31], 25: @[31], 23: @[27, 32, 33, 25], 14: @[32, 33], 15: @[32, 33], 18: @[32, 33], 20: @[32, 33], 22: @[32, 33], 29: @[32, 33], 26: @[33]}.toTable()

test "predecessors on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.predecessor(0) == {0: @[], 1: @[0], 2: @[0], 3: @[0], 4: @[0], 5: @[0], 6: @[0], 7: @[0], 8: @[0], 10: @[0], 11: @[0], 12: @[0], 13: @[0], 17: @[0], 19: @[0], 21: @[0], 31: @[0], 30: @[1, 8], 9: @[2], 27: @[2], 28: @[2], 32: @[2, 8, 31], 16: @[5, 6], 33: @[8, 13, 19, 31]}.toTable()

test "predecessors on graph":
  let karate = karateClubGraph()
  let (pred, seen) = karate.predecessorAndSeen(0)
  check pred == {0: @[], 1: @[0], 2: @[0], 3: @[0], 4: @[0], 5: @[0], 6: @[0], 7: @[0], 8: @[0], 10: @[0], 11: @[0], 12: @[0], 13: @[0], 17: @[0], 19: @[0], 21: @[0], 31: @[0], 30: @[1, 8], 9: @[2], 27: @[2], 28: @[2, 31], 32: @[2, 8, 31], 16: @[5, 6], 33: @[8, 13, 19, 31], 24: @[31], 25: @[31], 23: @[27, 32, 33, 25], 14: @[32, 33], 15: @[32, 33], 18: @[32, 33], 20: @[32, 33], 22: @[32, 33], 29: @[32, 33], 26: @[33]}.toTable()
  check seen == {0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 10: 1, 11: 1, 12: 1, 13: 1, 17: 1, 19: 1, 21: 1, 31: 1, 30: 2, 9: 2, 27: 2, 28: 2, 32: 2, 16: 2, 33: 2, 24: 2, 25: 2, 23: 3, 14: 3, 15: 3, 18: 3, 20: 3, 22: 3, 29: 3, 26: 3}.toTable()

test "predecessors on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let (pred, seen) = dkarate.predecessorAndSeen(0)
  check pred == {0: @[], 1: @[0], 2: @[0], 3: @[0], 4: @[0], 5: @[0], 6: @[0], 7: @[0], 8: @[0], 10: @[0], 11: @[0], 12: @[0], 13: @[0], 17: @[0], 19: @[0], 21: @[0], 31: @[0], 30: @[1, 8], 9: @[2], 27: @[2], 28: @[2], 32: @[2, 8, 31], 16: @[5, 6], 33: @[8, 13, 19, 31]}.toTable()
  check seen == {0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 10: 1, 11: 1, 12: 1, 13: 1, 17: 1, 19: 1, 21: 1, 31: 1, 30: 2, 9: 2, 27: 2, 28: 2, 32: 2, 16: 2, 33: 2}.toTable()

test "multi source dijkstra on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  let (dist, paths) = WG.multiSourceDijkstra(@[0], weight=weight)
  let expectedDist = {0: 0.0, 31: 2.0, 1: 10.0, 33: 12.0, 5: 13.0, 13: 18.0, 7: 19.0, 10: 20.0, 30: 20.0, 27: 20.0, 11: 21.0, 2: 23.0, 6: 24.0, 8: 25.0, 32: 25.0, 23: 27.0, 15: 31.0, 22: 31.0, 19: 34.0, 20: 37.0, 4: 40.0, 21: 46.0, 26: 49.0, 3: 49.0, 24: 50.0, 17: 51.0, 28: 54.0, 18: 62.0, 16: 64.0, 14: 66.0, 29: 67.0, 12: 77.0, 9: 87.0, 25: 89.0}.toTable()
  let expectedPaths = {0: @[0], 1: @[0, 1], 2: @[0, 2], 3: @[0, 31, 33, 13, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 5, 6], 7: @[0, 1, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 31, 33, 13], 17: @[0, 1, 17], 19: @[0, 1, 19], 21: @[0, 21], 31: @[0, 31], 24: @[0, 31, 33, 27, 24], 25: @[0, 31, 25], 28: @[0, 31, 28], 32: @[0, 2, 32], 33: @[0, 31, 33], 30: @[0, 1, 30], 9: @[0, 2, 9], 14: @[0, 31, 33, 14], 15: @[0, 2, 32, 15], 18: @[0, 31, 33, 18], 20: @[0, 2, 32, 20], 22: @[0, 2, 32, 22], 23: @[0, 31, 33, 23], 26: @[0, 31, 33, 26], 27: @[0, 31, 33, 27], 29: @[0, 31, 33, 29], 16: @[0, 5, 16]}.toTable()
  check dist == expectedDist
  check paths == expectedPaths

test "multi source dijkstra on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  let (dist, paths) = WDG.multiSourceDijkstra(@[0], weight=weight)
  let expectedDist = {0: 0.0, 13: 3.0, 7: 5.0, 33: 11.0, 5: 13.0, 19: 13.0, 31: 14.0, 8: 20.0, 21: 25.0, 6: 27.0, 17: 33.0, 32: 34.0, 10: 70.0, 4: 73.0, 12: 73.0, 16: 74.0, 3: 76.0, 1: 77.0, 2: 89.0, 11: 95.0, 30: 114.0, 27: 136.0, 9: 174.0, 28: 187.0}.toTable()
  let expectedPaths = {0: @[0], 1: @[0, 1], 2: @[0, 1, 2], 3: @[0, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 6], 7: @[0, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 13], 17: @[0, 17], 19: @[0, 19], 21: @[0, 21], 31: @[0, 31], 33: @[0, 13, 33], 16: @[0, 6, 16], 32: @[0, 8, 32], 30: @[0, 1, 30], 9: @[0, 1, 2, 9], 27: @[0, 1, 2, 27], 28: @[0, 1, 2, 28]}.toTable()
  check dist == expectedDist
  check paths == expectedPaths

test "multi source dijkstra path length on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  let gotFrom0 = WG.multiSourceDijkstraPathLength(@[0], weight=weight)
  let expectedFrom0 = {0: 0.0, 31: 2.0, 1: 10.0, 33: 12.0, 5: 13.0, 13: 18.0, 7: 19.0, 10: 20.0, 30: 20.0, 27: 20.0, 11: 21.0, 2: 23.0, 6: 24.0, 8: 25.0, 32: 25.0, 23: 27.0, 15: 31.0, 22: 31.0, 19: 34.0, 20: 37.0, 4: 40.0, 21: 46.0, 26: 49.0, 3: 49.0, 24: 50.0, 17: 51.0, 28: 54.0, 18: 62.0, 16: 64.0, 14: 66.0, 29: 67.0, 12: 77.0, 9: 87.0, 25: 89.0}.toTable()
  let gotFrom01 = WG.multiSourceDijkstraPathLength(@[0, 1], weight=weight)
  let expectedFrom01 = {0: 0.0, 1: 0.0, 31: 2.0, 7: 9.0, 30: 10.0, 33: 12.0, 5: 13.0, 13: 18.0, 2: 19.0, 10: 20.0, 27: 20.0, 11: 21.0, 32: 21.0, 19: 24.0, 6: 24.0, 8: 25.0, 23: 27.0, 15: 27.0, 22: 27.0, 20: 33.0, 4: 40.0, 17: 41.0, 21: 46.0, 26: 49.0, 3: 49.0, 24: 50.0, 28: 54.0, 18: 62.0, 16: 64.0, 14: 66.0, 29: 67.0, 12: 77.0, 9: 83.0, 25: 89.0}.toTable()
  check gotFrom0 == expectedFrom0
  check gotFrom01 == expectedFrom01

test "multi source dijkstra path length on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  let gotFrom0 = WDG.multiSourceDijkstraPathLength(@[0], weight=weight)
  let expectedFrom0 = {0: 0.0, 13: 3.0, 7: 5.0, 33: 11.0, 5: 13.0, 19: 13.0, 31: 14.0, 8: 20.0, 21: 25.0, 6: 27.0, 17: 33.0, 32: 34.0, 10: 70.0, 4: 73.0, 12: 73.0, 16: 74.0, 3: 76.0, 1: 77.0, 2: 89.0, 11: 95.0, 30: 114.0, 27: 136.0, 9: 174.0, 28: 187.0}.toTable()
  let gotFrom01 = WDG.multiSourceDijkstraPathLength(@[0, 1], weight=weight)
  let expectedFrom01 = {0: 0.0, 1: 0.0, 13: 3.0, 7: 5.0, 3: 11.0, 33: 11.0, 2: 12.0, 5: 13.0, 19: 13.0, 31: 14.0, 8: 20.0, 21: 25.0, 6: 27.0, 17: 33.0, 32: 34.0, 30: 37.0, 27: 59.0, 10: 70.0, 4: 73.0, 12: 73.0, 16: 74.0, 11: 95.0, 9: 97.0, 28: 110.0}.toTable()
  check gotFrom0 == expectedFrom0
  check gotFrom01 == expectedFrom01

test "multi source dijkstra path length on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  let gotFrom0 = WG.multiSourceDijkstraPath(@[0], weight=weight)
  let expectedFrom0 = {0: @[0], 1: @[0, 1], 2: @[0, 2], 3: @[0, 31, 33, 13, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 5, 6], 7: @[0, 1, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 31, 33, 13], 17: @[0, 1, 17], 19: @[0, 1, 19], 21: @[0, 21], 31: @[0, 31], 24: @[0, 31, 33, 27, 24], 25: @[0, 31, 25], 28: @[0, 31, 28], 32: @[0, 2, 32], 33: @[0, 31, 33], 30: @[0, 1, 30], 9: @[0, 2, 9], 14: @[0, 31, 33, 14], 15: @[0, 2, 32, 15], 18: @[0, 31, 33, 18], 20: @[0, 2, 32, 20], 22: @[0, 2, 32, 22], 23: @[0, 31, 33, 23], 26: @[0, 31, 33, 26], 27: @[0, 31, 33, 27], 29: @[0, 31, 33, 29], 16: @[0, 5, 16]}.toTable()
  let gotFrom01 = WG.multiSourceDijkstraPath(@[0, 1], weight=weight)
  let expectedFrom01 = {0: @[0], 1: @[1], 2: @[1, 7, 2], 3: @[0, 31, 33, 13, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 5, 6], 7: @[1, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 31, 33, 13], 17: @[1, 17], 19: @[1, 19], 21: @[0, 21], 31: @[0, 31], 30: @[1, 30], 24: @[0, 31, 33, 27, 24], 25: @[0, 31, 25], 28: @[0, 31, 28], 32: @[1, 7, 2, 32], 33: @[0, 31, 33], 9: @[1, 7, 2, 9], 14: @[0, 31, 33, 14], 15: @[1, 7, 2, 32, 15], 18: @[0, 31, 33, 18], 20: @[1, 7, 2, 32, 20], 22: @[1, 7, 2, 32, 22], 23: @[0, 31, 33, 23], 26: @[0, 31, 33, 26], 27: @[0, 31, 33, 27], 29: @[0, 31, 33, 29], 16: @[0, 5, 16]}.toTable()
  check gotFrom0 == expectedFrom0
  check gotFrom01 == expectedFrom01

test "multi source dijkstra path length on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  let gotFrom0 = WDG.multiSourceDijkstraPath(@[0], weight=weight)
  let expectedFrom0 = {0: @[0], 1: @[0, 1], 2: @[0, 1, 2], 3: @[0, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 6], 7: @[0, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 13], 17: @[0, 17], 19: @[0, 19], 21: @[0, 21], 31: @[0, 31], 33: @[0, 13, 33], 16: @[0, 6, 16], 32: @[0, 8, 32], 30: @[0, 1, 30], 9: @[0, 1, 2, 9], 27: @[0, 1, 2, 27], 28: @[0, 1, 2, 28]}.toTable()
  let gotFrom01 = WDG.multiSourceDijkstraPath(@[0, 1], weight=weight)
  let expectedFrom01 = {0: @[0], 1: @[1], 2: @[1, 2], 3: @[1, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 6], 7: @[0, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 13], 17: @[0, 17], 19: @[0, 19], 21: @[0, 21], 31: @[0, 31], 30: @[1, 30], 33: @[0, 13, 33], 9: @[1, 2, 9], 27: @[1, 2, 27], 28: @[1, 2, 28], 32: @[0, 8, 32], 16: @[0, 6, 16]}.toTable()
  check gotFrom0 == expectedFrom0
  check gotFrom01 == expectedFrom01

test "single source dijkstra on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  var weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  var (dist, paths) = WG.singleSourceDijkstra(0, weight=weight)
  var expectedDist = {0: 0.0, 31: 2.0, 1: 10.0, 33: 12.0, 5: 13.0, 13: 18.0, 7: 19.0, 10: 20.0, 30: 20.0, 27: 20.0, 11: 21.0, 2: 23.0, 6: 24.0, 8: 25.0, 32: 25.0, 23: 27.0, 15: 31.0, 22: 31.0, 19: 34.0, 20: 37.0, 4: 40.0, 21: 46.0, 26: 49.0, 3: 49.0, 24: 50.0, 17: 51.0, 28: 54.0, 18: 62.0, 16: 64.0, 14: 66.0, 29: 67.0, 12: 77.0, 9: 87.0, 25: 89.0}.toTable()
  var expectedPaths = {0: @[0], 1: @[0, 1], 2: @[0, 2], 3: @[0, 31, 33, 13, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 5, 6], 7: @[0, 1, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 31, 33, 13], 17: @[0, 1, 17], 19: @[0, 1, 19], 21: @[0, 21], 31: @[0, 31], 24: @[0, 31, 33, 27, 24], 25: @[0, 31, 25], 28: @[0, 31, 28], 32: @[0, 2, 32], 33: @[0, 31, 33], 30: @[0, 1, 30], 9: @[0, 2, 9], 14: @[0, 31, 33, 14], 15: @[0, 2, 32, 15], 18: @[0, 31, 33, 18], 20: @[0, 2, 32, 20], 22: @[0, 2, 32, 22], 23: @[0, 31, 33, 23], 26: @[0, 31, 33, 26], 27: @[0, 31, 33, 27], 29: @[0, 31, 33, 29], 16: @[0, 5, 16]}.toTable()
  check dist == expectedDist
  check paths == expectedPaths
  (dist, paths) = WG.singleSourceDijkstra(1, weight=weight)
  expectedDist = {1: 0.0, 7: 9.0, 0: 10.0, 30: 10.0, 31: 12.0, 2: 19.0, 32: 21.0, 33: 22.0, 5: 23.0, 19: 24.0, 15: 27.0, 22: 27.0, 13: 28.0, 10: 30.0, 27: 30.0, 11: 31.0, 20: 33.0, 6: 34.0, 8: 35.0, 23: 37.0, 17: 41.0, 21: 48.0, 4: 50.0, 3: 51.0, 26: 59.0, 24: 60.0, 28: 64.0, 18: 68.0, 16: 74.0, 14: 76.0, 29: 77.0, 9: 83.0, 12: 87.0, 25: 99.0}.toTable()
  expectedPaths = {1: @[1], 0: @[1, 0], 2: @[1, 7, 2], 3: @[1, 7, 3], 7: @[1, 7], 13: @[1, 0, 31, 33, 13], 17: @[1, 17], 19: @[1, 19], 21: @[1, 21], 30: @[1, 30], 4: @[1, 0, 4], 5: @[1, 0, 5], 6: @[1, 0, 5, 6], 8: @[1, 0, 8], 10: @[1, 0, 10], 11: @[1, 0, 11], 12: @[1, 0, 12], 31: @[1, 0, 31], 32: @[1, 7, 2, 32], 33: @[1, 0, 31, 33], 24: @[1, 0, 31, 33, 27, 24], 25: @[1, 0, 31, 25], 28: @[1, 0, 31, 28], 9: @[1, 7, 2, 9], 27: @[1, 0, 31, 33, 27], 14: @[1, 0, 31, 33, 14], 15: @[1, 7, 2, 32, 15], 18: @[1, 7, 2, 32, 18], 20: @[1, 7, 2, 32, 20], 22: @[1, 7, 2, 32, 22], 23: @[1, 0, 31, 33, 23], 29: @[1, 0, 31, 33, 29], 26: @[1, 0, 31, 33, 26], 16: @[1, 0, 5, 16]}.toTable()
  check dist == expectedDist
  check paths == expectedPaths

test "single source dijkstra on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  var weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  var (dist, paths) = WDG.singleSourceDijkstra(0, weight=weight)
  var expectedDist = {0: 0.0, 13: 3.0, 7: 5.0, 33: 11.0, 5: 13.0, 19: 13.0, 31: 14.0, 8: 20.0, 21: 25.0, 6: 27.0, 17: 33.0, 32: 34.0, 10: 70.0, 4: 73.0, 12: 73.0, 16: 74.0, 3: 76.0, 1: 77.0, 2: 89.0, 11: 95.0, 30: 114.0, 27: 136.0, 9: 174.0, 28: 187.0}.toTable()
  var expectedPaths = {0: @[0], 1: @[0, 1], 2: @[0, 1, 2], 3: @[0, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 6], 7: @[0, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 13], 17: @[0, 17], 19: @[0, 19], 21: @[0, 21], 31: @[0, 31], 33: @[0, 13, 33], 16: @[0, 6, 16], 32: @[0, 8, 32], 30: @[0, 1, 30], 9: @[0, 1, 2, 9], 27: @[0, 1, 2, 27], 28: @[0, 1, 2, 28]}.toTable()
  check dist == expectedDist
  check paths == expectedPaths
  (dist, paths) = WDG.singleSourceDijkstra(1, weight=weight)
  expectedDist = {1: 0.0, 13: 9.0, 3: 11.0, 2: 12.0, 33: 17.0, 7: 26.0, 30: 37.0, 21: 38.0, 27: 59.0, 17: 63.0, 32: 68.0, 12: 79.0, 8: 81.0, 9: 97.0, 19: 100.0, 28: 110.0, 31: 194.0}.toTable()
  expectedPaths = {1: @[1], 2: @[1, 2], 3: @[1, 3], 7: @[1, 7], 13: @[1, 13], 17: @[1, 17], 19: @[1, 19], 21: @[1, 21], 30: @[1, 30], 33: @[1, 13, 33], 12: @[1, 3, 12], 8: @[1, 2, 8], 9: @[1, 2, 9], 27: @[1, 2, 27], 28: @[1, 2, 28], 32: @[1, 2, 32], 31: @[1, 2, 28, 31]}.toTable()
  check dist == expectedDist
  check paths == expectedPaths

test "single source dijkstra path length on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  var weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  var dist= WG.singleSourceDijkstraPathLength(0, weight=weight)
  var expectedDist = {0: 0.0, 31: 2.0, 1: 10.0, 33: 12.0, 5: 13.0, 13: 18.0, 7: 19.0, 10: 20.0, 30: 20.0, 27: 20.0, 11: 21.0, 2: 23.0, 6: 24.0, 8: 25.0, 32: 25.0, 23: 27.0, 15: 31.0, 22: 31.0, 19: 34.0, 20: 37.0, 4: 40.0, 21: 46.0, 26: 49.0, 3: 49.0, 24: 50.0, 17: 51.0, 28: 54.0, 18: 62.0, 16: 64.0, 14: 66.0, 29: 67.0, 12: 77.0, 9: 87.0, 25: 89.0}.toTable()
  check dist == expectedDist
  dist = WG.singleSourceDijkstraPathLength(1, weight=weight)
  expectedDist = {1: 0.0, 7: 9.0, 0: 10.0, 30: 10.0, 31: 12.0, 2: 19.0, 32: 21.0, 33: 22.0, 5: 23.0, 19: 24.0, 15: 27.0, 22: 27.0, 13: 28.0, 10: 30.0, 27: 30.0, 11: 31.0, 20: 33.0, 6: 34.0, 8: 35.0, 23: 37.0, 17: 41.0, 21: 48.0, 4: 50.0, 3: 51.0, 26: 59.0, 24: 60.0, 28: 64.0, 18: 68.0, 16: 74.0, 14: 76.0, 29: 77.0, 9: 83.0, 12: 87.0, 25: 99.0}.toTable()
  check dist == expectedDist

test "single source dijkstra path length on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  var weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  var dist = WDG.singleSourceDijkstraPathLength(0, weight=weight)
  var expectedDist = {0: 0.0, 13: 3.0, 7: 5.0, 33: 11.0, 5: 13.0, 19: 13.0, 31: 14.0, 8: 20.0, 21: 25.0, 6: 27.0, 17: 33.0, 32: 34.0, 10: 70.0, 4: 73.0, 12: 73.0, 16: 74.0, 3: 76.0, 1: 77.0, 2: 89.0, 11: 95.0, 30: 114.0, 27: 136.0, 9: 174.0, 28: 187.0}.toTable()
  check dist == expectedDist
  dist = WDG.singleSourceDijkstraPathLength(1, weight=weight)
  expectedDist = {1: 0.0, 13: 9.0, 3: 11.0, 2: 12.0, 33: 17.0, 7: 26.0, 30: 37.0, 21: 38.0, 27: 59.0, 17: 63.0, 32: 68.0, 12: 79.0, 8: 81.0, 9: 97.0, 19: 100.0, 28: 110.0, 31: 194.0}.toTable()
  check dist == expectedDist

test "single source dijkstra path on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  var weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  var paths = WG.singleSourceDijkstraPath(0, weight=weight)
  var expectedPaths = {0: @[0], 1: @[0, 1], 2: @[0, 2], 3: @[0, 31, 33, 13, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 5, 6], 7: @[0, 1, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 31, 33, 13], 17: @[0, 1, 17], 19: @[0, 1, 19], 21: @[0, 21], 31: @[0, 31], 24: @[0, 31, 33, 27, 24], 25: @[0, 31, 25], 28: @[0, 31, 28], 32: @[0, 2, 32], 33: @[0, 31, 33], 30: @[0, 1, 30], 9: @[0, 2, 9], 14: @[0, 31, 33, 14], 15: @[0, 2, 32, 15], 18: @[0, 31, 33, 18], 20: @[0, 2, 32, 20], 22: @[0, 2, 32, 22], 23: @[0, 31, 33, 23], 26: @[0, 31, 33, 26], 27: @[0, 31, 33, 27], 29: @[0, 31, 33, 29], 16: @[0, 5, 16]}.toTable()
  check paths == expectedPaths
  paths = WG.singleSourceDijkstraPath(1, weight=weight)
  expectedPaths = {1: @[1], 0: @[1, 0], 2: @[1, 7, 2], 3: @[1, 7, 3], 7: @[1, 7], 13: @[1, 0, 31, 33, 13], 17: @[1, 17], 19: @[1, 19], 21: @[1, 21], 30: @[1, 30], 4: @[1, 0, 4], 5: @[1, 0, 5], 6: @[1, 0, 5, 6], 8: @[1, 0, 8], 10: @[1, 0, 10], 11: @[1, 0, 11], 12: @[1, 0, 12], 31: @[1, 0, 31], 32: @[1, 7, 2, 32], 33: @[1, 0, 31, 33], 24: @[1, 0, 31, 33, 27, 24], 25: @[1, 0, 31, 25], 28: @[1, 0, 31, 28], 9: @[1, 7, 2, 9], 27: @[1, 0, 31, 33, 27], 14: @[1, 0, 31, 33, 14], 15: @[1, 7, 2, 32, 15], 18: @[1, 7, 2, 32, 18], 20: @[1, 7, 2, 32, 20], 22: @[1, 7, 2, 32, 22], 23: @[1, 0, 31, 33, 23], 29: @[1, 0, 31, 33, 29], 26: @[1, 0, 31, 33, 26], 16: @[1, 0, 5, 16]}.toTable()
  check paths == expectedPaths

test "single source dijkstra path on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  var weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  var paths = WDG.singleSourceDijkstraPath(0, weight=weight)
  var expectedPaths = {0: @[0], 1: @[0, 1], 2: @[0, 1, 2], 3: @[0, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 6], 7: @[0, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 13], 17: @[0, 17], 19: @[0, 19], 21: @[0, 21], 31: @[0, 31], 33: @[0, 13, 33], 16: @[0, 6, 16], 32: @[0, 8, 32], 30: @[0, 1, 30], 9: @[0, 1, 2, 9], 27: @[0, 1, 2, 27], 28: @[0, 1, 2, 28]}.toTable()
  check paths == expectedPaths
  paths = WDG.singleSourceDijkstraPath(1, weight=weight)
  expectedPaths = {1: @[1], 2: @[1, 2], 3: @[1, 3], 7: @[1, 7], 13: @[1, 13], 17: @[1, 17], 19: @[1, 19], 21: @[1, 21], 30: @[1, 30], 33: @[1, 13, 33], 12: @[1, 3, 12], 8: @[1, 2, 8], 9: @[1, 2, 9], 27: @[1, 2, 27], 28: @[1, 2, 28], 32: @[1, 2, 32], 31: @[1, 2, 28, 31]}.toTable()
  check paths == expectedPaths

test "dijkstra path length on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  var weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  check WG.dijkstraPathLength(0, 7, weight=weight) == 19.0

test "dijkstra path length on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  var weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  check WDG.dijkstraPathLength(0, 7, weight=weight) == 5.0
  try:
    discard WDG.dijkstraPathLength(0, 14, weight=weight)
  except NNNoPath as e:
    check e.msg == "node 14 not reachable from node 0"

test "dijkstra path on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  var weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  check WG.dijkstraPath(0, 7, weight=weight) == @[0, 1, 7]

test "dijkstra path on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  var weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  check WDG.dijkstraPath(0, 32, weight=weight) == @[0, 8, 32]
  try:
    discard WDG.dijkstraPath(2, 19, weight=weight)
  except NNNoPath as e:
    check e.msg == "node 19 not reachable from node 2"

test "all pairs dijkstra on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  var weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  check WG.allPairsDijkstra(weight=weight).toSeq() == @[(0, ({0: 0.0, 31: 2.0, 1: 10.0, 33: 12.0, 5: 13.0, 13: 18.0, 7: 19.0, 10: 20.0, 30: 20.0, 27: 20.0, 11: 21.0, 2: 23.0, 6: 24.0, 8: 25.0, 32: 25.0, 23: 27.0, 15: 31.0, 22: 31.0, 19: 34.0, 20: 37.0, 4: 40.0, 21: 46.0, 26: 49.0, 3: 49.0, 24: 50.0, 17: 51.0, 28: 54.0, 18: 62.0, 16: 64.0, 14: 66.0, 29: 67.0, 12: 77.0, 9: 87.0, 25: 89.0}.toTable(), {0: @[0], 1: @[0, 1], 2: @[0, 2], 3: @[0, 31, 33, 13, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 5, 6], 7: @[0, 1, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 31, 33, 13], 17: @[0, 1, 17], 19: @[0, 1, 19], 21: @[0, 21], 31: @[0, 31], 24: @[0, 31, 33, 27, 24], 25: @[0, 31, 25], 28: @[0, 31, 28], 32: @[0, 2, 32], 33: @[0, 31, 33], 30: @[0, 1, 30], 9: @[0, 2, 9], 14: @[0, 31, 33, 14], 15: @[0, 2, 32, 15], 18: @[0, 31, 33, 18], 20: @[0, 2, 32, 20], 22: @[0, 2, 32, 22], 23: @[0, 31, 33, 23], 26: @[0, 31, 33, 26], 27: @[0, 31, 33, 27], 29: @[0, 31, 33, 29], 16: @[0, 5, 16]}.toTable())), (1, ({1: 0.0, 7: 9.0, 0: 10.0, 30: 10.0, 31: 12.0, 2: 19.0, 32: 21.0, 33: 22.0, 5: 23.0, 19: 24.0, 15: 27.0, 22: 27.0, 13: 28.0, 10: 30.0, 27: 30.0, 11: 31.0, 20: 33.0, 6: 34.0, 8: 35.0, 23: 37.0, 17: 41.0, 21: 48.0, 4: 50.0, 3: 51.0, 26: 59.0, 24: 60.0, 28: 64.0, 18: 68.0, 16: 74.0, 14: 76.0, 29: 77.0, 9: 83.0, 12: 87.0, 25: 99.0}.toTable(), {1: @[1], 0: @[1, 0], 2: @[1, 7, 2], 3: @[1, 7, 3], 7: @[1, 7], 13: @[1, 0, 31, 33, 13], 17: @[1, 17], 19: @[1, 19], 21: @[1, 21], 30: @[1, 30], 4: @[1, 0, 4], 5: @[1, 0, 5], 6: @[1, 0, 5, 6], 8: @[1, 0, 8], 10: @[1, 0, 10], 11: @[1, 0, 11], 12: @[1, 0, 12], 31: @[1, 0, 31], 32: @[1, 7, 2, 32], 33: @[1, 0, 31, 33], 24: @[1, 0, 31, 33, 27, 24], 25: @[1, 0, 31, 25], 28: @[1, 0, 31, 28], 9: @[1, 7, 2, 9], 27: @[1, 0, 31, 33, 27], 14: @[1, 0, 31, 33, 14], 15: @[1, 7, 2, 32, 15], 18: @[1, 7, 2, 32, 18], 20: @[1, 7, 2, 32, 20], 22: @[1, 7, 2, 32, 22], 23: @[1, 0, 31, 33, 23], 29: @[1, 0, 31, 33, 29], 26: @[1, 0, 31, 33, 26], 16: @[1, 0, 5, 16]}.toTable())), (2, ({2: 0.0, 32: 2.0, 15: 8.0, 22: 8.0, 7: 10.0, 20: 14.0, 1: 19.0, 0: 23.0, 31: 25.0, 30: 27.0, 13: 30.0, 8: 31.0, 33: 33.0, 5: 36.0, 27: 41.0, 19: 43.0, 10: 43.0, 11: 44.0, 6: 47.0, 23: 48.0, 18: 49.0, 3: 52.0, 17: 60.0, 4: 63.0, 9: 64.0, 21: 67.0, 14: 68.0, 26: 70.0, 28: 71.0, 24: 71.0, 16: 87.0, 29: 88.0, 12: 100.0, 25: 111.0}.toTable(), {2: @[2], 0: @[2, 0], 1: @[2, 7, 1], 3: @[2, 7, 3], 7: @[2, 7], 8: @[2, 32, 8], 9: @[2, 9], 13: @[2, 13], 27: @[2, 32, 33, 27], 28: @[2, 28], 32: @[2, 32], 14: @[2, 32, 14], 15: @[2, 32, 15], 18: @[2, 32, 18], 20: @[2, 32, 20], 22: @[2, 32, 22], 23: @[2, 32, 23], 29: @[2, 32, 33, 29], 30: @[2, 32, 30], 31: @[2, 0, 31], 33: @[2, 32, 33], 17: @[2, 7, 1, 17], 19: @[2, 7, 1, 19], 21: @[2, 7, 1, 21], 4: @[2, 0, 4], 5: @[2, 0, 5], 6: @[2, 0, 5, 6], 10: @[2, 0, 10], 11: @[2, 0, 11], 12: @[2, 0, 12], 24: @[2, 32, 33, 27, 24], 25: @[2, 32, 33, 27, 24, 25], 26: @[2, 32, 33, 26], 16: @[2, 0, 5, 16]}.toTable())), (3, ({3: 0.0, 13: 31.0, 33: 37.0, 7: 42.0, 27: 45.0, 31: 47.0, 0: 49.0, 1: 51.0, 23: 52.0, 2: 52.0, 32: 54.0, 15: 60.0, 22: 60.0, 30: 61.0, 5: 62.0, 20: 66.0, 10: 69.0, 11: 70.0, 6: 73.0, 26: 74.0, 8: 74.0, 24: 75.0, 19: 75.0, 18: 87.0, 4: 89.0, 14: 91.0, 29: 92.0, 17: 92.0, 21: 95.0, 12: 98.0, 28: 99.0, 16: 113.0, 25: 115.0, 9: 116.0}.toTable(), {3: @[3], 0: @[3, 13, 33, 31, 0], 1: @[3, 7, 1], 2: @[3, 7, 2], 7: @[3, 7], 12: @[3, 12], 13: @[3, 13], 33: @[3, 13, 33], 8: @[3, 13, 33, 31, 0, 8], 9: @[3, 7, 2, 9], 14: @[3, 13, 33, 14], 15: @[3, 7, 2, 32, 15], 18: @[3, 13, 33, 18], 19: @[3, 7, 1, 19], 20: @[3, 7, 2, 32, 20], 22: @[3, 7, 2, 32, 22], 23: @[3, 13, 33, 23], 26: @[3, 13, 33, 26], 27: @[3, 13, 33, 27], 28: @[3, 13, 33, 31, 28], 29: @[3, 13, 33, 29], 30: @[3, 7, 1, 30], 31: @[3, 13, 33, 31], 32: @[3, 7, 2, 32], 24: @[3, 13, 33, 27, 24], 25: @[3, 13, 33, 27, 24, 25], 4: @[3, 13, 33, 31, 0, 4], 5: @[3, 13, 33, 31, 0, 5], 6: @[3, 13, 33, 31, 0, 5, 6], 10: @[3, 13, 33, 31, 0, 10], 11: @[3, 13, 33, 31, 0, 11], 17: @[3, 7, 1, 17], 21: @[3, 13, 33, 31, 0, 21], 16: @[3, 13, 33, 31, 0, 5, 16]}.toTable())), (4, ({4: 0.0, 0: 40.0, 31: 42.0, 6: 44.0, 1: 50.0, 33: 52.0, 5: 53.0, 13: 58.0, 7: 59.0, 10: 60.0, 30: 60.0, 27: 60.0, 11: 61.0, 2: 63.0, 8: 65.0, 32: 65.0, 23: 67.0, 15: 71.0, 22: 71.0, 19: 74.0, 20: 77.0, 21: 86.0, 26: 89.0, 3: 89.0, 24: 90.0, 17: 91.0, 28: 94.0, 18: 102.0, 16: 104.0, 14: 106.0, 29: 107.0, 12: 117.0, 9: 127.0, 25: 129.0}.toTable(), {4: @[4], 0: @[4, 0], 6: @[4, 6], 10: @[4, 0, 10], 1: @[4, 0, 1], 2: @[4, 0, 2], 3: @[4, 0, 31, 33, 13, 3], 5: @[4, 0, 5], 7: @[4, 0, 1, 7], 8: @[4, 0, 8], 11: @[4, 0, 11], 12: @[4, 0, 12], 13: @[4, 0, 31, 33, 13], 17: @[4, 0, 1, 17], 19: @[4, 0, 1, 19], 21: @[4, 0, 21], 31: @[4, 0, 31], 24: @[4, 0, 31, 33, 27, 24], 25: @[4, 0, 31, 25], 28: @[4, 0, 31, 28], 32: @[4, 0, 2, 32], 33: @[4, 0, 31, 33], 16: @[4, 0, 5, 16], 30: @[4, 0, 1, 30], 9: @[4, 0, 2, 9], 14: @[4, 0, 31, 33, 14], 15: @[4, 0, 2, 32, 15], 18: @[4, 0, 31, 33, 18], 20: @[4, 0, 2, 32, 20], 22: @[4, 0, 2, 32, 22], 23: @[4, 0, 31, 33, 23], 26: @[4, 0, 31, 33, 26], 27: @[4, 0, 31, 33, 27], 29: @[4, 0, 31, 33, 29]}.toTable())), (5, ({5: 0.0, 6: 11.0, 0: 13.0, 10: 14.0, 31: 15.0, 1: 23.0, 33: 25.0, 13: 31.0, 7: 32.0, 30: 33.0, 27: 33.0, 11: 34.0, 2: 36.0, 8: 38.0, 32: 38.0, 23: 40.0, 15: 44.0, 22: 44.0, 19: 47.0, 20: 50.0, 16: 51.0, 4: 53.0, 21: 59.0, 26: 62.0, 3: 62.0, 24: 63.0, 17: 64.0, 28: 67.0, 18: 75.0, 14: 79.0, 29: 80.0, 12: 90.0, 9: 100.0, 25: 102.0}.toTable(), {5: @[5], 0: @[5, 0], 6: @[5, 6], 10: @[5, 10], 16: @[5, 16], 4: @[5, 0, 4], 1: @[5, 0, 1], 2: @[5, 0, 2], 3: @[5, 0, 31, 33, 13, 3], 7: @[5, 0, 1, 7], 8: @[5, 0, 8], 11: @[5, 0, 11], 12: @[5, 0, 12], 13: @[5, 0, 31, 33, 13], 17: @[5, 0, 1, 17], 19: @[5, 0, 1, 19], 21: @[5, 0, 21], 31: @[5, 0, 31], 24: @[5, 0, 31, 33, 27, 24], 25: @[5, 0, 31, 25], 28: @[5, 0, 31, 28], 32: @[5, 0, 2, 32], 33: @[5, 0, 31, 33], 30: @[5, 0, 1, 30], 9: @[5, 0, 2, 9], 14: @[5, 0, 31, 33, 14], 15: @[5, 0, 2, 32, 15], 18: @[5, 0, 31, 33, 18], 20: @[5, 0, 2, 32, 20], 22: @[5, 0, 2, 32, 22], 23: @[5, 0, 31, 33, 23], 26: @[5, 0, 31, 33, 26], 27: @[5, 0, 31, 33, 27], 29: @[5, 0, 31, 33, 29]}.toTable())), (6, ({6: 0.0, 5: 11.0, 0: 24.0, 10: 25.0, 31: 26.0, 1: 34.0, 33: 36.0, 13: 42.0, 7: 43.0, 4: 44.0, 30: 44.0, 27: 44.0, 11: 45.0, 2: 47.0, 8: 49.0, 32: 49.0, 23: 51.0, 15: 55.0, 22: 55.0, 19: 58.0, 20: 61.0, 16: 62.0, 21: 70.0, 26: 73.0, 3: 73.0, 24: 74.0, 17: 75.0, 28: 78.0, 18: 86.0, 14: 90.0, 29: 91.0, 12: 101.0, 9: 111.0, 25: 113.0}.toTable(), {6: @[6], 0: @[6, 5, 0], 4: @[6, 4], 5: @[6, 5], 16: @[6, 5, 16], 10: @[6, 5, 10], 1: @[6, 5, 0, 1], 2: @[6, 5, 0, 2], 3: @[6, 5, 0, 31, 33, 13, 3], 7: @[6, 5, 0, 1, 7], 8: @[6, 5, 0, 8], 11: @[6, 5, 0, 11], 12: @[6, 5, 0, 12], 13: @[6, 5, 0, 31, 33, 13], 17: @[6, 5, 0, 1, 17], 19: @[6, 5, 0, 1, 19], 21: @[6, 5, 0, 21], 31: @[6, 5, 0, 31], 24: @[6, 5, 0, 31, 33, 27, 24], 25: @[6, 5, 0, 31, 25], 28: @[6, 5, 0, 31, 28], 32: @[6, 5, 0, 2, 32], 33: @[6, 5, 0, 31, 33], 30: @[6, 5, 0, 1, 30], 9: @[6, 5, 0, 2, 9], 14: @[6, 5, 0, 31, 33, 14], 15: @[6, 5, 0, 2, 32, 15], 18: @[6, 5, 0, 31, 33, 18], 20: @[6, 5, 0, 2, 32, 20], 22: @[6, 5, 0, 2, 32, 22], 23: @[6, 5, 0, 31, 33, 23], 26: @[6, 5, 0, 31, 33, 26], 27: @[6, 5, 0, 31, 33, 27], 29: @[6, 5, 0, 31, 33, 29]}.toTable())), (7, ({7: 0.0, 1: 9.0, 2: 10.0, 32: 12.0, 15: 18.0, 22: 18.0, 0: 19.0, 30: 19.0, 31: 21.0, 20: 24.0, 33: 31.0, 5: 32.0, 19: 33.0, 13: 37.0, 10: 39.0, 27: 39.0, 11: 40.0, 8: 41.0, 3: 42.0, 6: 43.0, 23: 46.0, 17: 50.0, 21: 57.0, 18: 59.0, 4: 59.0, 26: 68.0, 24: 69.0, 28: 73.0, 9: 74.0, 14: 78.0, 16: 83.0, 29: 86.0, 12: 96.0, 25: 108.0}.toTable(), {7: @[7], 0: @[7, 1, 0], 1: @[7, 1], 2: @[7, 2], 3: @[7, 3], 13: @[7, 1, 0, 31, 33, 13], 17: @[7, 1, 17], 19: @[7, 1, 19], 21: @[7, 1, 21], 30: @[7, 1, 30], 8: @[7, 2, 32, 8], 9: @[7, 2, 9], 27: @[7, 1, 0, 31, 33, 27], 28: @[7, 1, 0, 31, 28], 32: @[7, 2, 32], 14: @[7, 2, 32, 14], 15: @[7, 2, 32, 15], 18: @[7, 2, 32, 18], 20: @[7, 2, 32, 20], 22: @[7, 2, 32, 22], 23: @[7, 1, 0, 31, 33, 23], 29: @[7, 1, 0, 31, 33, 29], 31: @[7, 1, 0, 31], 33: @[7, 1, 0, 31, 33], 4: @[7, 1, 0, 4], 5: @[7, 1, 0, 5], 6: @[7, 1, 0, 5, 6], 10: @[7, 1, 0, 10], 11: @[7, 1, 0, 11], 12: @[7, 1, 0, 12], 24: @[7, 1, 0, 31, 33, 27, 24], 25: @[7, 1, 0, 31, 25], 26: @[7, 1, 0, 31, 33, 26], 16: @[7, 1, 0, 5, 16]}.toTable())), (8, ({8: 0.0, 0: 25.0, 31: 27.0, 32: 29.0, 2: 31.0, 1: 35.0, 15: 35.0, 22: 35.0, 33: 37.0, 5: 38.0, 20: 41.0, 7: 41.0, 13: 43.0, 10: 45.0, 30: 45.0, 27: 45.0, 11: 46.0, 6: 49.0, 23: 52.0, 19: 59.0, 4: 65.0, 21: 71.0, 26: 74.0, 3: 74.0, 24: 75.0, 18: 76.0, 17: 76.0, 28: 79.0, 16: 89.0, 14: 91.0, 29: 92.0, 9: 95.0, 12: 102.0, 25: 114.0}.toTable(), {8: @[8], 0: @[8, 0], 2: @[8, 32, 2], 30: @[8, 0, 1, 30], 32: @[8, 32], 33: @[8, 0, 31, 33], 1: @[8, 0, 1], 3: @[8, 0, 31, 33, 13, 3], 4: @[8, 0, 4], 5: @[8, 0, 5], 6: @[8, 0, 5, 6], 7: @[8, 32, 2, 7], 10: @[8, 0, 10], 11: @[8, 0, 11], 12: @[8, 0, 12], 13: @[8, 0, 31, 33, 13], 17: @[8, 0, 1, 17], 19: @[8, 0, 1, 19], 21: @[8, 0, 21], 31: @[8, 0, 31], 24: @[8, 0, 31, 33, 27, 24], 25: @[8, 0, 31, 25], 28: @[8, 0, 31, 28], 14: @[8, 0, 31, 33, 14], 15: @[8, 32, 15], 18: @[8, 32, 18], 20: @[8, 32, 20], 22: @[8, 32, 22], 23: @[8, 0, 31, 33, 23], 29: @[8, 0, 31, 33, 29], 9: @[8, 32, 2, 9], 27: @[8, 0, 31, 33, 27], 26: @[8, 0, 31, 33, 26], 16: @[8, 0, 5, 16]}.toTable())), (9, ({9: 0.0, 2: 64.0, 32: 66.0, 15: 72.0, 22: 72.0, 7: 74.0, 20: 78.0, 1: 83.0, 0: 87.0, 31: 89.0, 30: 91.0, 13: 94.0, 8: 95.0, 33: 97.0, 5: 100.0, 27: 105.0, 19: 107.0, 10: 107.0, 11: 108.0, 6: 111.0, 23: 112.0, 18: 113.0, 3: 116.0, 17: 124.0, 4: 127.0, 21: 131.0, 14: 132.0, 26: 134.0, 28: 135.0, 24: 135.0, 16: 151.0, 29: 152.0, 12: 164.0, 25: 175.0}.toTable(), {9: @[9], 2: @[9, 2], 33: @[9, 33], 0: @[9, 2, 0], 1: @[9, 2, 7, 1], 3: @[9, 2, 7, 3], 7: @[9, 2, 7], 8: @[9, 2, 32, 8], 13: @[9, 2, 13], 27: @[9, 33, 27], 28: @[9, 2, 28], 32: @[9, 2, 32], 14: @[9, 2, 32, 14], 15: @[9, 2, 32, 15], 18: @[9, 2, 32, 18], 20: @[9, 2, 32, 20], 22: @[9, 2, 32, 22], 23: @[9, 2, 32, 23], 29: @[9, 33, 29], 30: @[9, 2, 32, 30], 31: @[9, 2, 0, 31], 17: @[9, 2, 7, 1, 17], 19: @[9, 2, 7, 1, 19], 21: @[9, 2, 7, 1, 21], 4: @[9, 2, 0, 4], 5: @[9, 2, 0, 5], 6: @[9, 2, 0, 5, 6], 10: @[9, 2, 0, 10], 11: @[9, 2, 0, 11], 12: @[9, 2, 0, 12], 24: @[9, 33, 27, 24], 25: @[9, 33, 27, 24, 25], 26: @[9, 33, 26], 16: @[9, 2, 0, 5, 16]}.toTable())), (10, ({10: 0.0, 5: 14.0, 0: 20.0, 31: 22.0, 6: 25.0, 1: 30.0, 33: 32.0, 13: 38.0, 7: 39.0, 30: 40.0, 27: 40.0, 11: 41.0, 2: 43.0, 8: 45.0, 32: 45.0, 23: 47.0, 15: 51.0, 22: 51.0, 19: 54.0, 20: 57.0, 4: 60.0, 16: 65.0, 21: 66.0, 26: 69.0, 3: 69.0, 24: 70.0, 17: 71.0, 28: 74.0, 18: 82.0, 14: 86.0, 29: 87.0, 12: 97.0, 9: 107.0, 25: 109.0}.toTable(), {10: @[10], 0: @[10, 0], 4: @[10, 0, 4], 5: @[10, 5], 6: @[10, 5, 6], 16: @[10, 5, 16], 1: @[10, 0, 1], 2: @[10, 0, 2], 3: @[10, 0, 31, 33, 13, 3], 7: @[10, 0, 1, 7], 8: @[10, 0, 8], 11: @[10, 0, 11], 12: @[10, 0, 12], 13: @[10, 0, 31, 33, 13], 17: @[10, 0, 1, 17], 19: @[10, 0, 1, 19], 21: @[10, 0, 21], 31: @[10, 0, 31], 24: @[10, 0, 31, 33, 27, 24], 25: @[10, 0, 31, 25], 28: @[10, 0, 31, 28], 32: @[10, 0, 2, 32], 33: @[10, 0, 31, 33], 30: @[10, 0, 1, 30], 9: @[10, 0, 2, 9], 14: @[10, 0, 31, 33, 14], 15: @[10, 0, 2, 32, 15], 18: @[10, 0, 31, 33, 18], 20: @[10, 0, 2, 32, 20], 22: @[10, 0, 2, 32, 22], 23: @[10, 0, 31, 33, 23], 26: @[10, 0, 31, 33, 26], 27: @[10, 0, 31, 33, 27], 29: @[10, 0, 31, 33, 29]}.toTable())), (11, ({11: 0.0, 0: 21.0, 31: 23.0, 1: 31.0, 33: 33.0, 5: 34.0, 13: 39.0, 7: 40.0, 10: 41.0, 30: 41.0, 27: 41.0, 2: 44.0, 6: 45.0, 8: 46.0, 32: 46.0, 23: 48.0, 15: 52.0, 22: 52.0, 19: 55.0, 20: 58.0, 4: 61.0, 21: 67.0, 26: 70.0, 3: 70.0, 24: 71.0, 17: 72.0, 28: 75.0, 18: 83.0, 16: 85.0, 14: 87.0, 29: 88.0, 12: 98.0, 9: 108.0, 25: 110.0}.toTable(), {11: @[11], 0: @[11, 0], 1: @[11, 0, 1], 2: @[11, 0, 2], 3: @[11, 0, 31, 33, 13, 3], 4: @[11, 0, 4], 5: @[11, 0, 5], 6: @[11, 0, 5, 6], 7: @[11, 0, 1, 7], 8: @[11, 0, 8], 10: @[11, 0, 10], 12: @[11, 0, 12], 13: @[11, 0, 31, 33, 13], 17: @[11, 0, 1, 17], 19: @[11, 0, 1, 19], 21: @[11, 0, 21], 31: @[11, 0, 31], 24: @[11, 0, 31, 33, 27, 24], 25: @[11, 0, 31, 25], 28: @[11, 0, 31, 28], 32: @[11, 0, 2, 32], 33: @[11, 0, 31, 33], 30: @[11, 0, 1, 30], 9: @[11, 0, 2, 9], 14: @[11, 0, 31, 33, 14], 15: @[11, 0, 2, 32, 15], 18: @[11, 0, 31, 33, 18], 20: @[11, 0, 2, 32, 20], 22: @[11, 0, 2, 32, 22], 23: @[11, 0, 31, 33, 23], 26: @[11, 0, 31, 33, 26], 27: @[11, 0, 31, 33, 27], 29: @[11, 0, 31, 33, 29], 16: @[11, 0, 5, 16]}.toTable())), (12, ({12: 0.0, 0: 77.0, 31: 79.0, 1: 87.0, 33: 89.0, 5: 90.0, 13: 95.0, 7: 96.0, 10: 97.0, 30: 97.0, 27: 97.0, 3: 98.0, 11: 98.0, 2: 100.0, 6: 101.0, 8: 102.0, 32: 102.0, 23: 104.0, 15: 108.0, 22: 108.0, 19: 111.0, 20: 114.0, 4: 117.0, 21: 123.0, 26: 126.0, 24: 127.0, 17: 128.0, 28: 131.0, 18: 139.0, 16: 141.0, 14: 143.0, 29: 144.0, 9: 164.0, 25: 166.0}.toTable(), {12: @[12], 0: @[12, 0], 3: @[12, 3], 1: @[12, 0, 1], 2: @[12, 0, 2], 4: @[12, 0, 4], 5: @[12, 0, 5], 6: @[12, 0, 5, 6], 7: @[12, 0, 1, 7], 8: @[12, 0, 8], 10: @[12, 0, 10], 11: @[12, 0, 11], 13: @[12, 0, 31, 33, 13], 17: @[12, 0, 1, 17], 19: @[12, 0, 1, 19], 21: @[12, 0, 21], 31: @[12, 0, 31], 24: @[12, 0, 31, 33, 27, 24], 25: @[12, 0, 31, 25], 28: @[12, 0, 31, 28], 32: @[12, 0, 2, 32], 33: @[12, 0, 31, 33], 30: @[12, 0, 1, 30], 9: @[12, 0, 2, 9], 14: @[12, 0, 31, 33, 14], 15: @[12, 0, 2, 32, 15], 18: @[12, 0, 31, 33, 18], 20: @[12, 0, 2, 32, 20], 22: @[12, 0, 2, 32, 22], 23: @[12, 0, 31, 33, 23], 26: @[12, 0, 31, 33, 26], 27: @[12, 0, 31, 33, 27], 29: @[12, 0, 31, 33, 29], 16: @[12, 0, 5, 16]}.toTable())), (13, ({13: 0.0, 33: 6.0, 27: 14.0, 31: 16.0, 0: 18.0, 23: 21.0, 1: 28.0, 2: 30.0, 3: 31.0, 5: 31.0, 32: 32.0, 7: 37.0, 10: 38.0, 30: 38.0, 15: 38.0, 22: 38.0, 11: 39.0, 6: 42.0, 26: 43.0, 8: 43.0, 24: 44.0, 20: 44.0, 19: 52.0, 18: 56.0, 4: 58.0, 14: 60.0, 29: 61.0, 21: 64.0, 28: 68.0, 17: 69.0, 16: 82.0, 25: 84.0, 9: 94.0, 12: 95.0}.toTable(), {13: @[13], 0: @[13, 33, 31, 0], 1: @[13, 33, 31, 0, 1], 2: @[13, 2], 3: @[13, 3], 33: @[13, 33], 8: @[13, 33, 31, 0, 8], 9: @[13, 2, 9], 14: @[13, 33, 14], 15: @[13, 2, 32, 15], 18: @[13, 33, 18], 19: @[13, 33, 31, 0, 1, 19], 20: @[13, 2, 32, 20], 22: @[13, 2, 32, 22], 23: @[13, 33, 23], 26: @[13, 33, 26], 27: @[13, 33, 27], 28: @[13, 33, 31, 28], 29: @[13, 33, 29], 30: @[13, 33, 31, 0, 1, 30], 31: @[13, 33, 31], 32: @[13, 2, 32], 24: @[13, 33, 27, 24], 25: @[13, 33, 27, 24, 25], 4: @[13, 33, 31, 0, 4], 5: @[13, 33, 31, 0, 5], 6: @[13, 33, 31, 0, 5, 6], 7: @[13, 33, 31, 0, 1, 7], 10: @[13, 33, 31, 0, 10], 11: @[13, 33, 31, 0, 11], 12: @[13, 33, 31, 0, 12], 17: @[13, 33, 31, 0, 1, 17], 21: @[13, 33, 31, 0, 21], 16: @[13, 33, 31, 0, 5, 16]}.toTable())), (14, ({14: 0.0, 33: 54.0, 13: 60.0, 27: 62.0, 31: 64.0, 32: 66.0, 0: 66.0, 2: 68.0, 23: 69.0, 15: 72.0, 22: 72.0, 1: 76.0, 20: 78.0, 7: 78.0, 5: 79.0, 10: 86.0, 30: 86.0, 11: 87.0, 6: 90.0, 26: 91.0, 3: 91.0, 8: 91.0, 24: 92.0, 19: 100.0, 18: 104.0, 4: 106.0, 29: 109.0, 21: 112.0, 28: 116.0, 17: 117.0, 16: 130.0, 9: 132.0, 25: 132.0, 12: 143.0}.toTable(), {14: @[14], 32: @[14, 32], 33: @[14, 33], 8: @[14, 33, 31, 0, 8], 9: @[14, 32, 2, 9], 13: @[14, 33, 13], 15: @[14, 32, 15], 18: @[14, 33, 18], 19: @[14, 33, 31, 0, 1, 19], 20: @[14, 32, 20], 22: @[14, 32, 22], 23: @[14, 33, 23], 26: @[14, 33, 26], 27: @[14, 33, 27], 28: @[14, 33, 31, 28], 29: @[14, 33, 29], 30: @[14, 33, 31, 0, 1, 30], 31: @[14, 33, 31], 0: @[14, 33, 31, 0], 1: @[14, 33, 31, 0, 1], 2: @[14, 32, 2], 3: @[14, 33, 13, 3], 24: @[14, 33, 27, 24], 25: @[14, 33, 27, 24, 25], 4: @[14, 33, 31, 0, 4], 5: @[14, 33, 31, 0, 5], 6: @[14, 33, 31, 0, 5, 6], 7: @[14, 32, 2, 7], 10: @[14, 33, 31, 0, 10], 11: @[14, 33, 31, 0, 11], 12: @[14, 33, 31, 0, 12], 17: @[14, 33, 31, 0, 1, 17], 21: @[14, 33, 31, 0, 21], 16: @[14, 33, 31, 0, 5, 16]}.toTable())), (15, ({15: 0.0, 32: 6.0, 2: 8.0, 22: 12.0, 20: 18.0, 7: 18.0, 1: 27.0, 30: 31.0, 0: 31.0, 31: 33.0, 8: 35.0, 33: 37.0, 13: 38.0, 5: 44.0, 27: 45.0, 19: 51.0, 10: 51.0, 23: 52.0, 11: 52.0, 18: 53.0, 6: 55.0, 3: 60.0, 17: 68.0, 4: 71.0, 14: 72.0, 9: 72.0, 26: 74.0, 21: 75.0, 24: 75.0, 28: 79.0, 29: 92.0, 16: 95.0, 12: 108.0, 25: 115.0}.toTable(), {15: @[15], 32: @[15, 32], 33: @[15, 32, 33], 2: @[15, 32, 2], 8: @[15, 32, 8], 14: @[15, 32, 14], 18: @[15, 32, 18], 20: @[15, 32, 20], 22: @[15, 32, 22], 23: @[15, 32, 23], 29: @[15, 32, 33, 29], 30: @[15, 32, 30], 31: @[15, 32, 2, 0, 31], 0: @[15, 32, 2, 0], 1: @[15, 32, 2, 7, 1], 3: @[15, 32, 2, 7, 3], 7: @[15, 32, 2, 7], 9: @[15, 32, 2, 9], 13: @[15, 32, 2, 13], 27: @[15, 32, 33, 27], 28: @[15, 32, 2, 28], 17: @[15, 32, 2, 7, 1, 17], 19: @[15, 32, 2, 7, 1, 19], 21: @[15, 32, 2, 7, 1, 21], 4: @[15, 32, 2, 0, 4], 5: @[15, 32, 2, 0, 5], 6: @[15, 32, 2, 0, 5, 6], 10: @[15, 32, 2, 0, 10], 11: @[15, 32, 2, 0, 11], 12: @[15, 32, 2, 0, 12], 24: @[15, 32, 33, 27, 24], 25: @[15, 32, 33, 27, 24, 25], 26: @[15, 32, 33, 26], 16: @[15, 32, 2, 0, 5, 16]}.toTable())), (16, ({16: 0.0, 5: 51.0, 6: 62.0, 0: 64.0, 10: 65.0, 31: 66.0, 1: 74.0, 33: 76.0, 13: 82.0, 7: 83.0, 30: 84.0, 27: 84.0, 11: 85.0, 2: 87.0, 8: 89.0, 32: 89.0, 23: 91.0, 15: 95.0, 22: 95.0, 19: 98.0, 20: 101.0, 4: 104.0, 21: 110.0, 26: 113.0, 3: 113.0, 24: 114.0, 17: 115.0, 28: 118.0, 18: 126.0, 14: 130.0, 29: 131.0, 12: 141.0, 9: 151.0, 25: 153.0}.toTable(), {16: @[16], 5: @[16, 5], 6: @[16, 5, 6], 0: @[16, 5, 0], 10: @[16, 5, 10], 4: @[16, 5, 0, 4], 1: @[16, 5, 0, 1], 2: @[16, 5, 0, 2], 3: @[16, 5, 0, 31, 33, 13, 3], 7: @[16, 5, 0, 1, 7], 8: @[16, 5, 0, 8], 11: @[16, 5, 0, 11], 12: @[16, 5, 0, 12], 13: @[16, 5, 0, 31, 33, 13], 17: @[16, 5, 0, 1, 17], 19: @[16, 5, 0, 1, 19], 21: @[16, 5, 0, 21], 31: @[16, 5, 0, 31], 24: @[16, 5, 0, 31, 33, 27, 24], 25: @[16, 5, 0, 31, 25], 28: @[16, 5, 0, 31, 28], 32: @[16, 5, 0, 2, 32], 33: @[16, 5, 0, 31, 33], 30: @[16, 5, 0, 1, 30], 9: @[16, 5, 0, 2, 9], 14: @[16, 5, 0, 31, 33, 14], 15: @[16, 5, 0, 2, 32, 15], 18: @[16, 5, 0, 31, 33, 18], 20: @[16, 5, 0, 2, 32, 20], 22: @[16, 5, 0, 2, 32, 22], 23: @[16, 5, 0, 31, 33, 23], 26: @[16, 5, 0, 31, 33, 26], 27: @[16, 5, 0, 31, 33, 27], 29: @[16, 5, 0, 31, 33, 29]}.toTable())), (17, ({17: 0.0, 1: 41.0, 7: 50.0, 0: 51.0, 30: 51.0, 31: 53.0, 2: 60.0, 32: 62.0, 33: 63.0, 5: 64.0, 19: 65.0, 15: 68.0, 22: 68.0, 13: 69.0, 10: 71.0, 27: 71.0, 11: 72.0, 20: 74.0, 6: 75.0, 8: 76.0, 23: 78.0, 21: 89.0, 4: 91.0, 3: 92.0, 26: 100.0, 24: 101.0, 28: 105.0, 18: 109.0, 16: 115.0, 14: 117.0, 29: 118.0, 9: 124.0, 12: 128.0, 25: 140.0}.toTable(), {17: @[17], 0: @[17, 1, 0], 1: @[17, 1], 2: @[17, 1, 7, 2], 3: @[17, 1, 7, 3], 7: @[17, 1, 7], 13: @[17, 1, 0, 31, 33, 13], 19: @[17, 1, 19], 21: @[17, 1, 21], 30: @[17, 1, 30], 4: @[17, 1, 0, 4], 5: @[17, 1, 0, 5], 6: @[17, 1, 0, 5, 6], 8: @[17, 1, 0, 8], 10: @[17, 1, 0, 10], 11: @[17, 1, 0, 11], 12: @[17, 1, 0, 12], 31: @[17, 1, 0, 31], 32: @[17, 1, 7, 2, 32], 33: @[17, 1, 0, 31, 33], 24: @[17, 1, 0, 31, 33, 27, 24], 25: @[17, 1, 0, 31, 25], 28: @[17, 1, 0, 31, 28], 9: @[17, 1, 7, 2, 9], 27: @[17, 1, 0, 31, 33, 27], 14: @[17, 1, 0, 31, 33, 14], 15: @[17, 1, 7, 2, 32, 15], 18: @[17, 1, 7, 2, 32, 18], 20: @[17, 1, 7, 2, 32, 20], 22: @[17, 1, 7, 2, 32, 22], 23: @[17, 1, 0, 31, 33, 23], 29: @[17, 1, 0, 31, 33, 29], 26: @[17, 1, 0, 31, 33, 26], 16: @[17, 1, 0, 5, 16]}.toTable())), (18, ({18: 0.0, 32: 47.0, 2: 49.0, 33: 50.0, 15: 53.0, 22: 53.0, 13: 56.0, 27: 58.0, 20: 59.0, 7: 59.0, 31: 60.0, 0: 62.0, 23: 65.0, 1: 68.0, 30: 72.0, 5: 75.0, 8: 76.0, 10: 82.0, 11: 83.0, 6: 86.0, 26: 87.0, 3: 87.0, 24: 88.0, 19: 92.0, 4: 102.0, 14: 104.0, 29: 105.0, 21: 108.0, 17: 109.0, 28: 112.0, 9: 113.0, 16: 126.0, 25: 128.0, 12: 139.0}.toTable(), {18: @[18], 32: @[18, 32], 33: @[18, 33], 2: @[18, 32, 2], 8: @[18, 32, 8], 14: @[18, 33, 14], 15: @[18, 32, 15], 20: @[18, 32, 20], 22: @[18, 32, 22], 23: @[18, 33, 23], 29: @[18, 33, 29], 30: @[18, 32, 30], 31: @[18, 33, 31], 0: @[18, 33, 31, 0], 1: @[18, 32, 2, 7, 1], 3: @[18, 33, 13, 3], 7: @[18, 32, 2, 7], 9: @[18, 32, 2, 9], 13: @[18, 33, 13], 27: @[18, 33, 27], 28: @[18, 33, 31, 28], 19: @[18, 32, 2, 7, 1, 19], 26: @[18, 33, 26], 24: @[18, 33, 27, 24], 25: @[18, 33, 27, 24, 25], 4: @[18, 33, 31, 0, 4], 5: @[18, 33, 31, 0, 5], 6: @[18, 33, 31, 0, 5, 6], 10: @[18, 33, 31, 0, 10], 11: @[18, 33, 31, 0, 11], 12: @[18, 33, 31, 0, 12], 17: @[18, 32, 2, 7, 1, 17], 21: @[18, 33, 31, 0, 21], 16: @[18, 33, 31, 0, 5, 16]}.toTable())), (19, ({19: 0.0, 1: 24.0, 7: 33.0, 0: 34.0, 30: 34.0, 31: 36.0, 2: 43.0, 32: 45.0, 33: 46.0, 5: 47.0, 15: 51.0, 22: 51.0, 13: 52.0, 10: 54.0, 27: 54.0, 11: 55.0, 20: 57.0, 6: 58.0, 8: 59.0, 23: 61.0, 17: 65.0, 21: 72.0, 4: 74.0, 3: 75.0, 26: 83.0, 24: 84.0, 28: 88.0, 18: 92.0, 16: 98.0, 14: 100.0, 29: 101.0, 9: 107.0, 12: 111.0, 25: 123.0}.toTable(), {19: @[19], 0: @[19, 1, 0], 1: @[19, 1], 33: @[19, 1, 0, 31, 33], 2: @[19, 1, 7, 2], 3: @[19, 1, 7, 3], 7: @[19, 1, 7], 13: @[19, 1, 0, 31, 33, 13], 17: @[19, 1, 17], 21: @[19, 1, 21], 30: @[19, 1, 30], 4: @[19, 1, 0, 4], 5: @[19, 1, 0, 5], 6: @[19, 1, 0, 5, 6], 8: @[19, 1, 0, 8], 10: @[19, 1, 0, 10], 11: @[19, 1, 0, 11], 12: @[19, 1, 0, 12], 31: @[19, 1, 0, 31], 32: @[19, 1, 7, 2, 32], 24: @[19, 1, 0, 31, 33, 27, 24], 25: @[19, 1, 0, 31, 25], 28: @[19, 1, 0, 31, 28], 9: @[19, 1, 7, 2, 9], 27: @[19, 1, 0, 31, 33, 27], 14: @[19, 1, 0, 31, 33, 14], 15: @[19, 1, 7, 2, 32, 15], 18: @[19, 1, 7, 2, 32, 18], 20: @[19, 1, 7, 2, 32, 20], 22: @[19, 1, 7, 2, 32, 22], 23: @[19, 1, 0, 31, 33, 23], 29: @[19, 1, 0, 31, 33, 29], 26: @[19, 1, 0, 31, 33, 26], 16: @[19, 1, 0, 5, 16]}.toTable())), (20, ({20: 0.0, 32: 12.0, 2: 14.0, 15: 18.0, 22: 18.0, 7: 24.0, 1: 33.0, 30: 37.0, 0: 37.0, 31: 39.0, 8: 41.0, 33: 43.0, 13: 44.0, 5: 50.0, 27: 51.0, 19: 57.0, 10: 57.0, 23: 58.0, 11: 58.0, 18: 59.0, 6: 61.0, 3: 66.0, 17: 74.0, 4: 77.0, 14: 78.0, 9: 78.0, 26: 80.0, 21: 81.0, 24: 81.0, 28: 85.0, 29: 98.0, 16: 101.0, 12: 114.0, 25: 121.0}.toTable(), {20: @[20], 32: @[20, 32], 33: @[20, 32, 33], 2: @[20, 32, 2], 8: @[20, 32, 8], 14: @[20, 32, 14], 15: @[20, 32, 15], 18: @[20, 32, 18], 22: @[20, 32, 22], 23: @[20, 32, 23], 29: @[20, 32, 33, 29], 30: @[20, 32, 30], 31: @[20, 32, 2, 0, 31], 0: @[20, 32, 2, 0], 1: @[20, 32, 2, 7, 1], 3: @[20, 32, 2, 7, 3], 7: @[20, 32, 2, 7], 9: @[20, 32, 2, 9], 13: @[20, 32, 2, 13], 27: @[20, 32, 33, 27], 28: @[20, 32, 2, 28], 17: @[20, 32, 2, 7, 1, 17], 19: @[20, 32, 2, 7, 1, 19], 21: @[20, 32, 2, 7, 1, 21], 4: @[20, 32, 2, 0, 4], 5: @[20, 32, 2, 0, 5], 6: @[20, 32, 2, 0, 5, 6], 10: @[20, 32, 2, 0, 10], 11: @[20, 32, 2, 0, 11], 12: @[20, 32, 2, 0, 12], 24: @[20, 32, 33, 27, 24], 25: @[20, 32, 33, 27, 24, 25], 26: @[20, 32, 33, 26], 16: @[20, 32, 2, 0, 5, 16]}.toTable())), (21, ({21: 0.0, 0: 46.0, 1: 48.0, 31: 48.0, 7: 57.0, 30: 58.0, 33: 58.0, 5: 59.0, 13: 64.0, 10: 66.0, 27: 66.0, 11: 67.0, 2: 67.0, 32: 69.0, 6: 70.0, 8: 71.0, 19: 72.0, 23: 73.0, 15: 75.0, 22: 75.0, 20: 81.0, 4: 86.0, 17: 89.0, 26: 95.0, 3: 95.0, 24: 96.0, 28: 100.0, 18: 108.0, 16: 110.0, 14: 112.0, 29: 113.0, 12: 123.0, 9: 131.0, 25: 135.0}.toTable(), {21: @[21], 0: @[21, 0], 1: @[21, 1], 2: @[21, 1, 7, 2], 3: @[21, 0, 31, 33, 13, 3], 4: @[21, 0, 4], 5: @[21, 0, 5], 6: @[21, 0, 5, 6], 7: @[21, 1, 7], 8: @[21, 0, 8], 10: @[21, 0, 10], 11: @[21, 0, 11], 12: @[21, 0, 12], 13: @[21, 0, 31, 33, 13], 17: @[21, 1, 17], 19: @[21, 1, 19], 31: @[21, 0, 31], 30: @[21, 1, 30], 24: @[21, 0, 31, 33, 27, 24], 25: @[21, 0, 31, 25], 28: @[21, 0, 31, 28], 32: @[21, 1, 7, 2, 32], 33: @[21, 0, 31, 33], 9: @[21, 1, 7, 2, 9], 14: @[21, 0, 31, 33, 14], 15: @[21, 1, 7, 2, 32, 15], 18: @[21, 0, 31, 33, 18], 20: @[21, 1, 7, 2, 32, 20], 22: @[21, 1, 7, 2, 32, 22], 23: @[21, 0, 31, 33, 23], 26: @[21, 0, 31, 33, 26], 27: @[21, 0, 31, 33, 27], 29: @[21, 0, 31, 33, 29], 16: @[21, 0, 5, 16]}.toTable())), (22, ({22: 0.0, 32: 6.0, 2: 8.0, 15: 12.0, 20: 18.0, 7: 18.0, 1: 27.0, 30: 31.0, 0: 31.0, 31: 33.0, 8: 35.0, 33: 37.0, 13: 38.0, 5: 44.0, 27: 45.0, 19: 51.0, 10: 51.0, 23: 52.0, 11: 52.0, 18: 53.0, 6: 55.0, 3: 60.0, 17: 68.0, 4: 71.0, 14: 72.0, 9: 72.0, 26: 74.0, 21: 75.0, 24: 75.0, 28: 79.0, 29: 92.0, 16: 95.0, 12: 108.0, 25: 115.0}.toTable(), {22: @[22], 32: @[22, 32], 33: @[22, 32, 33], 2: @[22, 32, 2], 8: @[22, 32, 8], 14: @[22, 32, 14], 15: @[22, 32, 15], 18: @[22, 32, 18], 20: @[22, 32, 20], 23: @[22, 32, 23], 29: @[22, 32, 33, 29], 30: @[22, 32, 30], 31: @[22, 32, 2, 0, 31], 0: @[22, 32, 2, 0], 1: @[22, 32, 2, 7, 1], 3: @[22, 32, 2, 7, 3], 7: @[22, 32, 2, 7], 9: @[22, 32, 2, 9], 13: @[22, 32, 2, 13], 27: @[22, 32, 33, 27], 28: @[22, 32, 2, 28], 17: @[22, 32, 2, 7, 1, 17], 19: @[22, 32, 2, 7, 1, 19], 21: @[22, 32, 2, 7, 1, 21], 4: @[22, 32, 2, 0, 4], 5: @[22, 32, 2, 0, 5], 6: @[22, 32, 2, 0, 5, 6], 10: @[22, 32, 2, 0, 10], 11: @[22, 32, 2, 0, 11], 12: @[22, 32, 2, 0, 12], 24: @[22, 32, 33, 27, 24], 25: @[22, 32, 33, 27, 24, 25], 26: @[22, 32, 33, 26], 16: @[22, 32, 2, 0, 5, 16]}.toTable())), (23, ({23: 0.0, 33: 15.0, 13: 21.0, 27: 23.0, 31: 25.0, 0: 27.0, 1: 37.0, 5: 40.0, 32: 46.0, 7: 46.0, 10: 47.0, 30: 47.0, 11: 48.0, 2: 48.0, 6: 51.0, 26: 52.0, 3: 52.0, 8: 52.0, 15: 52.0, 22: 52.0, 24: 53.0, 20: 58.0, 29: 59.0, 19: 61.0, 18: 65.0, 4: 67.0, 14: 69.0, 21: 73.0, 25: 75.0, 28: 77.0, 17: 78.0, 16: 91.0, 12: 104.0, 9: 112.0}.toTable(), {23: @[23], 25: @[23, 25], 27: @[23, 33, 27], 29: @[23, 29], 32: @[23, 32], 33: @[23, 33], 8: @[23, 33, 31, 0, 8], 9: @[23, 33, 9], 13: @[23, 33, 13], 14: @[23, 33, 14], 15: @[23, 32, 15], 18: @[23, 33, 18], 19: @[23, 33, 31, 0, 1, 19], 20: @[23, 32, 20], 22: @[23, 32, 22], 26: @[23, 33, 26], 28: @[23, 33, 31, 28], 30: @[23, 33, 31, 0, 1, 30], 31: @[23, 33, 31], 0: @[23, 33, 31, 0], 1: @[23, 33, 31, 0, 1], 2: @[23, 32, 2], 3: @[23, 33, 13, 3], 24: @[23, 33, 27, 24], 4: @[23, 33, 31, 0, 4], 5: @[23, 33, 31, 0, 5], 6: @[23, 33, 31, 0, 5, 6], 7: @[23, 33, 31, 0, 1, 7], 10: @[23, 33, 31, 0, 10], 11: @[23, 33, 31, 0, 11], 12: @[23, 33, 31, 0, 12], 17: @[23, 33, 31, 0, 1, 17], 21: @[23, 33, 31, 0, 21], 16: @[23, 33, 31, 0, 5, 16]}.toTable())), (24, ({24: 0.0, 27: 30.0, 33: 38.0, 25: 40.0, 13: 44.0, 31: 48.0, 0: 50.0, 23: 53.0, 1: 60.0, 5: 63.0, 32: 69.0, 7: 69.0, 10: 70.0, 30: 70.0, 11: 71.0, 2: 71.0, 6: 74.0, 26: 75.0, 3: 75.0, 8: 75.0, 15: 75.0, 22: 75.0, 20: 81.0, 19: 84.0, 18: 88.0, 4: 90.0, 14: 92.0, 29: 93.0, 21: 96.0, 28: 100.0, 17: 101.0, 16: 114.0, 12: 127.0, 9: 135.0}.toTable(), {24: @[24], 25: @[24, 25], 27: @[24, 27], 31: @[24, 27, 33, 31], 2: @[24, 27, 33, 32, 2], 23: @[24, 27, 33, 23], 33: @[24, 27, 33], 8: @[24, 27, 33, 31, 0, 8], 9: @[24, 27, 33, 9], 13: @[24, 27, 33, 13], 14: @[24, 27, 33, 14], 15: @[24, 27, 33, 32, 15], 18: @[24, 27, 33, 18], 19: @[24, 27, 33, 31, 0, 1, 19], 20: @[24, 27, 33, 32, 20], 22: @[24, 27, 33, 32, 22], 26: @[24, 27, 33, 26], 28: @[24, 27, 33, 31, 28], 29: @[24, 27, 33, 29], 30: @[24, 27, 33, 31, 0, 1, 30], 32: @[24, 27, 33, 32], 0: @[24, 27, 33, 31, 0], 1: @[24, 27, 33, 31, 0, 1], 3: @[24, 27, 33, 13, 3], 4: @[24, 27, 33, 31, 0, 4], 5: @[24, 27, 33, 31, 0, 5], 6: @[24, 27, 33, 31, 0, 5, 6], 7: @[24, 27, 33, 31, 0, 1, 7], 10: @[24, 27, 33, 31, 0, 10], 11: @[24, 27, 33, 31, 0, 11], 12: @[24, 27, 33, 31, 0, 12], 17: @[24, 27, 33, 31, 0, 1, 17], 21: @[24, 27, 33, 31, 0, 21], 16: @[24, 27, 33, 31, 0, 5, 16]}.toTable())), (25, ({25: 0.0, 24: 40.0, 27: 70.0, 23: 75.0, 33: 78.0, 13: 84.0, 31: 87.0, 0: 89.0, 1: 99.0, 5: 102.0, 7: 108.0, 32: 109.0, 10: 109.0, 30: 109.0, 11: 110.0, 2: 111.0, 6: 113.0, 8: 114.0, 26: 115.0, 3: 115.0, 15: 115.0, 22: 115.0, 20: 121.0, 19: 123.0, 18: 128.0, 4: 129.0, 14: 132.0, 29: 133.0, 21: 135.0, 28: 139.0, 17: 140.0, 16: 153.0, 12: 166.0, 9: 175.0}.toTable(), {25: @[25], 23: @[25, 23], 24: @[25, 24], 31: @[25, 31], 27: @[25, 24, 27], 2: @[25, 24, 27, 33, 32, 2], 33: @[25, 24, 27, 33], 29: @[25, 24, 27, 33, 29], 32: @[25, 24, 27, 33, 32], 8: @[25, 31, 0, 8], 9: @[25, 24, 27, 33, 9], 13: @[25, 24, 27, 33, 13], 14: @[25, 24, 27, 33, 14], 15: @[25, 24, 27, 33, 32, 15], 18: @[25, 24, 27, 33, 18], 19: @[25, 31, 0, 1, 19], 20: @[25, 24, 27, 33, 32, 20], 22: @[25, 24, 27, 33, 32, 22], 26: @[25, 24, 27, 33, 26], 28: @[25, 31, 28], 30: @[25, 31, 0, 1, 30], 0: @[25, 31, 0], 1: @[25, 31, 0, 1], 3: @[25, 24, 27, 33, 13, 3], 4: @[25, 31, 0, 4], 5: @[25, 31, 0, 5], 6: @[25, 31, 0, 5, 6], 7: @[25, 31, 0, 1, 7], 10: @[25, 31, 0, 10], 11: @[25, 31, 0, 11], 12: @[25, 31, 0, 12], 17: @[25, 31, 0, 1, 17], 21: @[25, 31, 0, 21], 16: @[25, 31, 0, 5, 16]}.toTable())), (26, ({26: 0.0, 33: 37.0, 13: 43.0, 27: 45.0, 29: 46.0, 31: 47.0, 0: 49.0, 23: 52.0, 1: 59.0, 5: 62.0, 32: 68.0, 7: 68.0, 10: 69.0, 30: 69.0, 11: 70.0, 2: 70.0, 6: 73.0, 3: 74.0, 8: 74.0, 15: 74.0, 22: 74.0, 24: 75.0, 20: 80.0, 19: 83.0, 18: 87.0, 4: 89.0, 14: 91.0, 21: 95.0, 28: 99.0, 17: 100.0, 16: 113.0, 25: 115.0, 12: 126.0, 9: 134.0}.toTable(), {26: @[26], 29: @[26, 29], 33: @[26, 33], 8: @[26, 33, 31, 0, 8], 9: @[26, 33, 9], 13: @[26, 33, 13], 14: @[26, 33, 14], 15: @[26, 33, 32, 15], 18: @[26, 33, 18], 19: @[26, 33, 31, 0, 1, 19], 20: @[26, 33, 32, 20], 22: @[26, 33, 32, 22], 23: @[26, 33, 23], 27: @[26, 33, 27], 28: @[26, 33, 31, 28], 30: @[26, 33, 31, 0, 1, 30], 31: @[26, 33, 31], 32: @[26, 33, 32], 0: @[26, 33, 31, 0], 1: @[26, 33, 31, 0, 1], 2: @[26, 33, 32, 2], 3: @[26, 33, 13, 3], 24: @[26, 33, 27, 24], 25: @[26, 33, 27, 24, 25], 4: @[26, 33, 31, 0, 4], 5: @[26, 33, 31, 0, 5], 6: @[26, 33, 31, 0, 5, 6], 7: @[26, 33, 31, 0, 1, 7], 10: @[26, 33, 31, 0, 10], 11: @[26, 33, 31, 0, 11], 12: @[26, 33, 31, 0, 12], 17: @[26, 33, 31, 0, 1, 17], 21: @[26, 33, 31, 0, 21], 16: @[26, 33, 31, 0, 5, 16]}.toTable())), (27, ({27: 0.0, 33: 8.0, 13: 14.0, 31: 18.0, 0: 20.0, 23: 23.0, 24: 30.0, 1: 30.0, 5: 33.0, 32: 39.0, 7: 39.0, 10: 40.0, 30: 40.0, 11: 41.0, 2: 41.0, 6: 44.0, 26: 45.0, 3: 45.0, 8: 45.0, 15: 45.0, 22: 45.0, 20: 51.0, 19: 54.0, 18: 58.0, 4: 60.0, 14: 62.0, 29: 63.0, 21: 66.0, 28: 70.0, 25: 70.0, 17: 71.0, 16: 84.0, 12: 97.0, 9: 105.0}.toTable(), {27: @[27], 2: @[27, 33, 32, 2], 23: @[27, 33, 23], 24: @[27, 24], 33: @[27, 33], 8: @[27, 33, 31, 0, 8], 9: @[27, 33, 9], 13: @[27, 33, 13], 14: @[27, 33, 14], 15: @[27, 33, 32, 15], 18: @[27, 33, 18], 19: @[27, 33, 31, 0, 1, 19], 20: @[27, 33, 32, 20], 22: @[27, 33, 32, 22], 26: @[27, 33, 26], 28: @[27, 33, 31, 28], 29: @[27, 33, 29], 30: @[27, 33, 31, 0, 1, 30], 31: @[27, 33, 31], 32: @[27, 33, 32], 0: @[27, 33, 31, 0], 1: @[27, 33, 31, 0, 1], 3: @[27, 33, 13, 3], 25: @[27, 24, 25], 4: @[27, 33, 31, 0, 4], 5: @[27, 33, 31, 0, 5], 6: @[27, 33, 31, 0, 5, 6], 7: @[27, 33, 31, 0, 1, 7], 10: @[27, 33, 31, 0, 10], 11: @[27, 33, 31, 0, 11], 12: @[27, 33, 31, 0, 12], 17: @[27, 33, 31, 0, 1, 17], 21: @[27, 33, 31, 0, 21], 16: @[27, 33, 31, 0, 5, 16]}.toTable())), (28, ({28: 0.0, 31: 52.0, 0: 54.0, 33: 62.0, 1: 64.0, 5: 67.0, 13: 68.0, 27: 70.0, 2: 71.0, 7: 73.0, 32: 73.0, 10: 74.0, 30: 74.0, 11: 75.0, 23: 77.0, 6: 78.0, 8: 79.0, 15: 79.0, 22: 79.0, 20: 85.0, 19: 88.0, 4: 94.0, 26: 99.0, 3: 99.0, 21: 100.0, 24: 100.0, 17: 105.0, 18: 112.0, 14: 116.0, 29: 117.0, 16: 118.0, 12: 131.0, 9: 135.0, 25: 139.0}.toTable(), {28: @[28], 2: @[28, 2], 31: @[28, 31], 33: @[28, 31, 33], 0: @[28, 31, 0], 24: @[28, 31, 33, 27, 24], 25: @[28, 31, 25], 32: @[28, 2, 32], 1: @[28, 31, 0, 1], 3: @[28, 31, 33, 13, 3], 4: @[28, 31, 0, 4], 5: @[28, 31, 0, 5], 6: @[28, 31, 0, 5, 6], 7: @[28, 31, 0, 1, 7], 8: @[28, 31, 0, 8], 10: @[28, 31, 0, 10], 11: @[28, 31, 0, 11], 12: @[28, 31, 0, 12], 13: @[28, 31, 33, 13], 17: @[28, 31, 0, 1, 17], 19: @[28, 31, 0, 1, 19], 21: @[28, 31, 0, 21], 9: @[28, 2, 9], 14: @[28, 31, 33, 14], 15: @[28, 2, 32, 15], 18: @[28, 31, 33, 18], 20: @[28, 2, 32, 20], 22: @[28, 2, 32, 22], 23: @[28, 31, 33, 23], 26: @[28, 31, 33, 26], 27: @[28, 31, 33, 27], 29: @[28, 31, 33, 29], 30: @[28, 31, 0, 1, 30], 16: @[28, 31, 0, 5, 16]}.toTable())), (29, ({29: 0.0, 26: 46.0, 33: 55.0, 23: 59.0, 13: 61.0, 27: 63.0, 31: 65.0, 0: 67.0, 1: 77.0, 5: 80.0, 32: 86.0, 7: 86.0, 10: 87.0, 30: 87.0, 11: 88.0, 2: 88.0, 6: 91.0, 3: 92.0, 8: 92.0, 15: 92.0, 22: 92.0, 24: 93.0, 20: 98.0, 19: 101.0, 18: 105.0, 4: 107.0, 14: 109.0, 21: 113.0, 28: 117.0, 17: 118.0, 16: 131.0, 25: 133.0, 12: 144.0, 9: 152.0}.toTable(), {29: @[29], 23: @[29, 23], 26: @[29, 26], 32: @[29, 33, 32], 33: @[29, 33], 8: @[29, 33, 31, 0, 8], 9: @[29, 33, 9], 13: @[29, 33, 13], 14: @[29, 33, 14], 15: @[29, 33, 32, 15], 18: @[29, 33, 18], 19: @[29, 33, 31, 0, 1, 19], 20: @[29, 33, 32, 20], 22: @[29, 33, 32, 22], 27: @[29, 33, 27], 28: @[29, 33, 31, 28], 30: @[29, 33, 31, 0, 1, 30], 31: @[29, 33, 31], 25: @[29, 33, 27, 24, 25], 0: @[29, 33, 31, 0], 1: @[29, 33, 31, 0, 1], 2: @[29, 33, 32, 2], 3: @[29, 33, 13, 3], 24: @[29, 33, 27, 24], 4: @[29, 33, 31, 0, 4], 5: @[29, 33, 31, 0, 5], 6: @[29, 33, 31, 0, 5, 6], 7: @[29, 33, 31, 0, 1, 7], 10: @[29, 33, 31, 0, 10], 11: @[29, 33, 31, 0, 11], 12: @[29, 33, 31, 0, 12], 17: @[29, 33, 31, 0, 1, 17], 21: @[29, 33, 31, 0, 21], 16: @[29, 33, 31, 0, 5, 16]}.toTable())), (30, ({30: 0.0, 1: 10.0, 7: 19.0, 0: 20.0, 31: 22.0, 32: 25.0, 2: 27.0, 15: 31.0, 22: 31.0, 33: 32.0, 5: 33.0, 19: 34.0, 20: 37.0, 13: 38.0, 10: 40.0, 27: 40.0, 11: 41.0, 6: 44.0, 8: 45.0, 23: 47.0, 17: 51.0, 21: 58.0, 4: 60.0, 3: 61.0, 26: 69.0, 24: 70.0, 18: 72.0, 28: 74.0, 16: 84.0, 14: 86.0, 29: 87.0, 9: 91.0, 12: 97.0, 25: 109.0}.toTable(), {30: @[30], 1: @[30, 1], 8: @[30, 1, 0, 8], 32: @[30, 32], 33: @[30, 1, 0, 31, 33], 0: @[30, 1, 0], 2: @[30, 32, 2], 3: @[30, 1, 7, 3], 7: @[30, 1, 7], 13: @[30, 1, 0, 31, 33, 13], 17: @[30, 1, 17], 19: @[30, 1, 19], 21: @[30, 1, 21], 4: @[30, 1, 0, 4], 5: @[30, 1, 0, 5], 6: @[30, 1, 0, 5, 6], 10: @[30, 1, 0, 10], 11: @[30, 1, 0, 11], 12: @[30, 1, 0, 12], 31: @[30, 1, 0, 31], 24: @[30, 1, 0, 31, 33, 27, 24], 25: @[30, 1, 0, 31, 25], 28: @[30, 1, 0, 31, 28], 14: @[30, 1, 0, 31, 33, 14], 15: @[30, 32, 15], 18: @[30, 32, 18], 20: @[30, 32, 20], 22: @[30, 32, 22], 23: @[30, 1, 0, 31, 33, 23], 29: @[30, 1, 0, 31, 33, 29], 9: @[30, 32, 2, 9], 27: @[30, 1, 0, 31, 33, 27], 26: @[30, 1, 0, 31, 33, 26], 16: @[30, 1, 0, 5, 16]}.toTable())), (31, ({31: 0.0, 0: 2.0, 33: 10.0, 1: 12.0, 5: 15.0, 13: 16.0, 27: 18.0, 7: 21.0, 10: 22.0, 30: 22.0, 11: 23.0, 2: 25.0, 23: 25.0, 6: 26.0, 8: 27.0, 32: 27.0, 15: 33.0, 22: 33.0, 19: 36.0, 20: 39.0, 4: 42.0, 26: 47.0, 3: 47.0, 21: 48.0, 24: 48.0, 28: 52.0, 17: 53.0, 18: 60.0, 14: 64.0, 29: 65.0, 16: 66.0, 12: 79.0, 25: 87.0, 9: 89.0}.toTable(), {31: @[31], 0: @[31, 0], 24: @[31, 33, 27, 24], 25: @[31, 25], 28: @[31, 28], 32: @[31, 0, 2, 32], 33: @[31, 33], 1: @[31, 0, 1], 2: @[31, 0, 2], 3: @[31, 33, 13, 3], 4: @[31, 0, 4], 5: @[31, 0, 5], 6: @[31, 0, 5, 6], 7: @[31, 0, 1, 7], 8: @[31, 0, 8], 10: @[31, 0, 10], 11: @[31, 0, 11], 12: @[31, 0, 12], 13: @[31, 33, 13], 17: @[31, 0, 1, 17], 19: @[31, 0, 1, 19], 21: @[31, 0, 21], 9: @[31, 0, 2, 9], 14: @[31, 33, 14], 15: @[31, 0, 2, 32, 15], 18: @[31, 33, 18], 20: @[31, 0, 2, 32, 20], 22: @[31, 0, 2, 32, 22], 23: @[31, 33, 23], 26: @[31, 33, 26], 27: @[31, 33, 27], 29: @[31, 33, 29], 30: @[31, 0, 1, 30], 16: @[31, 0, 5, 16]}.toTable())), (32, ({32: 0.0, 2: 2.0, 15: 6.0, 22: 6.0, 20: 12.0, 7: 12.0, 1: 21.0, 30: 25.0, 0: 25.0, 31: 27.0, 8: 29.0, 33: 31.0, 13: 32.0, 5: 38.0, 27: 39.0, 19: 45.0, 10: 45.0, 23: 46.0, 11: 46.0, 18: 47.0, 6: 49.0, 3: 54.0, 17: 62.0, 4: 65.0, 14: 66.0, 9: 66.0, 26: 68.0, 21: 69.0, 24: 69.0, 28: 73.0, 29: 86.0, 16: 89.0, 12: 102.0, 25: 109.0}.toTable(), {32: @[32], 2: @[32, 2], 8: @[32, 8], 14: @[32, 14], 15: @[32, 15], 18: @[32, 18], 20: @[32, 20], 22: @[32, 22], 23: @[32, 23], 29: @[32, 33, 29], 30: @[32, 30], 31: @[32, 2, 0, 31], 33: @[32, 33], 0: @[32, 2, 0], 1: @[32, 2, 7, 1], 3: @[32, 2, 7, 3], 7: @[32, 2, 7], 9: @[32, 2, 9], 13: @[32, 2, 13], 27: @[32, 33, 27], 28: @[32, 2, 28], 17: @[32, 2, 7, 1, 17], 19: @[32, 2, 7, 1, 19], 21: @[32, 2, 7, 1, 21], 4: @[32, 2, 0, 4], 5: @[32, 2, 0, 5], 6: @[32, 2, 0, 5, 6], 10: @[32, 2, 0, 10], 11: @[32, 2, 0, 11], 12: @[32, 2, 0, 12], 24: @[32, 33, 27, 24], 25: @[32, 33, 27, 24, 25], 26: @[32, 33, 26], 16: @[32, 2, 0, 5, 16]}.toTable())), (33, ({33: 0.0, 13: 6.0, 27: 8.0, 31: 10.0, 0: 12.0, 23: 15.0, 1: 22.0, 5: 25.0, 32: 31.0, 7: 31.0, 10: 32.0, 30: 32.0, 11: 33.0, 2: 33.0, 6: 36.0, 26: 37.0, 3: 37.0, 8: 37.0, 15: 37.0, 22: 37.0, 24: 38.0, 20: 43.0, 19: 46.0, 18: 50.0, 4: 52.0, 14: 54.0, 29: 55.0, 21: 58.0, 28: 62.0, 17: 63.0, 16: 76.0, 25: 78.0, 12: 89.0, 9: 97.0}.toTable(), {33: @[33], 8: @[33, 31, 0, 8], 9: @[33, 9], 13: @[33, 13], 14: @[33, 14], 15: @[33, 32, 15], 18: @[33, 18], 19: @[33, 31, 0, 1, 19], 20: @[33, 32, 20], 22: @[33, 32, 22], 23: @[33, 23], 26: @[33, 26], 27: @[33, 27], 28: @[33, 31, 28], 29: @[33, 29], 30: @[33, 31, 0, 1, 30], 31: @[33, 31], 32: @[33, 32], 0: @[33, 31, 0], 1: @[33, 31, 0, 1], 2: @[33, 32, 2], 3: @[33, 13, 3], 24: @[33, 27, 24], 25: @[33, 27, 24, 25], 4: @[33, 31, 0, 4], 5: @[33, 31, 0, 5], 6: @[33, 31, 0, 5, 6], 7: @[33, 31, 0, 1, 7], 10: @[33, 31, 0, 10], 11: @[33, 31, 0, 11], 12: @[33, 31, 0, 12], 17: @[33, 31, 0, 1, 17], 21: @[33, 31, 0, 21], 16: @[33, 31, 0, 5, 16]}.toTable()))]

test "all pairs dijkstra on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  var weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  check WDG.allPairsDijkstra(weight=weight).toSeq() == @[(0, ({ 0: 0.0, 13: 3.0, 7: 5.0, 33: 11.0, 5: 13.0, 19: 13.0, 31: 14.0, 8: 20.0, 21: 25.0, 6: 27.0, 17: 33.0, 32: 34.0, 10: 70.0, 4: 73.0, 12: 73.0, 16: 74.0, 3: 76.0, 1: 77.0, 2: 89.0, 11: 95.0, 30: 114.0, 27: 136.0, 9: 174.0, 28: 187.0 }.toTable(), { 0: @[0], 1: @[0, 1], 2: @[0, 1, 2], 3: @[0, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 6], 7: @[0, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 13], 17: @[0, 17], 19: @[0, 19], 21: @[0, 21], 31: @[0, 31], 33: @[0, 13, 33], 16: @[0, 6, 16], 32: @[0, 8, 32], 30: @[0, 1, 30], 9: @[0, 1, 2, 9], 27: @[0, 1, 2, 27], 28: @[0, 1, 2, 28] }.toTable())), (1, ({ 1: 0.0, 13: 9.0, 3: 11.0, 2: 12.0, 33: 17.0, 7: 26.0, 30: 37.0, 21: 38.0, 27: 59.0, 17: 63.0, 32: 68.0, 12: 79.0, 8: 81.0, 9: 97.0, 19: 100.0, 28: 110.0, 31: 194.0 }.toTable(), { 1: @[1], 2: @[1, 2], 3: @[1, 3], 7: @[1, 7], 13: @[1, 13], 17: @[1, 17], 19: @[1, 19], 21: @[1, 21], 30: @[1, 30], 33: @[1, 13, 33], 12: @[1, 3, 12], 8: @[1, 2, 8], 9: @[1, 2, 9], 27: @[1, 2, 27], 28: @[1, 2, 28], 32: @[1, 2, 32], 31: @[1, 2, 28, 31] }.toTable())), (2, ({ 2: 0.0, 13: 29.0, 33: 37.0, 27: 47.0, 32: 56.0, 8: 69.0, 7: 71.0, 9: 85.0, 3: 98.0, 28: 98.0, 12: 166.0, 30: 167.0, 31: 182.0 }.toTable(), { 2: @[2], 3: @[2, 3], 7: @[2, 7], 8: @[2, 8], 9: @[2, 9], 13: @[2, 13], 27: @[2, 27], 28: @[2, 28], 32: @[2, 32], 33: @[2, 13, 33], 30: @[2, 8, 30], 12: @[2, 3, 12], 31: @[2, 28, 31] }.toTable())), (3, ({ 3: 0.0, 7: 18.0, 13: 42.0, 33: 50.0, 12: 68.0 }.toTable(), { 3: @[3], 7: @[3, 7], 12: @[3, 12], 13: @[3, 13], 33: @[3, 13, 33] }.toTable())), (4, ({ 4: 0.0, 10: 5.0, 6: 83.0, 16: 130.0 }.toTable(), { 4: @[4], 6: @[4, 6], 10: @[4, 10], 16: @[4, 6, 16] }.toTable())), (5, ({ 5: 0.0, 6: 56.0, 10: 81.0, 16: 85.0 }.toTable(), { 5: @[5], 6: @[5, 6], 10: @[5, 10], 16: @[5, 16] }.toTable())), (6, ({ 6: 0.0, 16: 47.0 }.toTable(), { 6: @[6], 16: @[6, 16] }.toTable())), (7, ({ 7: 0.0 }.toTable(), { 7: @[7] }.toTable())), (8, ({ 8: 0.0, 33: 9.0, 32: 14.0, 30: 98.0 }.toTable(), { 8: @[8], 30: @[8, 30], 32: @[8, 32], 33: @[8, 33] }.toTable())), (9, ({ 9: 0.0, 33: 14.0 }.toTable(), { 9: @[9], 33: @[9, 33] }.toTable())), (10, ({ 10: 0.0 }.toTable(), { 10: @[10] }.toTable())), (11, ({ 11: 0.0 }.toTable(), { 11: @[11] }.toTable())), (12, ({ 12: 0.0 }.toTable(), { 12: @[12] }.toTable())), (13, ({ 13: 0.0, 33: 8.0 }.toTable(), { 13: @[13], 33: @[13, 33] }.toTable())), (14, ({ 14: 0.0, 32: 31.0, 33: 83.0 }.toTable(), { 14: @[14], 32: @[14, 32], 33: @[14, 33] }.toTable())), (15, ({ 15: 0.0, 32: 36.0, 33: 94.0 }.toTable(), { 15: @[15], 32: @[15, 32], 33: @[15, 33] }.toTable())), (16, ({ 16: 0.0 }.toTable(), { 16: @[16] }.toTable())), (17, ({ 17: 0.0 }.toTable(), { 17: @[17] }.toTable())), (18, ({ 18: 0.0, 33: 1.0, 32: 54.0 }.toTable(), { 18: @[18], 32: @[18, 32], 33: @[18, 33] }.toTable())), (19, ({ 19: 0.0, 33: 88.0 }.toTable(), { 19: @[19], 33: @[19, 33] }.toTable())), (20, ({ 20: 0.0, 32: 2.0, 33: 57.0 }.toTable(), { 20: @[20], 32: @[20, 32], 33: @[20, 33] }.toTable())), (21, ({ 21: 0.0 }.toTable(), { 21: @[21] }.toTable())), (22, ({ 22: 0.0, 33: 34.0, 32: 65.0 }.toTable(), { 22: @[22], 32: @[22, 32], 33: @[22, 33] }.toTable())), (23, ({ 23: 0.0, 33: 71.0, 29: 81.0, 25: 89.0, 32: 90.0, 27: 91.0, 31: 107.0 }.toTable(), { 23: @[23], 25: @[23, 25], 27: @[23, 27], 29: @[23, 29], 32: @[23, 32], 33: @[23, 33], 31: @[23, 25, 31] }.toTable())), (24, ({ 24: 0.0, 31: 46.0, 25: 55.0, 33: 78.0, 32: 94.0, 27: 97.0 }.toTable(), { 24: @[24], 25: @[24, 25], 27: @[24, 27], 31: @[24, 31], 32: @[24, 31, 32], 33: @[24, 31, 33] }.toTable())), (25, ({ 25: 0.0, 31: 18.0, 33: 50.0, 32: 66.0 }.toTable(), { 25: @[25], 31: @[25, 31], 32: @[25, 31, 32], 33: @[25, 31, 33] }.toTable())), (26, ({ 26: 0.0, 33: 44.0, 29: 62.0, 32: 93.0 }.toTable(), { 26: @[26], 29: @[26, 29], 33: @[26, 33], 32: @[26, 29, 32] }.toTable())), (27, ({ 27: 0.0, 33: 32.0 }.toTable(), { 27: @[27], 33: @[27, 33] }.toTable())), (28, ({ 28: 0.0, 33: 31.0, 31: 84.0, 32: 132.0 }.toTable(), { 28: @[28], 31: @[28, 31], 33: @[28, 33], 32: @[28, 31, 32] }.toTable())), (29, ({ 29: 0.0, 32: 31.0, 33: 33.0 }.toTable(), { 29: @[29], 32: @[29, 32], 33: @[29, 33] }.toTable())), (30, ({ 30: 0.0, 32: 57.0, 33: 92.0 }.toTable(), { 30: @[30], 32: @[30, 32], 33: @[30, 33] }.toTable())), (31, ({ 31: 0.0, 33: 32.0, 32: 48.0 }.toTable(), { 31: @[31], 32: @[31, 32], 33: @[31, 33] }.toTable())), (32, ({ 32: 0.0, 33: 67.0 }.toTable(), { 32: @[32], 33: @[32, 33] }.toTable())), (33, ({ 33: 0.0 }.toTable(), { 33: @[33] }.toTable()))]

test "all pairs dijkstra path length on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  var weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  var got: seq[tuple[node: Node, dist: Table[Node, float]]] = WG.allPairsDijkstraPathLength(weight=weight).toSeq()
  var expected: seq[tuple[node: Node, dist: Table[Node, float]]] = @[(0, {0: 0.0, 31: 2.0, 1: 10.0, 33: 12.0, 5: 13.0, 13: 18.0, 7: 19.0, 10: 20.0, 30: 20.0, 27: 20.0, 11: 21.0, 2: 23.0, 6: 24.0, 8: 25.0, 32: 25.0, 23: 27.0, 15: 31.0, 22: 31.0, 19: 34.0, 20: 37.0, 4: 40.0, 21: 46.0, 26: 49.0, 3: 49.0, 24: 50.0, 17: 51.0, 28: 54.0, 18: 62.0, 16: 64.0, 14: 66.0, 29: 67.0, 12: 77.0, 9: 87.0, 25: 89.0}.toTable()), (1, {1: 0.0, 7: 9.0, 0: 10.0, 30: 10.0, 31: 12.0, 2: 19.0, 32: 21.0, 33: 22.0, 5: 23.0, 19: 24.0, 15: 27.0, 22: 27.0, 13: 28.0, 10: 30.0, 27: 30.0, 11: 31.0, 20: 33.0, 6: 34.0, 8: 35.0, 23: 37.0, 17: 41.0, 21: 48.0, 4: 50.0, 3: 51.0, 26: 59.0, 24: 60.0, 28: 64.0, 18: 68.0, 16: 74.0, 14: 76.0, 29: 77.0, 9: 83.0, 12: 87.0, 25: 99.0}.toTable()), (2, {2: 0.0, 32: 2.0, 15: 8.0, 22: 8.0, 7: 10.0, 20: 14.0, 1: 19.0, 0: 23.0, 31: 25.0, 30: 27.0, 13: 30.0, 8: 31.0, 33: 33.0, 5: 36.0, 27: 41.0, 19: 43.0, 10: 43.0, 11: 44.0, 6: 47.0, 23: 48.0, 18: 49.0, 3: 52.0, 17: 60.0, 4: 63.0, 9: 64.0, 21: 67.0, 14: 68.0, 26: 70.0, 28: 71.0, 24: 71.0, 16: 87.0, 29: 88.0, 12: 100.0, 25: 111.0}.toTable()), (3, {3: 0.0, 13: 31.0, 33: 37.0, 7: 42.0, 27: 45.0, 31: 47.0, 0: 49.0, 1: 51.0, 23: 52.0, 2: 52.0, 32: 54.0, 15: 60.0, 22: 60.0, 30: 61.0, 5: 62.0, 20: 66.0, 10: 69.0, 11: 70.0, 6: 73.0, 26: 74.0, 8: 74.0, 24: 75.0, 19: 75.0, 18: 87.0, 4: 89.0, 14: 91.0, 29: 92.0, 17: 92.0, 21: 95.0, 12: 98.0, 28: 99.0, 16: 113.0, 25: 115.0, 9: 116.0}.toTable()), (4, {4: 0.0, 0: 40.0, 31: 42.0, 6: 44.0, 1: 50.0, 33: 52.0, 5: 53.0, 13: 58.0, 7: 59.0, 10: 60.0, 30: 60.0, 27: 60.0, 11: 61.0, 2: 63.0, 8: 65.0, 32: 65.0, 23: 67.0, 15: 71.0, 22: 71.0, 19: 74.0, 20: 77.0, 21: 86.0, 26: 89.0, 3: 89.0, 24: 90.0, 17: 91.0, 28: 94.0, 18: 102.0, 16: 104.0, 14: 106.0, 29: 107.0, 12: 117.0, 9: 127.0, 25: 129.0}.toTable()), (5, {5: 0.0, 6: 11.0, 0: 13.0, 10: 14.0, 31: 15.0, 1: 23.0, 33: 25.0, 13: 31.0, 7: 32.0, 30: 33.0, 27: 33.0, 11: 34.0, 2: 36.0, 8: 38.0, 32: 38.0, 23: 40.0, 15: 44.0, 22: 44.0, 19: 47.0, 20: 50.0, 16: 51.0, 4: 53.0, 21: 59.0, 26: 62.0, 3: 62.0, 24: 63.0, 17: 64.0, 28: 67.0, 18: 75.0, 14: 79.0, 29: 80.0, 12: 90.0, 9: 100.0, 25: 102.0}.toTable()), (6, {6: 0.0, 5: 11.0, 0: 24.0, 10: 25.0, 31: 26.0, 1: 34.0, 33: 36.0, 13: 42.0, 7: 43.0, 4: 44.0, 30: 44.0, 27: 44.0, 11: 45.0, 2: 47.0, 8: 49.0, 32: 49.0, 23: 51.0, 15: 55.0, 22: 55.0, 19: 58.0, 20: 61.0, 16: 62.0, 21: 70.0, 26: 73.0, 3: 73.0, 24: 74.0, 17: 75.0, 28: 78.0, 18: 86.0, 14: 90.0, 29: 91.0, 12: 101.0, 9: 111.0, 25: 113.0}.toTable()), (7, {7: 0.0, 1: 9.0, 2: 10.0, 32: 12.0, 15: 18.0, 22: 18.0, 0: 19.0, 30: 19.0, 31: 21.0, 20: 24.0, 33: 31.0, 5: 32.0, 19: 33.0, 13: 37.0, 10: 39.0, 27: 39.0, 11: 40.0, 8: 41.0, 3: 42.0, 6: 43.0, 23: 46.0, 17: 50.0, 21: 57.0, 18: 59.0, 4: 59.0, 26: 68.0, 24: 69.0, 28: 73.0, 9: 74.0, 14: 78.0, 16: 83.0, 29: 86.0, 12: 96.0, 25: 108.0}.toTable()), (8, {8: 0.0, 0: 25.0, 31: 27.0, 32: 29.0, 2: 31.0, 1: 35.0, 15: 35.0, 22: 35.0, 33: 37.0, 5: 38.0, 20: 41.0, 7: 41.0, 13: 43.0, 10: 45.0, 30: 45.0, 27: 45.0, 11: 46.0, 6: 49.0, 23: 52.0, 19: 59.0, 4: 65.0, 21: 71.0, 26: 74.0, 3: 74.0, 24: 75.0, 18: 76.0, 17: 76.0, 28: 79.0, 16: 89.0, 14: 91.0, 29: 92.0, 9: 95.0, 12: 102.0, 25: 114.0}.toTable()), (9, {9: 0.0, 2: 64.0, 32: 66.0, 15: 72.0, 22: 72.0, 7: 74.0, 20: 78.0, 1: 83.0, 0: 87.0, 31: 89.0, 30: 91.0, 13: 94.0, 8: 95.0, 33: 97.0, 5: 100.0, 27: 105.0, 19: 107.0, 10: 107.0, 11: 108.0, 6: 111.0, 23: 112.0, 18: 113.0, 3: 116.0, 17: 124.0, 4: 127.0, 21: 131.0, 14: 132.0, 26: 134.0, 28: 135.0, 24: 135.0, 16: 151.0, 29: 152.0, 12: 164.0, 25: 175.0}.toTable()), (10, {10: 0.0, 5: 14.0, 0: 20.0, 31: 22.0, 6: 25.0, 1: 30.0, 33: 32.0, 13: 38.0, 7: 39.0, 30: 40.0, 27: 40.0, 11: 41.0, 2: 43.0, 8: 45.0, 32: 45.0, 23: 47.0, 15: 51.0, 22: 51.0, 19: 54.0, 20: 57.0, 4: 60.0, 16: 65.0, 21: 66.0, 26: 69.0, 3: 69.0, 24: 70.0, 17: 71.0, 28: 74.0, 18: 82.0, 14: 86.0, 29: 87.0, 12: 97.0, 9: 107.0, 25: 109.0}.toTable()), (11, {11: 0.0, 0: 21.0, 31: 23.0, 1: 31.0, 33: 33.0, 5: 34.0, 13: 39.0, 7: 40.0, 10: 41.0, 30: 41.0, 27: 41.0, 2: 44.0, 6: 45.0, 8: 46.0, 32: 46.0, 23: 48.0, 15: 52.0, 22: 52.0, 19: 55.0, 20: 58.0, 4: 61.0, 21: 67.0, 26: 70.0, 3: 70.0, 24: 71.0, 17: 72.0, 28: 75.0, 18: 83.0, 16: 85.0, 14: 87.0, 29: 88.0, 12: 98.0, 9: 108.0, 25: 110.0}.toTable()), (12, {12: 0.0, 0: 77.0, 31: 79.0, 1: 87.0, 33: 89.0, 5: 90.0, 13: 95.0, 7: 96.0, 10: 97.0, 30: 97.0, 27: 97.0, 3: 98.0, 11: 98.0, 2: 100.0, 6: 101.0, 8: 102.0, 32: 102.0, 23: 104.0, 15: 108.0, 22: 108.0, 19: 111.0, 20: 114.0, 4: 117.0, 21: 123.0, 26: 126.0, 24: 127.0, 17: 128.0, 28: 131.0, 18: 139.0, 16: 141.0, 14: 143.0, 29: 144.0, 9: 164.0, 25: 166.0}.toTable()), (13, {13: 0.0, 33: 6.0, 27: 14.0, 31: 16.0, 0: 18.0, 23: 21.0, 1: 28.0, 2: 30.0, 3: 31.0, 5: 31.0, 32: 32.0, 7: 37.0, 10: 38.0, 30: 38.0, 15: 38.0, 22: 38.0, 11: 39.0, 6: 42.0, 26: 43.0, 8: 43.0, 24: 44.0, 20: 44.0, 19: 52.0, 18: 56.0, 4: 58.0, 14: 60.0, 29: 61.0, 21: 64.0, 28: 68.0, 17: 69.0, 16: 82.0, 25: 84.0, 9: 94.0, 12: 95.0}.toTable()), (14, {14: 0.0, 33: 54.0, 13: 60.0, 27: 62.0, 31: 64.0, 32: 66.0, 0: 66.0, 2: 68.0, 23: 69.0, 15: 72.0, 22: 72.0, 1: 76.0, 20: 78.0, 7: 78.0, 5: 79.0, 10: 86.0, 30: 86.0, 11: 87.0, 6: 90.0, 26: 91.0, 3: 91.0, 8: 91.0, 24: 92.0, 19: 100.0, 18: 104.0, 4: 106.0, 29: 109.0, 21: 112.0, 28: 116.0, 17: 117.0, 16: 130.0, 9: 132.0, 25: 132.0, 12: 143.0}.toTable()), (15, {15: 0.0, 32: 6.0, 2: 8.0, 22: 12.0, 20: 18.0, 7: 18.0, 1: 27.0, 30: 31.0, 0: 31.0, 31: 33.0, 8: 35.0, 33: 37.0, 13: 38.0, 5: 44.0, 27: 45.0, 19: 51.0, 10: 51.0, 23: 52.0, 11: 52.0, 18: 53.0, 6: 55.0, 3: 60.0, 17: 68.0, 4: 71.0, 14: 72.0, 9: 72.0, 26: 74.0, 21: 75.0, 24: 75.0, 28: 79.0, 29: 92.0, 16: 95.0, 12: 108.0, 25: 115.0}.toTable()), (16, {16: 0.0, 5: 51.0, 6: 62.0, 0: 64.0, 10: 65.0, 31: 66.0, 1: 74.0, 33: 76.0, 13: 82.0, 7: 83.0, 30: 84.0, 27: 84.0, 11: 85.0, 2: 87.0, 8: 89.0, 32: 89.0, 23: 91.0, 15: 95.0, 22: 95.0, 19: 98.0, 20: 101.0, 4: 104.0, 21: 110.0, 26: 113.0, 3: 113.0, 24: 114.0, 17: 115.0, 28: 118.0, 18: 126.0, 14: 130.0, 29: 131.0, 12: 141.0, 9: 151.0, 25: 153.0}.toTable()), (17, {17: 0.0, 1: 41.0, 7: 50.0, 0: 51.0, 30: 51.0, 31: 53.0, 2: 60.0, 32: 62.0, 33: 63.0, 5: 64.0, 19: 65.0, 15: 68.0, 22: 68.0, 13: 69.0, 10: 71.0, 27: 71.0, 11: 72.0, 20: 74.0, 6: 75.0, 8: 76.0, 23: 78.0, 21: 89.0, 4: 91.0, 3: 92.0, 26: 100.0, 24: 101.0, 28: 105.0, 18: 109.0, 16: 115.0, 14: 117.0, 29: 118.0, 9: 124.0, 12: 128.0, 25: 140.0}.toTable()), (18, {18: 0.0, 32: 47.0, 2: 49.0, 33: 50.0, 15: 53.0, 22: 53.0, 13: 56.0, 27: 58.0, 20: 59.0, 7: 59.0, 31: 60.0, 0: 62.0, 23: 65.0, 1: 68.0, 30: 72.0, 5: 75.0, 8: 76.0, 10: 82.0, 11: 83.0, 6: 86.0, 26: 87.0, 3: 87.0, 24: 88.0, 19: 92.0, 4: 102.0, 14: 104.0, 29: 105.0, 21: 108.0, 17: 109.0, 28: 112.0, 9: 113.0, 16: 126.0, 25: 128.0, 12: 139.0}.toTable()), (19, {19: 0.0, 1: 24.0, 7: 33.0, 0: 34.0, 30: 34.0, 31: 36.0, 2: 43.0, 32: 45.0, 33: 46.0, 5: 47.0, 15: 51.0, 22: 51.0, 13: 52.0, 10: 54.0, 27: 54.0, 11: 55.0, 20: 57.0, 6: 58.0, 8: 59.0, 23: 61.0, 17: 65.0, 21: 72.0, 4: 74.0, 3: 75.0, 26: 83.0, 24: 84.0, 28: 88.0, 18: 92.0, 16: 98.0, 14: 100.0, 29: 101.0, 9: 107.0, 12: 111.0, 25: 123.0}.toTable()), (20, {20: 0.0, 32: 12.0, 2: 14.0, 15: 18.0, 22: 18.0, 7: 24.0, 1: 33.0, 30: 37.0, 0: 37.0, 31: 39.0, 8: 41.0, 33: 43.0, 13: 44.0, 5: 50.0, 27: 51.0, 19: 57.0, 10: 57.0, 23: 58.0, 11: 58.0, 18: 59.0, 6: 61.0, 3: 66.0, 17: 74.0, 4: 77.0, 14: 78.0, 9: 78.0, 26: 80.0, 21: 81.0, 24: 81.0, 28: 85.0, 29: 98.0, 16: 101.0, 12: 114.0, 25: 121.0}.toTable()), (21, {21: 0.0, 0: 46.0, 1: 48.0, 31: 48.0, 7: 57.0, 30: 58.0, 33: 58.0, 5: 59.0, 13: 64.0, 10: 66.0, 27: 66.0, 11: 67.0, 2: 67.0, 32: 69.0, 6: 70.0, 8: 71.0, 19: 72.0, 23: 73.0, 15: 75.0, 22: 75.0, 20: 81.0, 4: 86.0, 17: 89.0, 26: 95.0, 3: 95.0, 24: 96.0, 28: 100.0, 18: 108.0, 16: 110.0, 14: 112.0, 29: 113.0, 12: 123.0, 9: 131.0, 25: 135.0}.toTable()), (22, {22: 0.0, 32: 6.0, 2: 8.0, 15: 12.0, 20: 18.0, 7: 18.0, 1: 27.0, 30: 31.0, 0: 31.0, 31: 33.0, 8: 35.0, 33: 37.0, 13: 38.0, 5: 44.0, 27: 45.0, 19: 51.0, 10: 51.0, 23: 52.0, 11: 52.0, 18: 53.0, 6: 55.0, 3: 60.0, 17: 68.0, 4: 71.0, 14: 72.0, 9: 72.0, 26: 74.0, 21: 75.0, 24: 75.0, 28: 79.0, 29: 92.0, 16: 95.0, 12: 108.0, 25: 115.0}.toTable()), (23, {23: 0.0, 33: 15.0, 13: 21.0, 27: 23.0, 31: 25.0, 0: 27.0, 1: 37.0, 5: 40.0, 32: 46.0, 7: 46.0, 10: 47.0, 30: 47.0, 11: 48.0, 2: 48.0, 6: 51.0, 26: 52.0, 3: 52.0, 8: 52.0, 15: 52.0, 22: 52.0, 24: 53.0, 20: 58.0, 29: 59.0, 19: 61.0, 18: 65.0, 4: 67.0, 14: 69.0, 21: 73.0, 25: 75.0, 28: 77.0, 17: 78.0, 16: 91.0, 12: 104.0, 9: 112.0}.toTable()), (24, {24: 0.0, 27: 30.0, 33: 38.0, 25: 40.0, 13: 44.0, 31: 48.0, 0: 50.0, 23: 53.0, 1: 60.0, 5: 63.0, 32: 69.0, 7: 69.0, 10: 70.0, 30: 70.0, 11: 71.0, 2: 71.0, 6: 74.0, 26: 75.0, 3: 75.0, 8: 75.0, 15: 75.0, 22: 75.0, 20: 81.0, 19: 84.0, 18: 88.0, 4: 90.0, 14: 92.0, 29: 93.0, 21: 96.0, 28: 100.0, 17: 101.0, 16: 114.0, 12: 127.0, 9: 135.0}.toTable()), (25, {25: 0.0, 24: 40.0, 27: 70.0, 23: 75.0, 33: 78.0, 13: 84.0, 31: 87.0, 0: 89.0, 1: 99.0, 5: 102.0, 7: 108.0, 32: 109.0, 10: 109.0, 30: 109.0, 11: 110.0, 2: 111.0, 6: 113.0, 8: 114.0, 26: 115.0, 3: 115.0, 15: 115.0, 22: 115.0, 20: 121.0, 19: 123.0, 18: 128.0, 4: 129.0, 14: 132.0, 29: 133.0, 21: 135.0, 28: 139.0, 17: 140.0, 16: 153.0, 12: 166.0, 9: 175.0}.toTable()), (26, {26: 0.0, 33: 37.0, 13: 43.0, 27: 45.0, 29: 46.0, 31: 47.0, 0: 49.0, 23: 52.0, 1: 59.0, 5: 62.0, 32: 68.0, 7: 68.0, 10: 69.0, 30: 69.0, 11: 70.0, 2: 70.0, 6: 73.0, 3: 74.0, 8: 74.0, 15: 74.0, 22: 74.0, 24: 75.0, 20: 80.0, 19: 83.0, 18: 87.0, 4: 89.0, 14: 91.0, 21: 95.0, 28: 99.0, 17: 100.0, 16: 113.0, 25: 115.0, 12: 126.0, 9: 134.0}.toTable()), (27, {27: 0.0, 33: 8.0, 13: 14.0, 31: 18.0, 0: 20.0, 23: 23.0, 24: 30.0, 1: 30.0, 5: 33.0, 32: 39.0, 7: 39.0, 10: 40.0, 30: 40.0, 11: 41.0, 2: 41.0, 6: 44.0, 26: 45.0, 3: 45.0, 8: 45.0, 15: 45.0, 22: 45.0, 20: 51.0, 19: 54.0, 18: 58.0, 4: 60.0, 14: 62.0, 29: 63.0, 21: 66.0, 28: 70.0, 25: 70.0, 17: 71.0, 16: 84.0, 12: 97.0, 9: 105.0}.toTable()), (28, {28: 0.0, 31: 52.0, 0: 54.0, 33: 62.0, 1: 64.0, 5: 67.0, 13: 68.0, 27: 70.0, 2: 71.0, 7: 73.0, 32: 73.0, 10: 74.0, 30: 74.0, 11: 75.0, 23: 77.0, 6: 78.0, 8: 79.0, 15: 79.0, 22: 79.0, 20: 85.0, 19: 88.0, 4: 94.0, 26: 99.0, 3: 99.0, 21: 100.0, 24: 100.0, 17: 105.0, 18: 112.0, 14: 116.0, 29: 117.0, 16: 118.0, 12: 131.0, 9: 135.0, 25: 139.0}.toTable()), (29, {29: 0.0, 26: 46.0, 33: 55.0, 23: 59.0, 13: 61.0, 27: 63.0, 31: 65.0, 0: 67.0, 1: 77.0, 5: 80.0, 32: 86.0, 7: 86.0, 10: 87.0, 30: 87.0, 11: 88.0, 2: 88.0, 6: 91.0, 3: 92.0, 8: 92.0, 15: 92.0, 22: 92.0, 24: 93.0, 20: 98.0, 19: 101.0, 18: 105.0, 4: 107.0, 14: 109.0, 21: 113.0, 28: 117.0, 17: 118.0, 16: 131.0, 25: 133.0, 12: 144.0, 9: 152.0}.toTable()), (30, {30: 0.0, 1: 10.0, 7: 19.0, 0: 20.0, 31: 22.0, 32: 25.0, 2: 27.0, 15: 31.0, 22: 31.0, 33: 32.0, 5: 33.0, 19: 34.0, 20: 37.0, 13: 38.0, 10: 40.0, 27: 40.0, 11: 41.0, 6: 44.0, 8: 45.0, 23: 47.0, 17: 51.0, 21: 58.0, 4: 60.0, 3: 61.0, 26: 69.0, 24: 70.0, 18: 72.0, 28: 74.0, 16: 84.0, 14: 86.0, 29: 87.0, 9: 91.0, 12: 97.0, 25: 109.0}.toTable()), (31, {31: 0.0, 0: 2.0, 33: 10.0, 1: 12.0, 5: 15.0, 13: 16.0, 27: 18.0, 7: 21.0, 10: 22.0, 30: 22.0, 11: 23.0, 2: 25.0, 23: 25.0, 6: 26.0, 8: 27.0, 32: 27.0, 15: 33.0, 22: 33.0, 19: 36.0, 20: 39.0, 4: 42.0, 26: 47.0, 3: 47.0, 21: 48.0, 24: 48.0, 28: 52.0, 17: 53.0, 18: 60.0, 14: 64.0, 29: 65.0, 16: 66.0, 12: 79.0, 25: 87.0, 9: 89.0}.toTable()), (32, {32: 0.0, 2: 2.0, 15: 6.0, 22: 6.0, 20: 12.0, 7: 12.0, 1: 21.0, 30: 25.0, 0: 25.0, 31: 27.0, 8: 29.0, 33: 31.0, 13: 32.0, 5: 38.0, 27: 39.0, 19: 45.0, 10: 45.0, 23: 46.0, 11: 46.0, 18: 47.0, 6: 49.0, 3: 54.0, 17: 62.0, 4: 65.0, 14: 66.0, 9: 66.0, 26: 68.0, 21: 69.0, 24: 69.0, 28: 73.0, 29: 86.0, 16: 89.0, 12: 102.0, 25: 109.0}.toTable()), (33, {33: 0.0, 13: 6.0, 27: 8.0, 31: 10.0, 0: 12.0, 23: 15.0, 1: 22.0, 5: 25.0, 32: 31.0, 7: 31.0, 10: 32.0, 30: 32.0, 11: 33.0, 2: 33.0, 6: 36.0, 26: 37.0, 3: 37.0, 8: 37.0, 15: 37.0, 22: 37.0, 24: 38.0, 20: 43.0, 19: 46.0, 18: 50.0, 4: 52.0, 14: 54.0, 29: 55.0, 21: 58.0, 28: 62.0, 17: 63.0, 16: 76.0, 25: 78.0, 12: 89.0, 9: 97.0}.toTable())]
  check got == expected

test "all pairs dijkstra path length on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  var weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  var got: seq[tuple[node: Node, dist: Table[Node, float]]] = WDG.allPairsDijkstraPathLength(weight=weight).toSeq()
  var expected: seq[tuple[node: Node, dist: Table[Node, float]]] = @[(0, {0: 0.0, 13: 3.0, 7: 5.0, 33: 11.0, 5: 13.0, 19: 13.0, 31: 14.0, 8: 20.0, 21: 25.0, 6: 27.0, 17: 33.0, 32: 34.0, 10: 70.0, 4: 73.0, 12: 73.0, 16: 74.0, 3: 76.0, 1: 77.0, 2: 89.0, 11: 95.0, 30: 114.0, 27: 136.0, 9: 174.0, 28: 187.0}.toTable()), (1, {1: 0.0, 13: 9.0, 3: 11.0, 2: 12.0, 33: 17.0, 7: 26.0, 30: 37.0, 21: 38.0, 27: 59.0, 17: 63.0, 32: 68.0, 12: 79.0, 8: 81.0, 9: 97.0, 19: 100.0, 28: 110.0, 31: 194.0}.toTable()), (2, {2: 0.0, 13: 29.0, 33: 37.0, 27: 47.0, 32: 56.0, 8: 69.0, 7: 71.0, 9: 85.0, 3: 98.0, 28: 98.0, 12: 166.0, 30: 167.0, 31: 182.0}.toTable()), (3, {3: 0.0, 7: 18.0, 13: 42.0, 33: 50.0, 12: 68.0}.toTable()), (4, {4: 0.0, 10: 5.0, 6: 83.0, 16: 130.0}.toTable()), (5, {5: 0.0, 6: 56.0, 10: 81.0, 16: 85.0}.toTable()), (6, {6: 0.0, 16: 47.0}.toTable()), (7, {7: 0.0}.toTable()), (8, {8: 0.0, 33: 9.0, 32: 14.0, 30: 98.0}.toTable()), (9, {9: 0.0, 33: 14.0}.toTable()), (10, {10: 0.0}.toTable()), (11, {11: 0.0}.toTable()), (12, {12: 0.0}.toTable()), (13, {13: 0.0, 33: 8.0}.toTable()), (14, {14: 0.0, 32: 31.0, 33: 83.0}.toTable()), (15, {15: 0.0, 32: 36.0, 33: 94.0}.toTable()), (16, {16: 0.0}.toTable()), (17, {17: 0.0}.toTable()), (18, {18: 0.0, 33: 1.0, 32: 54.0}.toTable()), (19, {19: 0.0, 33: 88.0}.toTable()), (20, {20: 0.0, 32: 2.0, 33: 57.0}.toTable()), (21, {21: 0.0}.toTable()), (22, {22: 0.0, 33: 34.0, 32: 65.0}.toTable()), (23, {23: 0.0, 33: 71.0, 29: 81.0, 25: 89.0, 32: 90.0, 27: 91.0, 31: 107.0}.toTable()), (24, {24: 0.0, 31: 46.0, 25: 55.0, 33: 78.0, 32: 94.0, 27: 97.0}.toTable()), (25, {25: 0.0, 31: 18.0, 33: 50.0, 32: 66.0}.toTable()), (26, {26: 0.0, 33: 44.0, 29: 62.0, 32: 93.0}.toTable()), (27, {27: 0.0, 33: 32.0}.toTable()), (28, {28: 0.0, 33: 31.0, 31: 84.0, 32: 132.0}.toTable()), (29, {29: 0.0, 32: 31.0, 33: 33.0}.toTable()), (30, {30: 0.0, 32: 57.0, 33: 92.0}.toTable()), (31, {31: 0.0, 33: 32.0, 32: 48.0}.toTable()), (32, {32: 0.0, 33: 67.0}.toTable()), (33, {33: 0.0}.toTable())]
  check got == expected

test "all pairs dijkstra path on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  var weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  var got: seq[tuple[node: Node, paths: Table[Node, seq[Node]]]] = WG.allPairsDijkstraPath(weight=weight).toSeq()
  var expected: seq[tuple[node: Node, paths: Table[Node, seq[Node]]]] = @[(0, { 0: @[0], 1: @[0, 1], 2: @[0, 2], 3: @[0, 31, 33, 13, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 5, 6], 7: @[0, 1, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 31, 33, 13], 17: @[0, 1, 17], 19: @[0, 1, 19], 21: @[0, 21], 31: @[0, 31], 24: @[0, 31, 33, 27, 24], 25: @[0, 31, 25], 28: @[0, 31, 28], 32: @[0, 2, 32], 33: @[0, 31, 33], 30: @[0, 1, 30], 9: @[0, 2, 9], 14: @[0, 31, 33, 14], 15: @[0, 2, 32, 15], 18: @[0, 31, 33, 18], 20: @[0, 2, 32, 20], 22: @[0, 2, 32, 22], 23: @[0, 31, 33, 23], 26: @[0, 31, 33, 26], 27: @[0, 31, 33, 27], 29: @[0, 31, 33, 29], 16: @[0, 5, 16] }.toTable()), (1, { 1: @[1], 0: @[1, 0], 2: @[1, 7, 2], 3: @[1, 7, 3], 7: @[1, 7], 13: @[1, 0, 31, 33, 13], 17: @[1, 17], 19: @[1, 19], 21: @[1, 21], 30: @[1, 30], 4: @[1, 0, 4], 5: @[1, 0, 5], 6: @[1, 0, 5, 6], 8: @[1, 0, 8], 10: @[1, 0, 10], 11: @[1, 0, 11], 12: @[1, 0, 12], 31: @[1, 0, 31], 32: @[1, 7, 2, 32], 33: @[1, 0, 31, 33], 24: @[1, 0, 31, 33, 27, 24], 25: @[1, 0, 31, 25], 28: @[1, 0, 31, 28], 9: @[1, 7, 2, 9], 27: @[1, 0, 31, 33, 27], 14: @[1, 0, 31, 33, 14], 15: @[1, 7, 2, 32, 15], 18: @[1, 7, 2, 32, 18], 20: @[1, 7, 2, 32, 20], 22: @[1, 7, 2, 32, 22], 23: @[1, 0, 31, 33, 23], 29: @[1, 0, 31, 33, 29], 26: @[1, 0, 31, 33, 26], 16: @[1, 0, 5, 16] }.toTable()), (2, { 2: @[2], 0: @[2, 0], 1: @[2, 7, 1], 3: @[2, 7, 3], 7: @[2, 7], 8: @[2, 32, 8], 9: @[2, 9], 13: @[2, 13], 27: @[2, 32, 33, 27], 28: @[2, 28], 32: @[2, 32], 14: @[2, 32, 14], 15: @[2, 32, 15], 18: @[2, 32, 18], 20: @[2, 32, 20], 22: @[2, 32, 22], 23: @[2, 32, 23], 29: @[2, 32, 33, 29], 30: @[2, 32, 30], 31: @[2, 0, 31], 33: @[2, 32, 33], 17: @[2, 7, 1, 17], 19: @[2, 7, 1, 19], 21: @[2, 7, 1, 21], 4: @[2, 0, 4], 5: @[2, 0, 5], 6: @[2, 0, 5, 6], 10: @[2, 0, 10], 11: @[2, 0, 11], 12: @[2, 0, 12], 24: @[2, 32, 33, 27, 24], 25: @[2, 32, 33, 27, 24, 25], 26: @[2, 32, 33, 26], 16: @[2, 0, 5, 16] }.toTable()), (3, { 3: @[3], 0: @[3, 13, 33, 31, 0], 1: @[3, 7, 1], 2: @[3, 7, 2], 7: @[3, 7], 12: @[3, 12], 13: @[3, 13], 33: @[3, 13, 33], 8: @[3, 13, 33, 31, 0, 8], 9: @[3, 7, 2, 9], 14: @[3, 13, 33, 14], 15: @[3, 7, 2, 32, 15], 18: @[3, 13, 33, 18], 19: @[3, 7, 1, 19], 20: @[3, 7, 2, 32, 20], 22: @[3, 7, 2, 32, 22], 23: @[3, 13, 33, 23], 26: @[3, 13, 33, 26], 27: @[3, 13, 33, 27], 28: @[3, 13, 33, 31, 28], 29: @[3, 13, 33, 29], 30: @[3, 7, 1, 30], 31: @[3, 13, 33, 31], 32: @[3, 7, 2, 32], 24: @[3, 13, 33, 27, 24], 25: @[3, 13, 33, 27, 24, 25], 4: @[3, 13, 33, 31, 0, 4], 5: @[3, 13, 33, 31, 0, 5], 6: @[3, 13, 33, 31, 0, 5, 6], 10: @[3, 13, 33, 31, 0, 10], 11: @[3, 13, 33, 31, 0, 11], 17: @[3, 7, 1, 17], 21: @[3, 13, 33, 31, 0, 21], 16: @[3, 13, 33, 31, 0, 5, 16] }.toTable()), (4, { 4: @[4], 0: @[4, 0], 6: @[4, 6], 10: @[4, 0, 10], 1: @[4, 0, 1], 2: @[4, 0, 2], 3: @[4, 0, 31, 33, 13, 3], 5: @[4, 0, 5], 7: @[4, 0, 1, 7], 8: @[4, 0, 8], 11: @[4, 0, 11], 12: @[4, 0, 12], 13: @[4, 0, 31, 33, 13], 17: @[4, 0, 1, 17], 19: @[4, 0, 1, 19], 21: @[4, 0, 21], 31: @[4, 0, 31], 24: @[4, 0, 31, 33, 27, 24], 25: @[4, 0, 31, 25], 28: @[4, 0, 31, 28], 32: @[4, 0, 2, 32], 33: @[4, 0, 31, 33], 16: @[4, 0, 5, 16], 30: @[4, 0, 1, 30], 9: @[4, 0, 2, 9], 14: @[4, 0, 31, 33, 14], 15: @[4, 0, 2, 32, 15], 18: @[4, 0, 31, 33, 18], 20: @[4, 0, 2, 32, 20], 22: @[4, 0, 2, 32, 22], 23: @[4, 0, 31, 33, 23], 26: @[4, 0, 31, 33, 26], 27: @[4, 0, 31, 33, 27], 29: @[4, 0, 31, 33, 29] }.toTable()), (5, { 5: @[5], 0: @[5, 0], 6: @[5, 6], 10: @[5, 10], 16: @[5, 16], 4: @[5, 0, 4], 1: @[5, 0, 1], 2: @[5, 0, 2], 3: @[5, 0, 31, 33, 13, 3], 7: @[5, 0, 1, 7], 8: @[5, 0, 8], 11: @[5, 0, 11], 12: @[5, 0, 12], 13: @[5, 0, 31, 33, 13], 17: @[5, 0, 1, 17], 19: @[5, 0, 1, 19], 21: @[5, 0, 21], 31: @[5, 0, 31], 24: @[5, 0, 31, 33, 27, 24], 25: @[5, 0, 31, 25], 28: @[5, 0, 31, 28], 32: @[5, 0, 2, 32], 33: @[5, 0, 31, 33], 30: @[5, 0, 1, 30], 9: @[5, 0, 2, 9], 14: @[5, 0, 31, 33, 14], 15: @[5, 0, 2, 32, 15], 18: @[5, 0, 31, 33, 18], 20: @[5, 0, 2, 32, 20], 22: @[5, 0, 2, 32, 22], 23: @[5, 0, 31, 33, 23], 26: @[5, 0, 31, 33, 26], 27: @[5, 0, 31, 33, 27], 29: @[5, 0, 31, 33, 29] }.toTable()), (6, { 6: @[6], 0: @[6, 5, 0], 4: @[6, 4], 5: @[6, 5], 16: @[6, 5, 16], 10: @[6, 5, 10], 1: @[6, 5, 0, 1], 2: @[6, 5, 0, 2], 3: @[6, 5, 0, 31, 33, 13, 3], 7: @[6, 5, 0, 1, 7], 8: @[6, 5, 0, 8], 11: @[6, 5, 0, 11], 12: @[6, 5, 0, 12], 13: @[6, 5, 0, 31, 33, 13], 17: @[6, 5, 0, 1, 17], 19: @[6, 5, 0, 1, 19], 21: @[6, 5, 0, 21], 31: @[6, 5, 0, 31], 24: @[6, 5, 0, 31, 33, 27, 24], 25: @[6, 5, 0, 31, 25], 28: @[6, 5, 0, 31, 28], 32: @[6, 5, 0, 2, 32], 33: @[6, 5, 0, 31, 33], 30: @[6, 5, 0, 1, 30], 9: @[6, 5, 0, 2, 9], 14: @[6, 5, 0, 31, 33, 14], 15: @[6, 5, 0, 2, 32, 15], 18: @[6, 5, 0, 31, 33, 18], 20: @[6, 5, 0, 2, 32, 20], 22: @[6, 5, 0, 2, 32, 22], 23: @[6, 5, 0, 31, 33, 23], 26: @[6, 5, 0, 31, 33, 26], 27: @[6, 5, 0, 31, 33, 27], 29: @[6, 5, 0, 31, 33, 29] }.toTable()), (7, { 7: @[7], 0: @[7, 1, 0], 1: @[7, 1], 2: @[7, 2], 3: @[7, 3], 13: @[7, 1, 0, 31, 33, 13], 17: @[7, 1, 17], 19: @[7, 1, 19], 21: @[7, 1, 21], 30: @[7, 1, 30], 8: @[7, 2, 32, 8], 9: @[7, 2, 9], 27: @[7, 1, 0, 31, 33, 27], 28: @[7, 1, 0, 31, 28], 32: @[7, 2, 32], 14: @[7, 2, 32, 14], 15: @[7, 2, 32, 15], 18: @[7, 2, 32, 18], 20: @[7, 2, 32, 20], 22: @[7, 2, 32, 22], 23: @[7, 1, 0, 31, 33, 23], 29: @[7, 1, 0, 31, 33, 29], 31: @[7, 1, 0, 31], 33: @[7, 1, 0, 31, 33], 4: @[7, 1, 0, 4], 5: @[7, 1, 0, 5], 6: @[7, 1, 0, 5, 6], 10: @[7, 1, 0, 10], 11: @[7, 1, 0, 11], 12: @[7, 1, 0, 12], 24: @[7, 1, 0, 31, 33, 27, 24], 25: @[7, 1, 0, 31, 25], 26: @[7, 1, 0, 31, 33, 26], 16: @[7, 1, 0, 5, 16] }.toTable()), (8, { 8: @[8], 0: @[8, 0], 2: @[8, 32, 2], 30: @[8, 0, 1, 30], 32: @[8, 32], 33: @[8, 0, 31, 33], 1: @[8, 0, 1], 3: @[8, 0, 31, 33, 13, 3], 4: @[8, 0, 4], 5: @[8, 0, 5], 6: @[8, 0, 5, 6], 7: @[8, 32, 2, 7], 10: @[8, 0, 10], 11: @[8, 0, 11], 12: @[8, 0, 12], 13: @[8, 0, 31, 33, 13], 17: @[8, 0, 1, 17], 19: @[8, 0, 1, 19], 21: @[8, 0, 21], 31: @[8, 0, 31], 24: @[8, 0, 31, 33, 27, 24], 25: @[8, 0, 31, 25], 28: @[8, 0, 31, 28], 14: @[8, 0, 31, 33, 14], 15: @[8, 32, 15], 18: @[8, 32, 18], 20: @[8, 32, 20], 22: @[8, 32, 22], 23: @[8, 0, 31, 33, 23], 29: @[8, 0, 31, 33, 29], 9: @[8, 32, 2, 9], 27: @[8, 0, 31, 33, 27], 26: @[8, 0, 31, 33, 26], 16: @[8, 0, 5, 16] }.toTable()), (9, { 9: @[9], 2: @[9, 2], 33: @[9, 33], 0: @[9, 2, 0], 1: @[9, 2, 7, 1], 3: @[9, 2, 7, 3], 7: @[9, 2, 7], 8: @[9, 2, 32, 8], 13: @[9, 2, 13], 27: @[9, 33, 27], 28: @[9, 2, 28], 32: @[9, 2, 32], 14: @[9, 2, 32, 14], 15: @[9, 2, 32, 15], 18: @[9, 2, 32, 18], 20: @[9, 2, 32, 20], 22: @[9, 2, 32, 22], 23: @[9, 2, 32, 23], 29: @[9, 33, 29], 30: @[9, 2, 32, 30], 31: @[9, 2, 0, 31], 17: @[9, 2, 7, 1, 17], 19: @[9, 2, 7, 1, 19], 21: @[9, 2, 7, 1, 21], 4: @[9, 2, 0, 4], 5: @[9, 2, 0, 5], 6: @[9, 2, 0, 5, 6], 10: @[9, 2, 0, 10], 11: @[9, 2, 0, 11], 12: @[9, 2, 0, 12], 24: @[9, 33, 27, 24], 25: @[9, 33, 27, 24, 25], 26: @[9, 33, 26], 16: @[9, 2, 0, 5, 16] }.toTable()), (10, { 10: @[10], 0: @[10, 0], 4: @[10, 0, 4], 5: @[10, 5], 6: @[10, 5, 6], 16: @[10, 5, 16], 1: @[10, 0, 1], 2: @[10, 0, 2], 3: @[10, 0, 31, 33, 13, 3], 7: @[10, 0, 1, 7], 8: @[10, 0, 8], 11: @[10, 0, 11], 12: @[10, 0, 12], 13: @[10, 0, 31, 33, 13], 17: @[10, 0, 1, 17], 19: @[10, 0, 1, 19], 21: @[10, 0, 21], 31: @[10, 0, 31], 24: @[10, 0, 31, 33, 27, 24], 25: @[10, 0, 31, 25], 28: @[10, 0, 31, 28], 32: @[10, 0, 2, 32], 33: @[10, 0, 31, 33], 30: @[10, 0, 1, 30], 9: @[10, 0, 2, 9], 14: @[10, 0, 31, 33, 14], 15: @[10, 0, 2, 32, 15], 18: @[10, 0, 31, 33, 18], 20: @[10, 0, 2, 32, 20], 22: @[10, 0, 2, 32, 22], 23: @[10, 0, 31, 33, 23], 26: @[10, 0, 31, 33, 26], 27: @[10, 0, 31, 33, 27], 29: @[10, 0, 31, 33, 29] }.toTable()), (11, { 11: @[11], 0: @[11, 0], 1: @[11, 0, 1], 2: @[11, 0, 2], 3: @[11, 0, 31, 33, 13, 3], 4: @[11, 0, 4], 5: @[11, 0, 5], 6: @[11, 0, 5, 6], 7: @[11, 0, 1, 7], 8: @[11, 0, 8], 10: @[11, 0, 10], 12: @[11, 0, 12], 13: @[11, 0, 31, 33, 13], 17: @[11, 0, 1, 17], 19: @[11, 0, 1, 19], 21: @[11, 0, 21], 31: @[11, 0, 31], 24: @[11, 0, 31, 33, 27, 24], 25: @[11, 0, 31, 25], 28: @[11, 0, 31, 28], 32: @[11, 0, 2, 32], 33: @[11, 0, 31, 33], 30: @[11, 0, 1, 30], 9: @[11, 0, 2, 9], 14: @[11, 0, 31, 33, 14], 15: @[11, 0, 2, 32, 15], 18: @[11, 0, 31, 33, 18], 20: @[11, 0, 2, 32, 20], 22: @[11, 0, 2, 32, 22], 23: @[11, 0, 31, 33, 23], 26: @[11, 0, 31, 33, 26], 27: @[11, 0, 31, 33, 27], 29: @[11, 0, 31, 33, 29], 16: @[11, 0, 5, 16] }.toTable()), (12, { 12: @[12], 0: @[12, 0], 3: @[12, 3], 1: @[12, 0, 1], 2: @[12, 0, 2], 4: @[12, 0, 4], 5: @[12, 0, 5], 6: @[12, 0, 5, 6], 7: @[12, 0, 1, 7], 8: @[12, 0, 8], 10: @[12, 0, 10], 11: @[12, 0, 11], 13: @[12, 0, 31, 33, 13], 17: @[12, 0, 1, 17], 19: @[12, 0, 1, 19], 21: @[12, 0, 21], 31: @[12, 0, 31], 24: @[12, 0, 31, 33, 27, 24], 25: @[12, 0, 31, 25], 28: @[12, 0, 31, 28], 32: @[12, 0, 2, 32], 33: @[12, 0, 31, 33], 30: @[12, 0, 1, 30], 9: @[12, 0, 2, 9], 14: @[12, 0, 31, 33, 14], 15: @[12, 0, 2, 32, 15], 18: @[12, 0, 31, 33, 18], 20: @[12, 0, 2, 32, 20], 22: @[12, 0, 2, 32, 22], 23: @[12, 0, 31, 33, 23], 26: @[12, 0, 31, 33, 26], 27: @[12, 0, 31, 33, 27], 29: @[12, 0, 31, 33, 29], 16: @[12, 0, 5, 16] }.toTable()), (13, { 13: @[13], 0: @[13, 33, 31, 0], 1: @[13, 33, 31, 0, 1], 2: @[13, 2], 3: @[13, 3], 33: @[13, 33], 8: @[13, 33, 31, 0, 8], 9: @[13, 2, 9], 14: @[13, 33, 14], 15: @[13, 2, 32, 15], 18: @[13, 33, 18], 19: @[13, 33, 31, 0, 1, 19], 20: @[13, 2, 32, 20], 22: @[13, 2, 32, 22], 23: @[13, 33, 23], 26: @[13, 33, 26], 27: @[13, 33, 27], 28: @[13, 33, 31, 28], 29: @[13, 33, 29], 30: @[13, 33, 31, 0, 1, 30], 31: @[13, 33, 31], 32: @[13, 2, 32], 24: @[13, 33, 27, 24], 25: @[13, 33, 27, 24, 25], 4: @[13, 33, 31, 0, 4], 5: @[13, 33, 31, 0, 5], 6: @[13, 33, 31, 0, 5, 6], 7: @[13, 33, 31, 0, 1, 7], 10: @[13, 33, 31, 0, 10], 11: @[13, 33, 31, 0, 11], 12: @[13, 33, 31, 0, 12], 17: @[13, 33, 31, 0, 1, 17], 21: @[13, 33, 31, 0, 21], 16: @[13, 33, 31, 0, 5, 16] }.toTable()), (14, { 14: @[14], 32: @[14, 32], 33: @[14, 33], 8: @[14, 33, 31, 0, 8], 9: @[14, 32, 2, 9], 13: @[14, 33, 13], 15: @[14, 32, 15], 18: @[14, 33, 18], 19: @[14, 33, 31, 0, 1, 19], 20: @[14, 32, 20], 22: @[14, 32, 22], 23: @[14, 33, 23], 26: @[14, 33, 26], 27: @[14, 33, 27], 28: @[14, 33, 31, 28], 29: @[14, 33, 29], 30: @[14, 33, 31, 0, 1, 30], 31: @[14, 33, 31], 0: @[14, 33, 31, 0], 1: @[14, 33, 31, 0, 1], 2: @[14, 32, 2], 3: @[14, 33, 13, 3], 24: @[14, 33, 27, 24], 25: @[14, 33, 27, 24, 25], 4: @[14, 33, 31, 0, 4], 5: @[14, 33, 31, 0, 5], 6: @[14, 33, 31, 0, 5, 6], 7: @[14, 32, 2, 7], 10: @[14, 33, 31, 0, 10], 11: @[14, 33, 31, 0, 11], 12: @[14, 33, 31, 0, 12], 17: @[14, 33, 31, 0, 1, 17], 21: @[14, 33, 31, 0, 21], 16: @[14, 33, 31, 0, 5, 16] }.toTable()), (15, { 15: @[15], 32: @[15, 32], 33: @[15, 32, 33], 2: @[15, 32, 2], 8: @[15, 32, 8], 14: @[15, 32, 14], 18: @[15, 32, 18], 20: @[15, 32, 20], 22: @[15, 32, 22], 23: @[15, 32, 23], 29: @[15, 32, 33, 29], 30: @[15, 32, 30], 31: @[15, 32, 2, 0, 31], 0: @[15, 32, 2, 0], 1: @[15, 32, 2, 7, 1], 3: @[15, 32, 2, 7, 3], 7: @[15, 32, 2, 7], 9: @[15, 32, 2, 9], 13: @[15, 32, 2, 13], 27: @[15, 32, 33, 27], 28: @[15, 32, 2, 28], 17: @[15, 32, 2, 7, 1, 17], 19: @[15, 32, 2, 7, 1, 19], 21: @[15, 32, 2, 7, 1, 21], 4: @[15, 32, 2, 0, 4], 5: @[15, 32, 2, 0, 5], 6: @[15, 32, 2, 0, 5, 6], 10: @[15, 32, 2, 0, 10], 11: @[15, 32, 2, 0, 11], 12: @[15, 32, 2, 0, 12], 24: @[15, 32, 33, 27, 24], 25: @[15, 32, 33, 27, 24, 25], 26: @[15, 32, 33, 26], 16: @[15, 32, 2, 0, 5, 16] }.toTable()), (16, { 16: @[16], 5: @[16, 5], 6: @[16, 5, 6], 0: @[16, 5, 0], 10: @[16, 5, 10], 4: @[16, 5, 0, 4], 1: @[16, 5, 0, 1], 2: @[16, 5, 0, 2], 3: @[16, 5, 0, 31, 33, 13, 3], 7: @[16, 5, 0, 1, 7], 8: @[16, 5, 0, 8], 11: @[16, 5, 0, 11], 12: @[16, 5, 0, 12], 13: @[16, 5, 0, 31, 33, 13], 17: @[16, 5, 0, 1, 17], 19: @[16, 5, 0, 1, 19], 21: @[16, 5, 0, 21], 31: @[16, 5, 0, 31], 24: @[16, 5, 0, 31, 33, 27, 24], 25: @[16, 5, 0, 31, 25], 28: @[16, 5, 0, 31, 28], 32: @[16, 5, 0, 2, 32], 33: @[16, 5, 0, 31, 33], 30: @[16, 5, 0, 1, 30], 9: @[16, 5, 0, 2, 9], 14: @[16, 5, 0, 31, 33, 14], 15: @[16, 5, 0, 2, 32, 15], 18: @[16, 5, 0, 31, 33, 18], 20: @[16, 5, 0, 2, 32, 20], 22: @[16, 5, 0, 2, 32, 22], 23: @[16, 5, 0, 31, 33, 23], 26: @[16, 5, 0, 31, 33, 26], 27: @[16, 5, 0, 31, 33, 27], 29: @[16, 5, 0, 31, 33, 29] }.toTable()), (17, { 17: @[17], 0: @[17, 1, 0], 1: @[17, 1], 2: @[17, 1, 7, 2], 3: @[17, 1, 7, 3], 7: @[17, 1, 7], 13: @[17, 1, 0, 31, 33, 13], 19: @[17, 1, 19], 21: @[17, 1, 21], 30: @[17, 1, 30], 4: @[17, 1, 0, 4], 5: @[17, 1, 0, 5], 6: @[17, 1, 0, 5, 6], 8: @[17, 1, 0, 8], 10: @[17, 1, 0, 10], 11: @[17, 1, 0, 11], 12: @[17, 1, 0, 12], 31: @[17, 1, 0, 31], 32: @[17, 1, 7, 2, 32], 33: @[17, 1, 0, 31, 33], 24: @[17, 1, 0, 31, 33, 27, 24], 25: @[17, 1, 0, 31, 25], 28: @[17, 1, 0, 31, 28], 9: @[17, 1, 7, 2, 9], 27: @[17, 1, 0, 31, 33, 27], 14: @[17, 1, 0, 31, 33, 14], 15: @[17, 1, 7, 2, 32, 15], 18: @[17, 1, 7, 2, 32, 18], 20: @[17, 1, 7, 2, 32, 20], 22: @[17, 1, 7, 2, 32, 22], 23: @[17, 1, 0, 31, 33, 23], 29: @[17, 1, 0, 31, 33, 29], 26: @[17, 1, 0, 31, 33, 26], 16: @[17, 1, 0, 5, 16] }.toTable()), (18, { 18: @[18], 32: @[18, 32], 33: @[18, 33], 2: @[18, 32, 2], 8: @[18, 32, 8], 14: @[18, 33, 14], 15: @[18, 32, 15], 20: @[18, 32, 20], 22: @[18, 32, 22], 23: @[18, 33, 23], 29: @[18, 33, 29], 30: @[18, 32, 30], 31: @[18, 33, 31], 0: @[18, 33, 31, 0], 1: @[18, 32, 2, 7, 1], 3: @[18, 33, 13, 3], 7: @[18, 32, 2, 7], 9: @[18, 32, 2, 9], 13: @[18, 33, 13], 27: @[18, 33, 27], 28: @[18, 33, 31, 28], 19: @[18, 32, 2, 7, 1, 19], 26: @[18, 33, 26], 24: @[18, 33, 27, 24], 25: @[18, 33, 27, 24, 25], 4: @[18, 33, 31, 0, 4], 5: @[18, 33, 31, 0, 5], 6: @[18, 33, 31, 0, 5, 6], 10: @[18, 33, 31, 0, 10], 11: @[18, 33, 31, 0, 11], 12: @[18, 33, 31, 0, 12], 17: @[18, 32, 2, 7, 1, 17], 21: @[18, 33, 31, 0, 21], 16: @[18, 33, 31, 0, 5, 16] }.toTable()), (19, { 19: @[19], 0: @[19, 1, 0], 1: @[19, 1], 33: @[19, 1, 0, 31, 33], 2: @[19, 1, 7, 2], 3: @[19, 1, 7, 3], 7: @[19, 1, 7], 13: @[19, 1, 0, 31, 33, 13], 17: @[19, 1, 17], 21: @[19, 1, 21], 30: @[19, 1, 30], 4: @[19, 1, 0, 4], 5: @[19, 1, 0, 5], 6: @[19, 1, 0, 5, 6], 8: @[19, 1, 0, 8], 10: @[19, 1, 0, 10], 11: @[19, 1, 0, 11], 12: @[19, 1, 0, 12], 31: @[19, 1, 0, 31], 32: @[19, 1, 7, 2, 32], 24: @[19, 1, 0, 31, 33, 27, 24], 25: @[19, 1, 0, 31, 25], 28: @[19, 1, 0, 31, 28], 9: @[19, 1, 7, 2, 9], 27: @[19, 1, 0, 31, 33, 27], 14: @[19, 1, 0, 31, 33, 14], 15: @[19, 1, 7, 2, 32, 15], 18: @[19, 1, 7, 2, 32, 18], 20: @[19, 1, 7, 2, 32, 20], 22: @[19, 1, 7, 2, 32, 22], 23: @[19, 1, 0, 31, 33, 23], 29: @[19, 1, 0, 31, 33, 29], 26: @[19, 1, 0, 31, 33, 26], 16: @[19, 1, 0, 5, 16] }.toTable()), (20, { 20: @[20], 32: @[20, 32], 33: @[20, 32, 33], 2: @[20, 32, 2], 8: @[20, 32, 8], 14: @[20, 32, 14], 15: @[20, 32, 15], 18: @[20, 32, 18], 22: @[20, 32, 22], 23: @[20, 32, 23], 29: @[20, 32, 33, 29], 30: @[20, 32, 30], 31: @[20, 32, 2, 0, 31], 0: @[20, 32, 2, 0], 1: @[20, 32, 2, 7, 1], 3: @[20, 32, 2, 7, 3], 7: @[20, 32, 2, 7], 9: @[20, 32, 2, 9], 13: @[20, 32, 2, 13], 27: @[20, 32, 33, 27], 28: @[20, 32, 2, 28], 17: @[20, 32, 2, 7, 1, 17], 19: @[20, 32, 2, 7, 1, 19], 21: @[20, 32, 2, 7, 1, 21], 4: @[20, 32, 2, 0, 4], 5: @[20, 32, 2, 0, 5], 6: @[20, 32, 2, 0, 5, 6], 10: @[20, 32, 2, 0, 10], 11: @[20, 32, 2, 0, 11], 12: @[20, 32, 2, 0, 12], 24: @[20, 32, 33, 27, 24], 25: @[20, 32, 33, 27, 24, 25], 26: @[20, 32, 33, 26], 16: @[20, 32, 2, 0, 5, 16] }.toTable()), (21, { 21: @[21], 0: @[21, 0], 1: @[21, 1], 2: @[21, 1, 7, 2], 3: @[21, 0, 31, 33, 13, 3], 4: @[21, 0, 4], 5: @[21, 0, 5], 6: @[21, 0, 5, 6], 7: @[21, 1, 7], 8: @[21, 0, 8], 10: @[21, 0, 10], 11: @[21, 0, 11], 12: @[21, 0, 12], 13: @[21, 0, 31, 33, 13], 17: @[21, 1, 17], 19: @[21, 1, 19], 31: @[21, 0, 31], 30: @[21, 1, 30], 24: @[21, 0, 31, 33, 27, 24], 25: @[21, 0, 31, 25], 28: @[21, 0, 31, 28], 32: @[21, 1, 7, 2, 32], 33: @[21, 0, 31, 33], 9: @[21, 1, 7, 2, 9], 14: @[21, 0, 31, 33, 14], 15: @[21, 1, 7, 2, 32, 15], 18: @[21, 0, 31, 33, 18], 20: @[21, 1, 7, 2, 32, 20], 22: @[21, 1, 7, 2, 32, 22], 23: @[21, 0, 31, 33, 23], 26: @[21, 0, 31, 33, 26], 27: @[21, 0, 31, 33, 27], 29: @[21, 0, 31, 33, 29], 16: @[21, 0, 5, 16] }.toTable()), (22, { 22: @[22], 32: @[22, 32], 33: @[22, 32, 33], 2: @[22, 32, 2], 8: @[22, 32, 8], 14: @[22, 32, 14], 15: @[22, 32, 15], 18: @[22, 32, 18], 20: @[22, 32, 20], 23: @[22, 32, 23], 29: @[22, 32, 33, 29], 30: @[22, 32, 30], 31: @[22, 32, 2, 0, 31], 0: @[22, 32, 2, 0], 1: @[22, 32, 2, 7, 1], 3: @[22, 32, 2, 7, 3], 7: @[22, 32, 2, 7], 9: @[22, 32, 2, 9], 13: @[22, 32, 2, 13], 27: @[22, 32, 33, 27], 28: @[22, 32, 2, 28], 17: @[22, 32, 2, 7, 1, 17], 19: @[22, 32, 2, 7, 1, 19], 21: @[22, 32, 2, 7, 1, 21], 4: @[22, 32, 2, 0, 4], 5: @[22, 32, 2, 0, 5], 6: @[22, 32, 2, 0, 5, 6], 10: @[22, 32, 2, 0, 10], 11: @[22, 32, 2, 0, 11], 12: @[22, 32, 2, 0, 12], 24: @[22, 32, 33, 27, 24], 25: @[22, 32, 33, 27, 24, 25], 26: @[22, 32, 33, 26], 16: @[22, 32, 2, 0, 5, 16] }.toTable()), (23, { 23: @[23], 25: @[23, 25], 27: @[23, 33, 27], 29: @[23, 29], 32: @[23, 32], 33: @[23, 33], 8: @[23, 33, 31, 0, 8], 9: @[23, 33, 9], 13: @[23, 33, 13], 14: @[23, 33, 14], 15: @[23, 32, 15], 18: @[23, 33, 18], 19: @[23, 33, 31, 0, 1, 19], 20: @[23, 32, 20], 22: @[23, 32, 22], 26: @[23, 33, 26], 28: @[23, 33, 31, 28], 30: @[23, 33, 31, 0, 1, 30], 31: @[23, 33, 31], 0: @[23, 33, 31, 0], 1: @[23, 33, 31, 0, 1], 2: @[23, 32, 2], 3: @[23, 33, 13, 3], 24: @[23, 33, 27, 24], 4: @[23, 33, 31, 0, 4], 5: @[23, 33, 31, 0, 5], 6: @[23, 33, 31, 0, 5, 6], 7: @[23, 33, 31, 0, 1, 7], 10: @[23, 33, 31, 0, 10], 11: @[23, 33, 31, 0, 11], 12: @[23, 33, 31, 0, 12], 17: @[23, 33, 31, 0, 1, 17], 21: @[23, 33, 31, 0, 21], 16: @[23, 33, 31, 0, 5, 16] }.toTable()), (24, { 24: @[24], 25: @[24, 25], 27: @[24, 27], 31: @[24, 27, 33, 31], 2: @[24, 27, 33, 32, 2], 23: @[24, 27, 33, 23], 33: @[24, 27, 33], 8: @[24, 27, 33, 31, 0, 8], 9: @[24, 27, 33, 9], 13: @[24, 27, 33, 13], 14: @[24, 27, 33, 14], 15: @[24, 27, 33, 32, 15], 18: @[24, 27, 33, 18], 19: @[24, 27, 33, 31, 0, 1, 19], 20: @[24, 27, 33, 32, 20], 22: @[24, 27, 33, 32, 22], 26: @[24, 27, 33, 26], 28: @[24, 27, 33, 31, 28], 29: @[24, 27, 33, 29], 30: @[24, 27, 33, 31, 0, 1, 30], 32: @[24, 27, 33, 32], 0: @[24, 27, 33, 31, 0], 1: @[24, 27, 33, 31, 0, 1], 3: @[24, 27, 33, 13, 3], 4: @[24, 27, 33, 31, 0, 4], 5: @[24, 27, 33, 31, 0, 5], 6: @[24, 27, 33, 31, 0, 5, 6], 7: @[24, 27, 33, 31, 0, 1, 7], 10: @[24, 27, 33, 31, 0, 10], 11: @[24, 27, 33, 31, 0, 11], 12: @[24, 27, 33, 31, 0, 12], 17: @[24, 27, 33, 31, 0, 1, 17], 21: @[24, 27, 33, 31, 0, 21], 16: @[24, 27, 33, 31, 0, 5, 16] }.toTable()), (25, { 25: @[25], 23: @[25, 23], 24: @[25, 24], 31: @[25, 31], 27: @[25, 24, 27], 2: @[25, 24, 27, 33, 32, 2], 33: @[25, 24, 27, 33], 29: @[25, 24, 27, 33, 29], 32: @[25, 24, 27, 33, 32], 8: @[25, 31, 0, 8], 9: @[25, 24, 27, 33, 9], 13: @[25, 24, 27, 33, 13], 14: @[25, 24, 27, 33, 14], 15: @[25, 24, 27, 33, 32, 15], 18: @[25, 24, 27, 33, 18], 19: @[25, 31, 0, 1, 19], 20: @[25, 24, 27, 33, 32, 20], 22: @[25, 24, 27, 33, 32, 22], 26: @[25, 24, 27, 33, 26], 28: @[25, 31, 28], 30: @[25, 31, 0, 1, 30], 0: @[25, 31, 0], 1: @[25, 31, 0, 1], 3: @[25, 24, 27, 33, 13, 3], 4: @[25, 31, 0, 4], 5: @[25, 31, 0, 5], 6: @[25, 31, 0, 5, 6], 7: @[25, 31, 0, 1, 7], 10: @[25, 31, 0, 10], 11: @[25, 31, 0, 11], 12: @[25, 31, 0, 12], 17: @[25, 31, 0, 1, 17], 21: @[25, 31, 0, 21], 16: @[25, 31, 0, 5, 16] }.toTable()), (26, { 26: @[26], 29: @[26, 29], 33: @[26, 33], 8: @[26, 33, 31, 0, 8], 9: @[26, 33, 9], 13: @[26, 33, 13], 14: @[26, 33, 14], 15: @[26, 33, 32, 15], 18: @[26, 33, 18], 19: @[26, 33, 31, 0, 1, 19], 20: @[26, 33, 32, 20], 22: @[26, 33, 32, 22], 23: @[26, 33, 23], 27: @[26, 33, 27], 28: @[26, 33, 31, 28], 30: @[26, 33, 31, 0, 1, 30], 31: @[26, 33, 31], 32: @[26, 33, 32], 0: @[26, 33, 31, 0], 1: @[26, 33, 31, 0, 1], 2: @[26, 33, 32, 2], 3: @[26, 33, 13, 3], 24: @[26, 33, 27, 24], 25: @[26, 33, 27, 24, 25], 4: @[26, 33, 31, 0, 4], 5: @[26, 33, 31, 0, 5], 6: @[26, 33, 31, 0, 5, 6], 7: @[26, 33, 31, 0, 1, 7], 10: @[26, 33, 31, 0, 10], 11: @[26, 33, 31, 0, 11], 12: @[26, 33, 31, 0, 12], 17: @[26, 33, 31, 0, 1, 17], 21: @[26, 33, 31, 0, 21], 16: @[26, 33, 31, 0, 5, 16] }.toTable()), (27, { 27: @[27], 2: @[27, 33, 32, 2], 23: @[27, 33, 23], 24: @[27, 24], 33: @[27, 33], 8: @[27, 33, 31, 0, 8], 9: @[27, 33, 9], 13: @[27, 33, 13], 14: @[27, 33, 14], 15: @[27, 33, 32, 15], 18: @[27, 33, 18], 19: @[27, 33, 31, 0, 1, 19], 20: @[27, 33, 32, 20], 22: @[27, 33, 32, 22], 26: @[27, 33, 26], 28: @[27, 33, 31, 28], 29: @[27, 33, 29], 30: @[27, 33, 31, 0, 1, 30], 31: @[27, 33, 31], 32: @[27, 33, 32], 0: @[27, 33, 31, 0], 1: @[27, 33, 31, 0, 1], 3: @[27, 33, 13, 3], 25: @[27, 24, 25], 4: @[27, 33, 31, 0, 4], 5: @[27, 33, 31, 0, 5], 6: @[27, 33, 31, 0, 5, 6], 7: @[27, 33, 31, 0, 1, 7], 10: @[27, 33, 31, 0, 10], 11: @[27, 33, 31, 0, 11], 12: @[27, 33, 31, 0, 12], 17: @[27, 33, 31, 0, 1, 17], 21: @[27, 33, 31, 0, 21], 16: @[27, 33, 31, 0, 5, 16] }.toTable()), (28, { 28: @[28], 2: @[28, 2], 31: @[28, 31], 33: @[28, 31, 33], 0: @[28, 31, 0], 24: @[28, 31, 33, 27, 24], 25: @[28, 31, 25], 32: @[28, 2, 32], 1: @[28, 31, 0, 1], 3: @[28, 31, 33, 13, 3], 4: @[28, 31, 0, 4], 5: @[28, 31, 0, 5], 6: @[28, 31, 0, 5, 6], 7: @[28, 31, 0, 1, 7], 8: @[28, 31, 0, 8], 10: @[28, 31, 0, 10], 11: @[28, 31, 0, 11], 12: @[28, 31, 0, 12], 13: @[28, 31, 33, 13], 17: @[28, 31, 0, 1, 17], 19: @[28, 31, 0, 1, 19], 21: @[28, 31, 0, 21], 9: @[28, 2, 9], 14: @[28, 31, 33, 14], 15: @[28, 2, 32, 15], 18: @[28, 31, 33, 18], 20: @[28, 2, 32, 20], 22: @[28, 2, 32, 22], 23: @[28, 31, 33, 23], 26: @[28, 31, 33, 26], 27: @[28, 31, 33, 27], 29: @[28, 31, 33, 29], 30: @[28, 31, 0, 1, 30], 16: @[28, 31, 0, 5, 16] }.toTable()), (29, { 29: @[29], 23: @[29, 23], 26: @[29, 26], 32: @[29, 33, 32], 33: @[29, 33], 8: @[29, 33, 31, 0, 8], 9: @[29, 33, 9], 13: @[29, 33, 13], 14: @[29, 33, 14], 15: @[29, 33, 32, 15], 18: @[29, 33, 18], 19: @[29, 33, 31, 0, 1, 19], 20: @[29, 33, 32, 20], 22: @[29, 33, 32, 22], 27: @[29, 33, 27], 28: @[29, 33, 31, 28], 30: @[29, 33, 31, 0, 1, 30], 31: @[29, 33, 31], 25: @[29, 33, 27, 24, 25], 0: @[29, 33, 31, 0], 1: @[29, 33, 31, 0, 1], 2: @[29, 33, 32, 2], 3: @[29, 33, 13, 3], 24: @[29, 33, 27, 24], 4: @[29, 33, 31, 0, 4], 5: @[29, 33, 31, 0, 5], 6: @[29, 33, 31, 0, 5, 6], 7: @[29, 33, 31, 0, 1, 7], 10: @[29, 33, 31, 0, 10], 11: @[29, 33, 31, 0, 11], 12: @[29, 33, 31, 0, 12], 17: @[29, 33, 31, 0, 1, 17], 21: @[29, 33, 31, 0, 21], 16: @[29, 33, 31, 0, 5, 16] }.toTable()), (30, { 30: @[30], 1: @[30, 1], 8: @[30, 1, 0, 8], 32: @[30, 32], 33: @[30, 1, 0, 31, 33], 0: @[30, 1, 0], 2: @[30, 32, 2], 3: @[30, 1, 7, 3], 7: @[30, 1, 7], 13: @[30, 1, 0, 31, 33, 13], 17: @[30, 1, 17], 19: @[30, 1, 19], 21: @[30, 1, 21], 4: @[30, 1, 0, 4], 5: @[30, 1, 0, 5], 6: @[30, 1, 0, 5, 6], 10: @[30, 1, 0, 10], 11: @[30, 1, 0, 11], 12: @[30, 1, 0, 12], 31: @[30, 1, 0, 31], 24: @[30, 1, 0, 31, 33, 27, 24], 25: @[30, 1, 0, 31, 25], 28: @[30, 1, 0, 31, 28], 14: @[30, 1, 0, 31, 33, 14], 15: @[30, 32, 15], 18: @[30, 32, 18], 20: @[30, 32, 20], 22: @[30, 32, 22], 23: @[30, 1, 0, 31, 33, 23], 29: @[30, 1, 0, 31, 33, 29], 9: @[30, 32, 2, 9], 27: @[30, 1, 0, 31, 33, 27], 26: @[30, 1, 0, 31, 33, 26], 16: @[30, 1, 0, 5, 16] }.toTable()), (31, { 31: @[31], 0: @[31, 0], 24: @[31, 33, 27, 24], 25: @[31, 25], 28: @[31, 28], 32: @[31, 0, 2, 32], 33: @[31, 33], 1: @[31, 0, 1], 2: @[31, 0, 2], 3: @[31, 33, 13, 3], 4: @[31, 0, 4], 5: @[31, 0, 5], 6: @[31, 0, 5, 6], 7: @[31, 0, 1, 7], 8: @[31, 0, 8], 10: @[31, 0, 10], 11: @[31, 0, 11], 12: @[31, 0, 12], 13: @[31, 33, 13], 17: @[31, 0, 1, 17], 19: @[31, 0, 1, 19], 21: @[31, 0, 21], 9: @[31, 0, 2, 9], 14: @[31, 33, 14], 15: @[31, 0, 2, 32, 15], 18: @[31, 33, 18], 20: @[31, 0, 2, 32, 20], 22: @[31, 0, 2, 32, 22], 23: @[31, 33, 23], 26: @[31, 33, 26], 27: @[31, 33, 27], 29: @[31, 33, 29], 30: @[31, 0, 1, 30], 16: @[31, 0, 5, 16] }.toTable()), (32, { 32: @[32], 2: @[32, 2], 8: @[32, 8], 14: @[32, 14], 15: @[32, 15], 18: @[32, 18], 20: @[32, 20], 22: @[32, 22], 23: @[32, 23], 29: @[32, 33, 29], 30: @[32, 30], 31: @[32, 2, 0, 31], 33: @[32, 33], 0: @[32, 2, 0], 1: @[32, 2, 7, 1], 3: @[32, 2, 7, 3], 7: @[32, 2, 7], 9: @[32, 2, 9], 13: @[32, 2, 13], 27: @[32, 33, 27], 28: @[32, 2, 28], 17: @[32, 2, 7, 1, 17], 19: @[32, 2, 7, 1, 19], 21: @[32, 2, 7, 1, 21], 4: @[32, 2, 0, 4], 5: @[32, 2, 0, 5], 6: @[32, 2, 0, 5, 6], 10: @[32, 2, 0, 10], 11: @[32, 2, 0, 11], 12: @[32, 2, 0, 12], 24: @[32, 33, 27, 24], 25: @[32, 33, 27, 24, 25], 26: @[32, 33, 26], 16: @[32, 2, 0, 5, 16] }.toTable()), (33, { 33: @[33], 8: @[33, 31, 0, 8], 9: @[33, 9], 13: @[33, 13], 14: @[33, 14], 15: @[33, 32, 15], 18: @[33, 18], 19: @[33, 31, 0, 1, 19], 20: @[33, 32, 20], 22: @[33, 32, 22], 23: @[33, 23], 26: @[33, 26], 27: @[33, 27], 28: @[33, 31, 28], 29: @[33, 29], 30: @[33, 31, 0, 1, 30], 31: @[33, 31], 32: @[33, 32], 0: @[33, 31, 0], 1: @[33, 31, 0, 1], 2: @[33, 32, 2], 3: @[33, 13, 3], 24: @[33, 27, 24], 25: @[33, 27, 24, 25], 4: @[33, 31, 0, 4], 5: @[33, 31, 0, 5], 6: @[33, 31, 0, 5, 6], 7: @[33, 31, 0, 1, 7], 10: @[33, 31, 0, 10], 11: @[33, 31, 0, 11], 12: @[33, 31, 0, 12], 17: @[33, 31, 0, 1, 17], 21: @[33, 31, 0, 21], 16: @[33, 31, 0, 5, 16] }.toTable())]
  check got == expected

test "all pairs dijkstra path on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  var weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  var got: seq[tuple[node: Node, paths: Table[Node, seq[Node]]]] = WDG.allPairsDijkstraPath(weight=weight).toSeq()
  var expected: seq[tuple[node: Node, paths: Table[Node, seq[Node]]]] = @[(0, {0: @[0], 1: @[0, 1], 2: @[0, 1, 2], 3: @[0, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 6], 7: @[0, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 13], 17: @[0, 17], 19: @[0, 19], 21: @[0, 21], 31: @[0, 31], 33: @[0, 13, 33], 16: @[0, 6, 16], 32: @[0, 8, 32], 30: @[0, 1, 30], 9: @[0, 1, 2, 9], 27: @[0, 1, 2, 27], 28: @[0, 1, 2, 28]}.toTable()), (1, {1: @[1], 2: @[1, 2], 3: @[1, 3], 7: @[1, 7], 13: @[1, 13], 17: @[1, 17], 19: @[1, 19], 21: @[1, 21], 30: @[1, 30], 33: @[1, 13, 33], 12: @[1, 3, 12], 8: @[1, 2, 8], 9: @[1, 2, 9], 27: @[1, 2, 27], 28: @[1, 2, 28], 32: @[1, 2, 32], 31: @[1, 2, 28, 31]}.toTable()), (2, {2: @[2], 3: @[2, 3], 7: @[2, 7], 8: @[2, 8], 9: @[2, 9], 13: @[2, 13], 27: @[2, 27], 28: @[2, 28], 32: @[2, 32], 33: @[2, 13, 33], 30: @[2, 8, 30], 12: @[2, 3, 12], 31: @[2, 28, 31]}.toTable()), (3, {3: @[3], 7: @[3, 7], 12: @[3, 12], 13: @[3, 13], 33: @[3, 13, 33]}.toTable()), (4, {4: @[4], 6: @[4, 6], 10: @[4, 10], 16: @[4, 6, 16]}.toTable()), (5, {5: @[5], 6: @[5, 6], 10: @[5, 10], 16: @[5, 16]}.toTable()), (6, {6: @[6], 16: @[6, 16]}.toTable()), (7, {7: @[7]}.toTable()), (8, {8: @[8], 30: @[8, 30], 32: @[8, 32], 33: @[8, 33]}.toTable()), (9, {9: @[9], 33: @[9, 33]}.toTable()), (10, {10: @[10]}.toTable()), (11, {11: @[11]}.toTable()), (12, {12: @[12]}.toTable()), (13, {13: @[13], 33: @[13, 33]}.toTable()), (14, {14: @[14], 32: @[14, 32], 33: @[14, 33]}.toTable()), (15, {15: @[15], 32: @[15, 32], 33: @[15, 33]}.toTable()), (16, {16: @[16]}.toTable()), (17, {17: @[17]}.toTable()), (18, {18: @[18], 32: @[18, 32], 33: @[18, 33]}.toTable()), (19, {19: @[19], 33: @[19, 33]}.toTable()), (20, {20: @[20], 32: @[20, 32], 33: @[20, 33]}.toTable()), (21, {21: @[21]}.toTable()), (22, {22: @[22], 32: @[22, 32], 33: @[22, 33]}.toTable()), (23, {23: @[23], 25: @[23, 25], 27: @[23, 27], 29: @[23, 29], 32: @[23, 32], 33: @[23, 33], 31: @[23, 25, 31]}.toTable()), (24, {24: @[24], 25: @[24, 25], 27: @[24, 27], 31: @[24, 31], 32: @[24, 31, 32], 33: @[24, 31, 33]}.toTable()), (25, {25: @[25], 31: @[25, 31], 32: @[25, 31, 32], 33: @[25, 31, 33]}.toTable()), (26, {26: @[26], 29: @[26, 29], 33: @[26, 33], 32: @[26, 29, 32]}.toTable()), (27, {27: @[27], 33: @[27, 33]}.toTable()), (28, {28: @[28], 31: @[28, 31], 33: @[28, 33], 32: @[28, 31, 32]}.toTable()), (29, {29: @[29], 32: @[29, 32], 33: @[29, 33]}.toTable()), (30, {30: @[30], 32: @[30, 32], 33: @[30, 33]}.toTable()), (31, {31: @[31], 32: @[31, 32], 33: @[31, 33]}.toTable()), (32, {32: @[32], 33: @[32, 33]}.toTable()), (33, {33: @[33]}.toTable())]
  check got == expected

test "dijkstra predecessor and distance on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  let got = WG.dijkstraPrdecessorAndDistance(0, weight=weight)
  let expected = ({0: @[], 1: @[0], 2: @[0], 3: @[13], 4: @[0], 5: @[0], 6: @[5], 7: @[1], 8: @[0], 10: @[0], 11: @[0], 12: @[0], 13: @[33], 17: @[1], 19: @[1], 21: @[0], 31: @[0], 24: @[27], 25: @[31], 28: @[31], 32: @[2], 33: @[31], 30: @[1], 9: @[2], 14: @[33], 15: @[32], 18: @[33], 20: @[32], 22: @[32], 23: @[33], 26: @[33], 27: @[33], 29: @[33], 16: @[5]}.toTable(), {0: 0.0, 31: 2.0, 1: 10.0, 33: 12.0, 5: 13.0, 13: 18.0, 7: 19.0, 10: 20.0, 30: 20.0, 27: 20.0, 11: 21.0, 2: 23.0, 6: 24.0, 8: 25.0, 32: 25.0, 23: 27.0, 15: 31.0, 22: 31.0, 19: 34.0, 20: 37.0, 4: 40.0, 21: 46.0, 26: 49.0, 3: 49.0, 24: 50.0, 17: 51.0, 28: 54.0, 18: 62.0, 16: 64.0, 14: 66.0, 29: 67.0, 12: 77.0, 9: 87.0, 25: 89.0}.toTable())
  check got == expected

test "dijkstra predecessor and distance on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  let got = WDG.dijkstraPrdecessorAndDistance(0, weight=weight)
  let expected = ({0: @[], 1: @[0], 2: @[1], 3: @[0], 4: @[0], 5: @[0], 6: @[0], 7: @[0], 8: @[0], 10: @[0], 11: @[0], 12: @[0], 13: @[0], 17: @[0], 19: @[0], 21: @[0], 31: @[0], 33: @[13], 16: @[6], 32: @[8], 30: @[1], 9: @[2], 27: @[2], 28: @[2]}.toTable(), {0: 0.0, 13: 3.0, 7: 5.0, 33: 11.0, 5: 13.0, 19: 13.0, 31: 14.0, 8: 20.0, 21: 25.0, 6: 27.0, 17: 33.0, 32: 34.0, 10: 70.0, 4: 73.0, 12: 73.0, 16: 74.0, 3: 76.0, 1: 77.0, 2: 89.0, 11: 95.0, 30: 114.0, 27: 136.0, 9: 174.0, 28: 187.0}.toTable())
  check got == expected

test "bellman ford path length on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  check WG.bellmanFordPathLength(0, 4, weight) == 40.0

test "bellman ford path length on directed grpah":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  check WDG.bellmanFordPathLength(0, 4, weight) == 73.0

test "bellman ford path length on directed grpah":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  try:
    discard WDG.bellmanFordPathLength(0, 14, weight)
  except NNNoPath as e:
    check e.msg == "target 14 not reachable from source 0"

test "single source bellman ford on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  let (distance, paths) = WG.singleSourceBellmanFord(0, weight=weight)
  let expectedDistance = {0: 0.0, 1: 10.0, 2: 23.0, 3: 49.0, 4: 40.0, 5: 13.0, 6: 24.0, 7: 19.0, 8: 25.0, 10: 20.0, 11: 21.0, 12: 77.0, 13: 18.0, 17: 51.0, 19: 34.0, 21: 46.0, 31: 2.0, 30: 20.0, 9: 87.0, 27: 20.0, 28: 54.0, 32: 25.0, 16: 64.0, 33: 12.0, 24: 50.0, 25: 89.0, 23: 27.0, 14: 66.0, 15: 31.0, 18: 62.0, 20: 37.0, 22: 31.0, 29: 67.0, 26: 49.0}.toTable()
  let expectedPaths = {0: @[0], 1: @[0, 1], 2: @[0, 2], 3: @[0, 31, 33, 13, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 5, 6], 7: @[0, 1, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 31, 33, 13], 17: @[0, 1, 17], 19: @[0, 1, 19], 21: @[0, 21], 31: @[0, 31], 30: @[0, 1, 30], 9: @[0, 2, 9], 27: @[0, 31, 33, 27], 28: @[0, 31, 28], 32: @[0, 2, 32], 16: @[0, 5, 16], 33: @[0, 31, 33], 24: @[0, 31, 33, 27, 24], 25: @[0, 31, 25], 23: @[0, 31, 33, 23], 14: @[0, 31, 33, 14], 15: @[0, 2, 32, 15], 18: @[0, 31, 33, 18], 20: @[0, 2, 32, 20], 22: @[0, 2, 32, 22], 29: @[0, 31, 33, 29], 26: @[0, 31, 33, 26]}.toTable()
  check distance == expectedDistance
  check paths == expectedPaths

test "single source bellman ford on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  let (distance, paths) = WDG.singleSourceBellmanFord(0, weight=weight)
  let expectedDistance = {0: 0.0, 1: 77.0, 2: 89.0, 3: 76.0, 4: 73.0, 5: 13.0, 6: 27.0, 7: 5.0, 8: 20.0, 10: 70.0, 11: 95.0, 12: 73.0, 13: 3.0, 17: 33.0, 19: 13.0, 21: 25.0, 31: 14.0, 30: 114.0, 9: 174.0, 27: 136.0, 28: 187.0, 32: 34.0, 16: 74.0, 33: 11.0}.toTable()
  let expectedPaths = {0: @[0], 1: @[0, 1], 2: @[0, 1, 2], 3: @[0, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 6], 7: @[0, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 13], 17: @[0, 17], 19: @[0, 19], 21: @[0, 21], 31: @[0, 31], 30: @[0, 1, 30], 9: @[0, 1, 2, 9], 27: @[0, 1, 2, 27], 28: @[0, 1, 2, 28], 32: @[0, 8, 32], 16: @[0, 6, 16], 33: @[0, 13, 33]}.toTable()
  check distance == expectedDistance
  check paths == expectedPaths

test "single source bellman ford path length on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  let distance = WG.singleSourceBellmanFordPathLength(0, weight=weight)
  let expectedDistance = {0: 0.0, 1: 10.0, 2: 23.0, 3: 49.0, 4: 40.0, 5: 13.0, 6: 24.0, 7: 19.0, 8: 25.0, 10: 20.0, 11: 21.0, 12: 77.0, 13: 18.0, 17: 51.0, 19: 34.0, 21: 46.0, 31: 2.0, 30: 20.0, 9: 87.0, 27: 20.0, 28: 54.0, 32: 25.0, 16: 64.0, 33: 12.0, 24: 50.0, 25: 89.0, 23: 27.0, 14: 66.0, 15: 31.0, 18: 62.0, 20: 37.0, 22: 31.0, 29: 67.0, 26: 49.0}.toTable()
  check distance == expectedDistance

test "single source bellman ford path length on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  let distance = WDG.singleSourceBellmanFordPathLength(0, weight=weight)
  let expectedDistance = {0: 0.0, 1: 77.0, 2: 89.0, 3: 76.0, 4: 73.0, 5: 13.0, 6: 27.0, 7: 5.0, 8: 20.0, 10: 70.0, 11: 95.0, 12: 73.0, 13: 3.0, 17: 33.0, 19: 13.0, 21: 25.0, 31: 14.0, 30: 114.0, 9: 174.0, 27: 136.0, 28: 187.0, 32: 34.0, 16: 74.0, 33: 11.0}.toTable()
  check distance == expectedDistance

test "single source bellman ford path on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  let paths = WG.singleSourceBellmanFordPath(0, weight=weight)
  let expectedPaths = {0: @[0], 1: @[0, 1], 2: @[0, 2], 3: @[0, 31, 33, 13, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 5, 6], 7: @[0, 1, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 31, 33, 13], 17: @[0, 1, 17], 19: @[0, 1, 19], 21: @[0, 21], 31: @[0, 31], 30: @[0, 1, 30], 9: @[0, 2, 9], 27: @[0, 31, 33, 27], 28: @[0, 31, 28], 32: @[0, 2, 32], 16: @[0, 5, 16], 33: @[0, 31, 33], 24: @[0, 31, 33, 27, 24], 25: @[0, 31, 25], 23: @[0, 31, 33, 23], 14: @[0, 31, 33, 14], 15: @[0, 2, 32, 15], 18: @[0, 31, 33, 18], 20: @[0, 2, 32, 20], 22: @[0, 2, 32, 22], 29: @[0, 31, 33, 29], 26: @[0, 31, 33, 26]}.toTable()
  check paths == expectedPaths

test "single source bellman ford path on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  let paths = WDG.singleSourceBellmanFordPath(0, weight=weight)
  let expectedPaths = {0: @[0], 1: @[0, 1], 2: @[0, 1, 2], 3: @[0, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 6], 7: @[0, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 13], 17: @[0, 17], 19: @[0, 19], 21: @[0, 21], 31: @[0, 31], 30: @[0, 1, 30], 9: @[0, 1, 2, 9], 27: @[0, 1, 2, 27], 28: @[0, 1, 2, 28], 32: @[0, 8, 32], 16: @[0, 6, 16], 33: @[0, 13, 33]}.toTable()
  check paths == expectedPaths

test "bellman ford path on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  check WG.bellmanFordPath(0, 3, weight=weight) == @[0, 31, 33, 13, 3]

test "bellman ford path on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  check WDG.bellmanFordPath(0, 28, weight=weight) == @[0, 1, 2, 28]
  try:
    discard WDG.bellmanFordPath(0, 29, weight=weight)
  except NNNoPath as e:
    check e.msg == "target 29 not reachable from source 0"

test "all pairs bellman ford path length on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  let dist = WG.allPairsBellmanFordPathLength(weight=weight).toSeq()
  let expectedDist = @[(0, {0: 0.0, 1: 10.0, 2: 23.0, 3: 49.0, 4: 40.0, 5: 13.0, 6: 24.0, 7: 19.0, 8: 25.0, 10: 20.0, 11: 21.0, 12: 77.0, 13: 18.0, 17: 51.0, 19: 34.0, 21: 46.0, 31: 2.0, 30: 20.0, 9: 87.0, 27: 20.0, 28: 54.0, 32: 25.0, 16: 64.0, 33: 12.0, 24: 50.0, 25: 89.0, 23: 27.0, 14: 66.0, 15: 31.0, 18: 62.0, 20: 37.0, 22: 31.0, 29: 67.0, 26: 49.0}.toTable()), (1, {1: 0.0, 0: 10.0, 2: 19.0, 3: 51.0, 7: 9.0, 13: 28.0, 17: 41.0, 19: 24.0, 21: 48.0, 30: 10.0, 4: 50.0, 5: 23.0, 6: 34.0, 8: 35.0, 10: 30.0, 11: 31.0, 12: 87.0, 31: 12.0, 9: 83.0, 27: 30.0, 28: 64.0, 32: 21.0, 33: 22.0, 16: 74.0, 24: 60.0, 25: 99.0, 14: 76.0, 15: 27.0, 18: 68.0, 20: 33.0, 22: 27.0, 23: 37.0, 26: 59.0, 29: 77.0}.toTable()), (2, {2: 0.0, 0: 23.0, 1: 19.0, 3: 52.0, 7: 10.0, 8: 31.0, 9: 64.0, 13: 30.0, 27: 41.0, 28: 71.0, 32: 2.0, 4: 63.0, 5: 36.0, 6: 47.0, 10: 43.0, 11: 44.0, 12: 100.0, 17: 60.0, 19: 43.0, 21: 67.0, 31: 25.0, 30: 27.0, 33: 33.0, 23: 48.0, 24: 71.0, 14: 68.0, 15: 8.0, 18: 49.0, 20: 14.0, 22: 8.0, 29: 88.0, 16: 87.0, 25: 111.0, 26: 70.0}.toTable()), (3, {3: 0.0, 0: 49.0, 1: 51.0, 2: 52.0, 7: 42.0, 12: 98.0, 13: 31.0, 4: 89.0, 5: 62.0, 6: 73.0, 8: 74.0, 10: 69.0, 11: 70.0, 17: 92.0, 19: 75.0, 21: 95.0, 31: 47.0, 30: 61.0, 9: 116.0, 27: 45.0, 28: 99.0, 32: 54.0, 33: 37.0, 14: 91.0, 15: 60.0, 18: 87.0, 20: 66.0, 22: 60.0, 23: 52.0, 26: 74.0, 29: 92.0, 24: 75.0, 16: 113.0, 25: 115.0}.toTable()), (4, {4: 0.0, 0: 40.0, 6: 44.0, 10: 60.0, 1: 50.0, 2: 63.0, 3: 89.0, 5: 53.0, 7: 59.0, 8: 65.0, 11: 61.0, 12: 117.0, 13: 58.0, 17: 91.0, 19: 74.0, 21: 86.0, 31: 42.0, 16: 104.0, 30: 60.0, 9: 127.0, 27: 60.0, 28: 94.0, 32: 65.0, 33: 52.0, 24: 90.0, 25: 129.0, 23: 67.0, 14: 106.0, 15: 71.0, 18: 102.0, 20: 77.0, 22: 71.0, 29: 107.0, 26: 89.0}.toTable()), (5, {5: 0.0, 0: 13.0, 6: 11.0, 10: 14.0, 16: 51.0, 1: 23.0, 2: 36.0, 3: 62.0, 4: 53.0, 7: 32.0, 8: 38.0, 11: 34.0, 12: 90.0, 13: 31.0, 17: 64.0, 19: 47.0, 21: 59.0, 31: 15.0, 30: 33.0, 9: 100.0, 27: 33.0, 28: 67.0, 32: 38.0, 33: 25.0, 24: 63.0, 25: 102.0, 23: 40.0, 14: 79.0, 15: 44.0, 18: 75.0, 20: 50.0, 22: 44.0, 29: 80.0, 26: 62.0}.toTable()), (6, {6: 0.0, 0: 24.0, 4: 44.0, 5: 11.0, 16: 62.0, 1: 34.0, 2: 47.0, 3: 73.0, 7: 43.0, 8: 49.0, 10: 25.0, 11: 45.0, 12: 101.0, 13: 42.0, 17: 75.0, 19: 58.0, 21: 70.0, 31: 26.0, 30: 44.0, 9: 111.0, 27: 44.0, 28: 78.0, 32: 49.0, 33: 36.0, 24: 74.0, 25: 113.0, 23: 51.0, 14: 90.0, 15: 55.0, 18: 86.0, 20: 61.0, 22: 55.0, 29: 91.0, 26: 73.0}.toTable()), (7, {7: 0.0, 0: 19.0, 1: 9.0, 2: 10.0, 3: 42.0, 4: 59.0, 5: 32.0, 6: 43.0, 8: 41.0, 10: 39.0, 11: 40.0, 12: 96.0, 13: 37.0, 17: 50.0, 19: 33.0, 21: 57.0, 31: 21.0, 30: 19.0, 9: 74.0, 27: 39.0, 28: 73.0, 32: 12.0, 33: 31.0, 23: 46.0, 24: 69.0, 14: 78.0, 15: 18.0, 18: 59.0, 20: 24.0, 22: 18.0, 29: 86.0, 26: 68.0, 16: 83.0, 25: 108.0}.toTable()), (8, {8: 0.0, 0: 25.0, 2: 31.0, 30: 45.0, 32: 29.0, 33: 37.0, 1: 35.0, 3: 74.0, 4: 65.0, 5: 38.0, 6: 49.0, 7: 41.0, 10: 45.0, 11: 46.0, 12: 102.0, 13: 43.0, 17: 76.0, 19: 59.0, 21: 71.0, 31: 27.0, 9: 95.0, 27: 45.0, 28: 79.0, 14: 91.0, 15: 35.0, 18: 76.0, 20: 41.0, 22: 35.0, 23: 52.0, 29: 92.0, 26: 74.0, 16: 89.0, 24: 75.0, 25: 114.0}.toTable()), (9, {9: 0.0, 2: 64.0, 33: 97.0, 0: 87.0, 1: 83.0, 3: 116.0, 7: 74.0, 8: 95.0, 13: 94.0, 27: 105.0, 28: 135.0, 32: 66.0, 14: 132.0, 15: 72.0, 18: 113.0, 19: 107.0, 20: 78.0, 22: 72.0, 23: 112.0, 26: 134.0, 29: 152.0, 30: 91.0, 31: 89.0, 4: 127.0, 5: 100.0, 6: 111.0, 10: 107.0, 11: 108.0, 12: 164.0, 17: 124.0, 21: 131.0, 24: 135.0, 25: 175.0, 16: 151.0}.toTable()), (10, {10: 0.0, 0: 20.0, 4: 60.0, 5: 14.0, 1: 30.0, 2: 43.0, 3: 69.0, 6: 25.0, 7: 39.0, 8: 45.0, 11: 41.0, 12: 97.0, 13: 38.0, 17: 71.0, 19: 54.0, 21: 66.0, 31: 22.0, 16: 65.0, 30: 40.0, 9: 107.0, 27: 40.0, 28: 74.0, 32: 45.0, 33: 32.0, 24: 70.0, 25: 109.0, 23: 47.0, 14: 86.0, 15: 51.0, 18: 82.0, 20: 57.0, 22: 51.0, 29: 87.0, 26: 69.0}.toTable()), (11, {11: 0.0, 0: 21.0, 1: 31.0, 2: 44.0, 3: 70.0, 4: 61.0, 5: 34.0, 6: 45.0, 7: 40.0, 8: 46.0, 10: 41.0, 12: 98.0, 13: 39.0, 17: 72.0, 19: 55.0, 21: 67.0, 31: 23.0, 30: 41.0, 9: 108.0, 27: 41.0, 28: 75.0, 32: 46.0, 16: 85.0, 33: 33.0, 24: 71.0, 25: 110.0, 23: 48.0, 14: 87.0, 15: 52.0, 18: 83.0, 20: 58.0, 22: 52.0, 29: 88.0, 26: 70.0}.toTable()), (12, {12: 0.0, 0: 77.0, 3: 98.0, 1: 87.0, 2: 100.0, 4: 117.0, 5: 90.0, 6: 101.0, 7: 96.0, 8: 102.0, 10: 97.0, 11: 98.0, 13: 95.0, 17: 128.0, 19: 111.0, 21: 123.0, 31: 79.0, 30: 97.0, 9: 164.0, 27: 97.0, 28: 131.0, 32: 102.0, 16: 141.0, 33: 89.0, 24: 127.0, 25: 166.0, 23: 104.0, 14: 143.0, 15: 108.0, 18: 139.0, 20: 114.0, 22: 108.0, 29: 144.0, 26: 126.0}.toTable()), (13, {13: 0.0, 0: 18.0, 1: 28.0, 2: 30.0, 3: 31.0, 33: 6.0, 4: 58.0, 5: 31.0, 6: 42.0, 7: 37.0, 8: 43.0, 10: 38.0, 11: 39.0, 12: 95.0, 17: 69.0, 19: 52.0, 21: 64.0, 31: 16.0, 30: 38.0, 9: 94.0, 27: 14.0, 28: 68.0, 32: 32.0, 14: 60.0, 15: 38.0, 18: 56.0, 20: 44.0, 22: 38.0, 23: 21.0, 26: 43.0, 29: 61.0, 16: 82.0, 24: 44.0, 25: 84.0}.toTable()), (14, {14: 0.0, 32: 66.0, 33: 54.0, 2: 68.0, 8: 91.0, 15: 72.0, 18: 104.0, 20: 78.0, 22: 72.0, 23: 69.0, 29: 109.0, 30: 86.0, 31: 64.0, 9: 132.0, 13: 60.0, 19: 100.0, 26: 91.0, 27: 62.0, 28: 116.0, 0: 66.0, 1: 76.0, 3: 91.0, 7: 78.0, 25: 132.0, 24: 92.0, 4: 106.0, 5: 79.0, 6: 90.0, 10: 86.0, 11: 87.0, 12: 143.0, 17: 117.0, 21: 112.0, 16: 130.0}.toTable()), (15, {15: 0.0, 32: 6.0, 33: 37.0, 2: 8.0, 8: 35.0, 14: 72.0, 18: 53.0, 20: 18.0, 22: 12.0, 23: 52.0, 29: 92.0, 30: 31.0, 31: 33.0, 9: 72.0, 13: 38.0, 19: 51.0, 26: 74.0, 27: 45.0, 28: 79.0, 0: 31.0, 1: 27.0, 3: 60.0, 7: 18.0, 25: 115.0, 24: 75.0, 4: 71.0, 5: 44.0, 6: 55.0, 10: 51.0, 11: 52.0, 12: 108.0, 17: 68.0, 21: 75.0, 16: 95.0}.toTable()), (16, {16: 0.0, 5: 51.0, 6: 62.0, 0: 64.0, 10: 65.0, 4: 104.0, 1: 74.0, 2: 87.0, 3: 113.0, 7: 83.0, 8: 89.0, 11: 85.0, 12: 141.0, 13: 82.0, 17: 115.0, 19: 98.0, 21: 110.0, 31: 66.0, 30: 84.0, 9: 151.0, 27: 84.0, 28: 118.0, 32: 89.0, 33: 76.0, 24: 114.0, 25: 153.0, 23: 91.0, 14: 130.0, 15: 95.0, 18: 126.0, 20: 101.0, 22: 95.0, 29: 131.0, 26: 113.0}.toTable()), (17, {17: 0.0, 0: 51.0, 1: 41.0, 2: 60.0, 3: 92.0, 4: 91.0, 5: 64.0, 6: 75.0, 7: 50.0, 8: 76.0, 10: 71.0, 11: 72.0, 12: 128.0, 13: 69.0, 19: 65.0, 21: 89.0, 31: 53.0, 30: 51.0, 9: 124.0, 27: 71.0, 28: 105.0, 32: 62.0, 33: 63.0, 14: 117.0, 15: 68.0, 18: 109.0, 20: 74.0, 22: 68.0, 23: 78.0, 26: 100.0, 29: 118.0, 16: 115.0, 24: 101.0, 25: 140.0}.toTable()), (18, {18: 0.0, 32: 47.0, 33: 50.0, 2: 49.0, 8: 76.0, 14: 104.0, 15: 53.0, 20: 59.0, 22: 53.0, 23: 65.0, 29: 105.0, 30: 72.0, 31: 60.0, 9: 113.0, 13: 56.0, 19: 92.0, 26: 87.0, 27: 58.0, 28: 112.0, 0: 62.0, 1: 68.0, 3: 87.0, 7: 59.0, 25: 128.0, 24: 88.0, 4: 102.0, 5: 75.0, 6: 86.0, 10: 82.0, 11: 83.0, 12: 139.0, 17: 109.0, 21: 108.0, 16: 126.0}.toTable()), (19, {19: 0.0, 0: 34.0, 1: 24.0, 33: 46.0, 2: 43.0, 3: 75.0, 4: 74.0, 5: 47.0, 6: 58.0, 7: 33.0, 8: 59.0, 10: 54.0, 11: 55.0, 12: 111.0, 13: 52.0, 17: 65.0, 21: 72.0, 31: 36.0, 30: 34.0, 9: 107.0, 14: 100.0, 15: 51.0, 18: 92.0, 20: 57.0, 22: 51.0, 23: 61.0, 26: 83.0, 27: 54.0, 28: 88.0, 29: 101.0, 32: 45.0, 16: 98.0, 24: 84.0, 25: 123.0}.toTable()), (20, {20: 0.0, 32: 12.0, 33: 43.0, 2: 14.0, 8: 41.0, 14: 78.0, 15: 18.0, 18: 59.0, 22: 18.0, 23: 58.0, 29: 98.0, 30: 37.0, 31: 39.0, 9: 78.0, 13: 44.0, 19: 57.0, 26: 80.0, 27: 51.0, 28: 85.0, 0: 37.0, 1: 33.0, 3: 66.0, 7: 24.0, 25: 121.0, 24: 81.0, 4: 77.0, 5: 50.0, 6: 61.0, 10: 57.0, 11: 58.0, 12: 114.0, 17: 74.0, 21: 81.0, 16: 101.0}.toTable()), (21, {21: 0.0, 0: 46.0, 1: 48.0, 2: 67.0, 3: 95.0, 4: 86.0, 5: 59.0, 6: 70.0, 7: 57.0, 8: 71.0, 10: 66.0, 11: 67.0, 12: 123.0, 13: 64.0, 17: 89.0, 19: 72.0, 31: 48.0, 30: 58.0, 9: 131.0, 27: 66.0, 28: 100.0, 32: 69.0, 16: 110.0, 33: 58.0, 24: 96.0, 25: 135.0, 14: 112.0, 15: 75.0, 18: 108.0, 20: 81.0, 22: 75.0, 23: 73.0, 26: 95.0, 29: 113.0}.toTable()), (22, {22: 0.0, 32: 6.0, 33: 37.0, 2: 8.0, 8: 35.0, 14: 72.0, 15: 12.0, 18: 53.0, 20: 18.0, 23: 52.0, 29: 92.0, 30: 31.0, 31: 33.0, 9: 72.0, 13: 38.0, 19: 51.0, 26: 74.0, 27: 45.0, 28: 79.0, 0: 31.0, 1: 27.0, 3: 60.0, 7: 18.0, 25: 115.0, 24: 75.0, 4: 71.0, 5: 44.0, 6: 55.0, 10: 51.0, 11: 52.0, 12: 108.0, 17: 68.0, 21: 75.0, 16: 95.0}.toTable()), (23, {23: 0.0, 25: 75.0, 27: 23.0, 29: 59.0, 32: 46.0, 33: 15.0, 24: 53.0, 31: 25.0, 2: 48.0, 26: 52.0, 8: 52.0, 14: 69.0, 15: 52.0, 18: 65.0, 20: 58.0, 22: 52.0, 30: 47.0, 9: 112.0, 13: 21.0, 19: 61.0, 28: 77.0, 0: 27.0, 1: 37.0, 3: 52.0, 7: 46.0, 4: 67.0, 5: 40.0, 6: 51.0, 10: 47.0, 11: 48.0, 12: 104.0, 17: 78.0, 21: 73.0, 16: 91.0}.toTable()), (24, {24: 0.0, 25: 40.0, 27: 30.0, 31: 48.0, 23: 53.0, 2: 71.0, 33: 38.0, 0: 50.0, 28: 100.0, 32: 69.0, 29: 93.0, 1: 60.0, 3: 75.0, 7: 69.0, 8: 75.0, 9: 135.0, 13: 44.0, 14: 92.0, 15: 75.0, 18: 88.0, 19: 84.0, 20: 81.0, 22: 75.0, 26: 75.0, 30: 70.0, 4: 90.0, 5: 63.0, 6: 74.0, 10: 70.0, 11: 71.0, 12: 127.0, 17: 101.0, 21: 96.0, 16: 114.0}.toTable()), (25, {25: 0.0, 23: 75.0, 24: 40.0, 31: 87.0, 27: 70.0, 29: 133.0, 32: 109.0, 33: 78.0, 0: 89.0, 28: 139.0, 2: 111.0, 26: 115.0, 8: 114.0, 14: 132.0, 15: 115.0, 18: 128.0, 20: 121.0, 22: 115.0, 30: 109.0, 9: 175.0, 13: 84.0, 19: 123.0, 1: 99.0, 3: 115.0, 4: 129.0, 5: 102.0, 6: 113.0, 7: 108.0, 10: 109.0, 11: 110.0, 12: 166.0, 17: 140.0, 21: 135.0, 16: 153.0}.toTable()), (26, {26: 0.0, 29: 46.0, 33: 37.0, 23: 52.0, 32: 68.0, 8: 74.0, 9: 134.0, 13: 43.0, 14: 91.0, 15: 74.0, 18: 87.0, 19: 83.0, 20: 80.0, 22: 74.0, 27: 45.0, 28: 99.0, 30: 69.0, 31: 47.0, 25: 115.0, 2: 70.0, 0: 49.0, 1: 59.0, 3: 74.0, 24: 75.0, 7: 68.0, 4: 89.0, 5: 62.0, 6: 73.0, 10: 69.0, 11: 70.0, 12: 126.0, 17: 100.0, 21: 95.0, 16: 113.0}.toTable()), (27, {27: 0.0, 2: 41.0, 23: 23.0, 24: 30.0, 33: 8.0, 0: 20.0, 1: 30.0, 3: 45.0, 7: 39.0, 8: 45.0, 9: 105.0, 13: 14.0, 28: 70.0, 32: 39.0, 25: 70.0, 29: 63.0, 31: 18.0, 14: 62.0, 15: 45.0, 18: 58.0, 19: 54.0, 20: 51.0, 22: 45.0, 26: 45.0, 30: 40.0, 4: 60.0, 5: 33.0, 6: 44.0, 10: 40.0, 11: 41.0, 12: 97.0, 17: 71.0, 21: 66.0, 16: 84.0}.toTable()), (28, {28: 0.0, 2: 71.0, 31: 52.0, 33: 62.0, 0: 54.0, 1: 64.0, 3: 99.0, 7: 73.0, 8: 79.0, 9: 135.0, 13: 68.0, 27: 70.0, 32: 73.0, 24: 100.0, 25: 139.0, 14: 116.0, 15: 79.0, 18: 112.0, 19: 88.0, 20: 85.0, 22: 79.0, 23: 77.0, 26: 99.0, 29: 117.0, 30: 74.0, 4: 94.0, 5: 67.0, 6: 78.0, 10: 74.0, 11: 75.0, 12: 131.0, 17: 105.0, 21: 100.0, 16: 118.0}.toTable()), (29, {29: 0.0, 23: 59.0, 26: 46.0, 32: 86.0, 33: 55.0, 25: 133.0, 27: 63.0, 2: 88.0, 8: 92.0, 14: 109.0, 15: 92.0, 18: 105.0, 20: 98.0, 22: 92.0, 30: 87.0, 31: 65.0, 9: 152.0, 13: 61.0, 19: 101.0, 28: 117.0, 24: 93.0, 0: 67.0, 1: 77.0, 3: 92.0, 4: 107.0, 5: 80.0, 6: 91.0, 7: 86.0, 10: 87.0, 11: 88.0, 12: 144.0, 17: 118.0, 21: 113.0, 16: 131.0}.toTable()), (30, {30: 0.0, 1: 10.0, 8: 45.0, 32: 25.0, 33: 32.0, 0: 20.0, 2: 27.0, 3: 61.0, 7: 19.0, 13: 38.0, 17: 51.0, 19: 34.0, 21: 58.0, 14: 86.0, 15: 31.0, 18: 72.0, 20: 37.0, 22: 31.0, 23: 47.0, 29: 87.0, 31: 22.0, 9: 91.0, 26: 69.0, 27: 40.0, 28: 74.0, 4: 60.0, 5: 33.0, 6: 44.0, 10: 40.0, 11: 41.0, 12: 97.0, 24: 70.0, 25: 109.0, 16: 84.0}.toTable()), (31, {31: 0.0, 0: 2.0, 24: 48.0, 25: 87.0, 28: 52.0, 32: 27.0, 33: 10.0, 1: 12.0, 2: 25.0, 3: 47.0, 4: 42.0, 5: 15.0, 6: 26.0, 7: 21.0, 8: 27.0, 10: 22.0, 11: 23.0, 12: 79.0, 13: 16.0, 17: 53.0, 19: 36.0, 21: 48.0, 27: 18.0, 23: 25.0, 14: 64.0, 15: 33.0, 18: 60.0, 20: 39.0, 22: 33.0, 29: 65.0, 30: 22.0, 9: 89.0, 26: 47.0, 16: 66.0}.toTable()), (32, {32: 0.0, 2: 2.0, 8: 29.0, 14: 66.0, 15: 6.0, 18: 47.0, 20: 12.0, 22: 6.0, 23: 46.0, 29: 86.0, 30: 25.0, 31: 27.0, 33: 31.0, 0: 25.0, 1: 21.0, 3: 54.0, 7: 12.0, 9: 66.0, 13: 32.0, 27: 39.0, 28: 73.0, 25: 109.0, 26: 68.0, 24: 69.0, 19: 45.0, 4: 65.0, 5: 38.0, 6: 49.0, 10: 45.0, 11: 46.0, 12: 102.0, 17: 62.0, 21: 69.0, 16: 89.0}.toTable()), (33, {33: 0.0, 8: 37.0, 9: 97.0, 13: 6.0, 14: 54.0, 15: 37.0, 18: 50.0, 19: 46.0, 20: 43.0, 22: 37.0, 23: 15.0, 26: 37.0, 27: 8.0, 28: 62.0, 29: 55.0, 30: 32.0, 31: 10.0, 32: 31.0, 0: 12.0, 2: 33.0, 1: 22.0, 3: 37.0, 25: 78.0, 24: 38.0, 4: 52.0, 5: 25.0, 6: 36.0, 7: 31.0, 10: 32.0, 11: 33.0, 12: 89.0, 17: 63.0, 21: 58.0, 16: 76.0}.toTable())]
  check dist == expectedDist

test "all pairs bellman ford path length on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  let dist = WDG.allPairsBellmanFordPathLength(weight=weight).toSeq()
  let expectedDist = @[(0, {0: 0.0, 1: 77.0, 2: 89.0, 3: 76.0, 4: 73.0, 5: 13.0, 6: 27.0, 7: 5.0, 8: 20.0, 10: 70.0, 11: 95.0, 12: 73.0, 13: 3.0, 17: 33.0, 19: 13.0, 21: 25.0, 31: 14.0, 30: 114.0, 9: 174.0, 27: 136.0, 28: 187.0, 32: 34.0, 16: 74.0, 33: 11.0}.toTable()), (1, {1: 0.0, 2: 12.0, 3: 11.0, 7: 26.0, 13: 9.0, 17: 63.0, 19: 100.0, 21: 38.0, 30: 37.0, 8: 81.0, 9: 97.0, 27: 59.0, 28: 110.0, 32: 68.0, 12: 79.0, 33: 17.0, 31: 194.0}.toTable()), (2, {2: 0.0, 3: 98.0, 7: 71.0, 8: 69.0, 9: 85.0, 13: 29.0, 27: 47.0, 28: 98.0, 32: 56.0, 12: 166.0, 30: 167.0, 33: 37.0, 31: 182.0}.toTable()), (3, {3: 0.0, 7: 18.0, 12: 68.0, 13: 42.0, 33: 50.0}.toTable()), (4, {4: 0.0, 6: 83.0, 10: 5.0, 16: 130.0}.toTable()), (5, {5: 0.0, 6: 56.0, 10: 81.0, 16: 85.0}.toTable()), (6, {6: 0.0, 16: 47.0}.toTable()), (7, {7: 0.0}.toTable()), (8, {8: 0.0, 30: 98.0, 32: 14.0, 33: 9.0}.toTable()), (9, {9: 0.0, 33: 14.0}.toTable()), (10, {10: 0.0}.toTable()), (11, {11: 0.0}.toTable()), (12, {12: 0.0}.toTable()), (13, {13: 0.0, 33: 8.0}.toTable()), (14, {14: 0.0, 32: 31.0, 33: 83.0}.toTable()), (15, {15: 0.0, 32: 36.0, 33: 94.0}.toTable()), (16, {16: 0.0}.toTable()), (17, {17: 0.0}.toTable()), (18, {18: 0.0, 32: 54.0, 33: 1.0}.toTable()), (19, {19: 0.0, 33: 88.0}.toTable()), (20, {20: 0.0, 32: 2.0, 33: 57.0}.toTable()), (21, {21: 0.0}.toTable()), (22, {22: 0.0, 32: 65.0, 33: 34.0}.toTable()), (23, {23: 0.0, 25: 89.0, 27: 91.0, 29: 81.0, 32: 90.0, 33: 71.0, 31: 107.0}.toTable()), (24, {24: 0.0, 25: 55.0, 27: 97.0, 31: 46.0, 33: 78.0, 32: 94.0}.toTable()), (25, {25: 0.0, 31: 18.0, 32: 66.0, 33: 50.0}.toTable()), (26, {26: 0.0, 29: 62.0, 33: 44.0, 32: 93.0}.toTable()), (27, {27: 0.0, 33: 32.0}.toTable()), (28, {28: 0.0, 31: 84.0, 33: 31.0, 32: 132.0}.toTable()), (29, {29: 0.0, 32: 31.0, 33: 33.0}.toTable()), (30, {30: 0.0, 32: 57.0, 33: 92.0}.toTable()), (31, {31: 0.0, 32: 48.0, 33: 32.0}.toTable()), (32, {32: 0.0, 33: 67.0}.toTable()), (33, {33: 0.0}.toTable())]
  check dist == expectedDist

test "all pairs bellman ford path on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (19, 33), (23, 25), (23, 29), (25, 24), (27, 23), (27, 24), (27, 33), (28, 33), (29, 26), (30, 32), (30, 33), (31, 24), (31, 25), (31, 28), (31, 32), (31, 33), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (32, 29), (32, 33), (33, 14), (33, 15), (33, 18), (33, 20), (33, 22), (33, 23), (33, 26), (33, 29)])
  let weight: TableRef[Edge, float] = {(0, 1): 10.0, (0, 2): 23.0, (0, 3): 77.0, (0, 4): 40.0, (0, 5): 13.0, (0, 6): 44.0, (0, 7): 97.0, (0, 8): 25.0, (0, 10): 20.0, (0, 11): 21.0, (0, 12): 77.0, (0, 13): 23.0, (0, 17): 57.0, (0, 19): 74.0, (0, 21): 46.0, (0, 31): 2.0, (1, 2): 31.0, (1, 3): 84.0, (1, 7): 9.0, (1, 13): 53.0, (1, 17): 41.0, (1, 19): 24.0, (1, 21): 48.0, (1, 30): 10.0, (2, 3): 54.0, (2, 7): 10.0, (2, 8): 82.0, (2, 9): 64.0, (2, 13): 30.0, (2, 27): 91.0, (2, 28): 71.0, (2, 32): 2.0, (3, 7): 42.0, (3, 12): 98.0, (3, 13): 31.0, (4, 6): 44.0, (4, 10): 91.0, (5, 6): 11.0, (5, 10): 14.0, (5, 16): 51.0, (6, 16): 100.0, (8, 30): 49.0, (8, 32): 29.0, (8, 33): 44.0, (13, 33): 6.0, (19, 33): 93.0, (31, 24): 78.0, (31, 25): 87.0, (31, 28): 52.0, (31, 32): 65.0, (31, 33): 10.0, (30, 32): 25.0, (30, 33): 56.0, (9, 33): 97.0, (27, 23): 43.0, (27, 24): 30.0, (27, 33): 8.0, (28, 33): 87.0, (32, 14): 66.0, (32, 15): 6.0, (32, 18): 47.0, (32, 20): 12.0, (32, 22): 6.0, (32, 23): 46.0, (32, 29): 100.0, (32, 33): 31.0, (33, 14): 54.0, (33, 15): 47.0, (33, 18): 50.0, (33, 20): 66.0, (33, 22): 69.0, (33, 23): 15.0, (33, 26): 37.0, (33, 29): 55.0, (23, 25): 75.0, (23, 29): 59.0, (25, 24): 40.0, (29, 26): 46.0}.newTable()
  let paths = WG.allPairsBellmanFordPath(weight=weight).toSeq()
  let expectedPaths = @[(0, {0: @[0], 1: @[0, 1], 2: @[0, 2], 3: @[0, 31, 33, 13, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 5, 6], 7: @[0, 1, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 31, 33, 13], 17: @[0, 1, 17], 19: @[0, 1, 19], 21: @[0, 21], 31: @[0, 31], 30: @[0, 1, 30], 9: @[0, 2, 9], 27: @[0, 31, 33, 27], 28: @[0, 31, 28], 32: @[0, 2, 32], 16: @[0, 5, 16], 33: @[0, 31, 33], 24: @[0, 31, 33, 27, 24], 25: @[0, 31, 25], 23: @[0, 31, 33, 23], 14: @[0, 31, 33, 14], 15: @[0, 2, 32, 15], 18: @[0, 31, 33, 18], 20: @[0, 2, 32, 20], 22: @[0, 2, 32, 22], 29: @[0, 31, 33, 29], 26: @[0, 31, 33, 26]}.toTable()), (1, {1: @[1], 0: @[1, 0], 2: @[1, 7, 2], 3: @[1, 7, 3], 7: @[1, 7], 13: @[1, 0, 31, 33, 13], 17: @[1, 17], 19: @[1, 19], 21: @[1, 21], 30: @[1, 30], 4: @[1, 0, 4], 5: @[1, 0, 5], 6: @[1, 0, 5, 6], 8: @[1, 0, 8], 10: @[1, 0, 10], 11: @[1, 0, 11], 12: @[1, 0, 12], 31: @[1, 0, 31], 9: @[1, 7, 2, 9], 27: @[1, 0, 31, 33, 27], 28: @[1, 0, 31, 28], 32: @[1, 7, 2, 32], 33: @[1, 0, 31, 33], 16: @[1, 0, 5, 16], 24: @[1, 0, 31, 33, 27, 24], 25: @[1, 0, 31, 25], 14: @[1, 0, 31, 33, 14], 15: @[1, 7, 2, 32, 15], 18: @[1, 7, 2, 32, 18], 20: @[1, 7, 2, 32, 20], 22: @[1, 7, 2, 32, 22], 23: @[1, 0, 31, 33, 23], 26: @[1, 0, 31, 33, 26], 29: @[1, 0, 31, 33, 29]}.toTable()), (2, {2: @[2], 0: @[2, 0], 1: @[2, 7, 1], 3: @[2, 7, 3], 7: @[2, 7], 8: @[2, 32, 8], 9: @[2, 9], 13: @[2, 13], 27: @[2, 32, 33, 27], 28: @[2, 28], 32: @[2, 32], 4: @[2, 0, 4], 5: @[2, 0, 5], 6: @[2, 0, 5, 6], 10: @[2, 0, 10], 11: @[2, 0, 11], 12: @[2, 0, 12], 17: @[2, 7, 1, 17], 19: @[2, 7, 1, 19], 21: @[2, 7, 1, 21], 31: @[2, 0, 31], 30: @[2, 32, 30], 33: @[2, 32, 33], 23: @[2, 32, 23], 24: @[2, 32, 33, 27, 24], 14: @[2, 32, 14], 15: @[2, 32, 15], 18: @[2, 32, 18], 20: @[2, 32, 20], 22: @[2, 32, 22], 29: @[2, 32, 33, 29], 16: @[2, 0, 5, 16], 25: @[2, 32, 33, 27, 24, 25], 26: @[2, 32, 33, 26]}.toTable()), (3, {3: @[3], 0: @[3, 13, 33, 31, 0], 1: @[3, 7, 1], 2: @[3, 7, 2], 7: @[3, 7], 12: @[3, 12], 13: @[3, 13], 4: @[3, 13, 33, 31, 0, 4], 5: @[3, 13, 33, 31, 0, 5], 6: @[3, 13, 33, 31, 0, 5, 6], 8: @[3, 13, 33, 31, 0, 8], 10: @[3, 13, 33, 31, 0, 10], 11: @[3, 13, 33, 31, 0, 11], 17: @[3, 7, 1, 17], 19: @[3, 7, 1, 19], 21: @[3, 13, 33, 31, 0, 21], 31: @[3, 13, 33, 31], 30: @[3, 7, 1, 30], 9: @[3, 7, 2, 9], 27: @[3, 13, 33, 27], 28: @[3, 13, 33, 31, 28], 32: @[3, 7, 2, 32], 33: @[3, 13, 33], 14: @[3, 13, 33, 14], 15: @[3, 7, 2, 32, 15], 18: @[3, 13, 33, 18], 20: @[3, 7, 2, 32, 20], 22: @[3, 7, 2, 32, 22], 23: @[3, 13, 33, 23], 26: @[3, 13, 33, 26], 29: @[3, 13, 33, 29], 24: @[3, 13, 33, 27, 24], 16: @[3, 13, 33, 31, 0, 5, 16], 25: @[3, 13, 33, 27, 24, 25]}.toTable()), (4, {4: @[4], 0: @[4, 0], 6: @[4, 6], 10: @[4, 0, 10], 1: @[4, 0, 1], 2: @[4, 0, 2], 3: @[4, 0, 31, 33, 13, 3], 5: @[4, 0, 5], 7: @[4, 0, 1, 7], 8: @[4, 0, 8], 11: @[4, 0, 11], 12: @[4, 0, 12], 13: @[4, 0, 31, 33, 13], 17: @[4, 0, 1, 17], 19: @[4, 0, 1, 19], 21: @[4, 0, 21], 31: @[4, 0, 31], 16: @[4, 0, 5, 16], 30: @[4, 0, 1, 30], 9: @[4, 0, 2, 9], 27: @[4, 0, 31, 33, 27], 28: @[4, 0, 31, 28], 32: @[4, 0, 2, 32], 33: @[4, 0, 31, 33], 24: @[4, 0, 31, 33, 27, 24], 25: @[4, 0, 31, 25], 23: @[4, 0, 31, 33, 23], 14: @[4, 0, 31, 33, 14], 15: @[4, 0, 2, 32, 15], 18: @[4, 0, 31, 33, 18], 20: @[4, 0, 2, 32, 20], 22: @[4, 0, 2, 32, 22], 29: @[4, 0, 31, 33, 29], 26: @[4, 0, 31, 33, 26]}.toTable()), (5, {5: @[5], 0: @[5, 0], 6: @[5, 6], 10: @[5, 10], 16: @[5, 16], 1: @[5, 0, 1], 2: @[5, 0, 2], 3: @[5, 0, 31, 33, 13, 3], 4: @[5, 0, 4], 7: @[5, 0, 1, 7], 8: @[5, 0, 8], 11: @[5, 0, 11], 12: @[5, 0, 12], 13: @[5, 0, 31, 33, 13], 17: @[5, 0, 1, 17], 19: @[5, 0, 1, 19], 21: @[5, 0, 21], 31: @[5, 0, 31], 30: @[5, 0, 1, 30], 9: @[5, 0, 2, 9], 27: @[5, 0, 31, 33, 27], 28: @[5, 0, 31, 28], 32: @[5, 0, 2, 32], 33: @[5, 0, 31, 33], 24: @[5, 0, 31, 33, 27, 24], 25: @[5, 0, 31, 25], 23: @[5, 0, 31, 33, 23], 14: @[5, 0, 31, 33, 14], 15: @[5, 0, 2, 32, 15], 18: @[5, 0, 31, 33, 18], 20: @[5, 0, 2, 32, 20], 22: @[5, 0, 2, 32, 22], 29: @[5, 0, 31, 33, 29], 26: @[5, 0, 31, 33, 26]}.toTable()), (6, {6: @[6], 0: @[6, 5, 0], 4: @[6, 4], 5: @[6, 5], 16: @[6, 5, 16], 1: @[6, 5, 0, 1], 2: @[6, 5, 0, 2], 3: @[6, 5, 0, 31, 33, 13, 3], 7: @[6, 5, 0, 1, 7], 8: @[6, 5, 0, 8], 10: @[6, 5, 10], 11: @[6, 5, 0, 11], 12: @[6, 5, 0, 12], 13: @[6, 5, 0, 31, 33, 13], 17: @[6, 5, 0, 1, 17], 19: @[6, 5, 0, 1, 19], 21: @[6, 5, 0, 21], 31: @[6, 5, 0, 31], 30: @[6, 5, 0, 1, 30], 9: @[6, 5, 0, 2, 9], 27: @[6, 5, 0, 31, 33, 27], 28: @[6, 5, 0, 31, 28], 32: @[6, 5, 0, 2, 32], 33: @[6, 5, 0, 31, 33], 24: @[6, 5, 0, 31, 33, 27, 24], 25: @[6, 5, 0, 31, 25], 23: @[6, 5, 0, 31, 33, 23], 14: @[6, 5, 0, 31, 33, 14], 15: @[6, 5, 0, 2, 32, 15], 18: @[6, 5, 0, 31, 33, 18], 20: @[6, 5, 0, 2, 32, 20], 22: @[6, 5, 0, 2, 32, 22], 29: @[6, 5, 0, 31, 33, 29], 26: @[6, 5, 0, 31, 33, 26]}.toTable()), (7, {7: @[7], 0: @[7, 1, 0], 1: @[7, 1], 2: @[7, 2], 3: @[7, 3], 4: @[7, 1, 0, 4], 5: @[7, 1, 0, 5], 6: @[7, 1, 0, 5, 6], 8: @[7, 2, 32, 8], 10: @[7, 1, 0, 10], 11: @[7, 1, 0, 11], 12: @[7, 1, 0, 12], 13: @[7, 1, 0, 31, 33, 13], 17: @[7, 1, 17], 19: @[7, 1, 19], 21: @[7, 1, 21], 31: @[7, 1, 0, 31], 30: @[7, 1, 30], 9: @[7, 2, 9], 27: @[7, 1, 0, 31, 33, 27], 28: @[7, 1, 0, 31, 28], 32: @[7, 2, 32], 33: @[7, 1, 0, 31, 33], 23: @[7, 1, 0, 31, 33, 23], 24: @[7, 1, 0, 31, 33, 27, 24], 14: @[7, 2, 32, 14], 15: @[7, 2, 32, 15], 18: @[7, 2, 32, 18], 20: @[7, 2, 32, 20], 22: @[7, 2, 32, 22], 29: @[7, 1, 0, 31, 33, 29], 26: @[7, 1, 0, 31, 33, 26], 16: @[7, 1, 0, 5, 16], 25: @[7, 1, 0, 31, 25]}.toTable()), (8, {8: @[8], 0: @[8, 0], 2: @[8, 32, 2], 30: @[8, 0, 1, 30], 32: @[8, 32], 33: @[8, 0, 31, 33], 1: @[8, 0, 1], 3: @[8, 0, 31, 33, 13, 3], 4: @[8, 0, 4], 5: @[8, 0, 5], 6: @[8, 0, 5, 6], 7: @[8, 32, 2, 7], 10: @[8, 0, 10], 11: @[8, 0, 11], 12: @[8, 0, 12], 13: @[8, 0, 31, 33, 13], 17: @[8, 0, 1, 17], 19: @[8, 0, 1, 19], 21: @[8, 0, 21], 31: @[8, 0, 31], 9: @[8, 32, 2, 9], 27: @[8, 0, 31, 33, 27], 28: @[8, 0, 31, 28], 14: @[8, 0, 31, 33, 14], 15: @[8, 32, 15], 18: @[8, 32, 18], 20: @[8, 32, 20], 22: @[8, 32, 22], 23: @[8, 0, 31, 33, 23], 29: @[8, 0, 31, 33, 29], 26: @[8, 0, 31, 33, 26], 16: @[8, 0, 5, 16], 24: @[8, 0, 31, 33, 27, 24], 25: @[8, 0, 31, 25]}.toTable()), (9, {9: @[9], 2: @[9, 2], 33: @[9, 33], 0: @[9, 2, 0], 1: @[9, 2, 7, 1], 3: @[9, 2, 7, 3], 7: @[9, 2, 7], 8: @[9, 2, 32, 8], 13: @[9, 2, 13], 27: @[9, 33, 27], 28: @[9, 2, 28], 32: @[9, 2, 32], 14: @[9, 2, 32, 14], 15: @[9, 2, 32, 15], 18: @[9, 2, 32, 18], 19: @[9, 2, 7, 1, 19], 20: @[9, 2, 32, 20], 22: @[9, 2, 32, 22], 23: @[9, 33, 23], 26: @[9, 33, 26], 29: @[9, 33, 29], 30: @[9, 2, 32, 30], 31: @[9, 2, 0, 31], 4: @[9, 2, 0, 4], 5: @[9, 2, 0, 5], 6: @[9, 2, 0, 5, 6], 10: @[9, 2, 0, 10], 11: @[9, 2, 0, 11], 12: @[9, 2, 0, 12], 17: @[9, 2, 7, 1, 17], 21: @[9, 2, 7, 1, 21], 24: @[9, 33, 27, 24], 25: @[9, 33, 27, 24, 25], 16: @[9, 2, 0, 5, 16]}.toTable()), (10, {10: @[10], 0: @[10, 0], 4: @[10, 0, 4], 5: @[10, 5], 1: @[10, 0, 1], 2: @[10, 0, 2], 3: @[10, 0, 31, 33, 13, 3], 6: @[10, 5, 6], 7: @[10, 0, 1, 7], 8: @[10, 0, 8], 11: @[10, 0, 11], 12: @[10, 0, 12], 13: @[10, 0, 31, 33, 13], 17: @[10, 0, 1, 17], 19: @[10, 0, 1, 19], 21: @[10, 0, 21], 31: @[10, 0, 31], 16: @[10, 5, 16], 30: @[10, 0, 1, 30], 9: @[10, 0, 2, 9], 27: @[10, 0, 31, 33, 27], 28: @[10, 0, 31, 28], 32: @[10, 0, 2, 32], 33: @[10, 0, 31, 33], 24: @[10, 0, 31, 33, 27, 24], 25: @[10, 0, 31, 25], 23: @[10, 0, 31, 33, 23], 14: @[10, 0, 31, 33, 14], 15: @[10, 0, 2, 32, 15], 18: @[10, 0, 31, 33, 18], 20: @[10, 0, 2, 32, 20], 22: @[10, 0, 2, 32, 22], 29: @[10, 0, 31, 33, 29], 26: @[10, 0, 31, 33, 26]}.toTable()), (11, {11: @[11], 0: @[11, 0], 1: @[11, 0, 1], 2: @[11, 0, 2], 3: @[11, 0, 31, 33, 13, 3], 4: @[11, 0, 4], 5: @[11, 0, 5], 6: @[11, 0, 5, 6], 7: @[11, 0, 1, 7], 8: @[11, 0, 8], 10: @[11, 0, 10], 12: @[11, 0, 12], 13: @[11, 0, 31, 33, 13], 17: @[11, 0, 1, 17], 19: @[11, 0, 1, 19], 21: @[11, 0, 21], 31: @[11, 0, 31], 30: @[11, 0, 1, 30], 9: @[11, 0, 2, 9], 27: @[11, 0, 31, 33, 27], 28: @[11, 0, 31, 28], 32: @[11, 0, 2, 32], 16: @[11, 0, 5, 16], 33: @[11, 0, 31, 33], 24: @[11, 0, 31, 33, 27, 24], 25: @[11, 0, 31, 25], 23: @[11, 0, 31, 33, 23], 14: @[11, 0, 31, 33, 14], 15: @[11, 0, 2, 32, 15], 18: @[11, 0, 31, 33, 18], 20: @[11, 0, 2, 32, 20], 22: @[11, 0, 2, 32, 22], 29: @[11, 0, 31, 33, 29], 26: @[11, 0, 31, 33, 26]}.toTable()), (12, {12: @[12], 0: @[12, 0], 3: @[12, 3], 1: @[12, 0, 1], 2: @[12, 0, 2], 4: @[12, 0, 4], 5: @[12, 0, 5], 6: @[12, 0, 5, 6], 7: @[12, 0, 1, 7], 8: @[12, 0, 8], 10: @[12, 0, 10], 11: @[12, 0, 11], 13: @[12, 0, 31, 33, 13], 17: @[12, 0, 1, 17], 19: @[12, 0, 1, 19], 21: @[12, 0, 21], 31: @[12, 0, 31], 30: @[12, 0, 1, 30], 9: @[12, 0, 2, 9], 27: @[12, 0, 31, 33, 27], 28: @[12, 0, 31, 28], 32: @[12, 0, 2, 32], 16: @[12, 0, 5, 16], 33: @[12, 0, 31, 33], 24: @[12, 0, 31, 33, 27, 24], 25: @[12, 0, 31, 25], 23: @[12, 0, 31, 33, 23], 14: @[12, 0, 31, 33, 14], 15: @[12, 0, 2, 32, 15], 18: @[12, 0, 31, 33, 18], 20: @[12, 0, 2, 32, 20], 22: @[12, 0, 2, 32, 22], 29: @[12, 0, 31, 33, 29], 26: @[12, 0, 31, 33, 26]}.toTable()), (13, {13: @[13], 0: @[13, 33, 31, 0], 1: @[13, 33, 31, 0, 1], 2: @[13, 2], 3: @[13, 3], 33: @[13, 33], 4: @[13, 33, 31, 0, 4], 5: @[13, 33, 31, 0, 5], 6: @[13, 33, 31, 0, 5, 6], 7: @[13, 33, 31, 0, 1, 7], 8: @[13, 33, 31, 0, 8], 10: @[13, 33, 31, 0, 10], 11: @[13, 33, 31, 0, 11], 12: @[13, 33, 31, 0, 12], 17: @[13, 33, 31, 0, 1, 17], 19: @[13, 33, 31, 0, 1, 19], 21: @[13, 33, 31, 0, 21], 31: @[13, 33, 31], 30: @[13, 33, 31, 0, 1, 30], 9: @[13, 2, 9], 27: @[13, 33, 27], 28: @[13, 33, 31, 28], 32: @[13, 2, 32], 14: @[13, 33, 14], 15: @[13, 2, 32, 15], 18: @[13, 33, 18], 20: @[13, 2, 32, 20], 22: @[13, 2, 32, 22], 23: @[13, 33, 23], 26: @[13, 33, 26], 29: @[13, 33, 29], 16: @[13, 33, 31, 0, 5, 16], 24: @[13, 33, 27, 24], 25: @[13, 33, 27, 24, 25]}.toTable()), (14, {14: @[14], 32: @[14, 32], 33: @[14, 33], 2: @[14, 32, 2], 8: @[14, 33, 31, 0, 8], 15: @[14, 32, 15], 18: @[14, 33, 18], 20: @[14, 32, 20], 22: @[14, 32, 22], 23: @[14, 33, 23], 29: @[14, 33, 29], 30: @[14, 33, 31, 0, 1, 30], 31: @[14, 33, 31], 9: @[14, 32, 2, 9], 13: @[14, 33, 13], 19: @[14, 33, 31, 0, 1, 19], 26: @[14, 33, 26], 27: @[14, 33, 27], 28: @[14, 33, 31, 28], 0: @[14, 33, 31, 0], 1: @[14, 33, 31, 0, 1], 3: @[14, 33, 13, 3], 7: @[14, 32, 2, 7], 25: @[14, 33, 27, 24, 25], 24: @[14, 33, 27, 24], 4: @[14, 33, 31, 0, 4], 5: @[14, 33, 31, 0, 5], 6: @[14, 33, 31, 0, 5, 6], 10: @[14, 33, 31, 0, 10], 11: @[14, 33, 31, 0, 11], 12: @[14, 33, 31, 0, 12], 17: @[14, 33, 31, 0, 1, 17], 21: @[14, 33, 31, 0, 21], 16: @[14, 33, 31, 0, 5, 16]}.toTable()), (15, {15: @[15], 32: @[15, 32], 33: @[15, 32, 33], 2: @[15, 32, 2], 8: @[15, 32, 8], 14: @[15, 32, 14], 18: @[15, 32, 18], 20: @[15, 32, 20], 22: @[15, 32, 22], 23: @[15, 32, 23], 29: @[15, 32, 33, 29], 30: @[15, 32, 30], 31: @[15, 32, 2, 0, 31], 9: @[15, 32, 2, 9], 13: @[15, 32, 2, 13], 19: @[15, 32, 2, 7, 1, 19], 26: @[15, 32, 33, 26], 27: @[15, 32, 33, 27], 28: @[15, 32, 2, 28], 0: @[15, 32, 2, 0], 1: @[15, 32, 2, 7, 1], 3: @[15, 32, 2, 7, 3], 7: @[15, 32, 2, 7], 25: @[15, 32, 33, 27, 24, 25], 24: @[15, 32, 33, 27, 24], 4: @[15, 32, 2, 0, 4], 5: @[15, 32, 2, 0, 5], 6: @[15, 32, 2, 0, 5, 6], 10: @[15, 32, 2, 0, 10], 11: @[15, 32, 2, 0, 11], 12: @[15, 32, 2, 0, 12], 17: @[15, 32, 2, 7, 1, 17], 21: @[15, 32, 2, 7, 1, 21], 16: @[15, 32, 2, 0, 5, 16]}.toTable()), (16, {16: @[16], 5: @[16, 5], 6: @[16, 5, 6], 0: @[16, 5, 0], 10: @[16, 5, 10], 4: @[16, 5, 0, 4], 1: @[16, 5, 0, 1], 2: @[16, 5, 0, 2], 3: @[16, 5, 0, 31, 33, 13, 3], 7: @[16, 5, 0, 1, 7], 8: @[16, 5, 0, 8], 11: @[16, 5, 0, 11], 12: @[16, 5, 0, 12], 13: @[16, 5, 0, 31, 33, 13], 17: @[16, 5, 0, 1, 17], 19: @[16, 5, 0, 1, 19], 21: @[16, 5, 0, 21], 31: @[16, 5, 0, 31], 30: @[16, 5, 0, 1, 30], 9: @[16, 5, 0, 2, 9], 27: @[16, 5, 0, 31, 33, 27], 28: @[16, 5, 0, 31, 28], 32: @[16, 5, 0, 2, 32], 33: @[16, 5, 0, 31, 33], 24: @[16, 5, 0, 31, 33, 27, 24], 25: @[16, 5, 0, 31, 25], 23: @[16, 5, 0, 31, 33, 23], 14: @[16, 5, 0, 31, 33, 14], 15: @[16, 5, 0, 2, 32, 15], 18: @[16, 5, 0, 31, 33, 18], 20: @[16, 5, 0, 2, 32, 20], 22: @[16, 5, 0, 2, 32, 22], 29: @[16, 5, 0, 31, 33, 29], 26: @[16, 5, 0, 31, 33, 26]}.toTable()), (17, {17: @[17], 0: @[17, 1, 0], 1: @[17, 1], 2: @[17, 1, 7, 2], 3: @[17, 1, 7, 3], 4: @[17, 1, 0, 4], 5: @[17, 1, 0, 5], 6: @[17, 1, 0, 5, 6], 7: @[17, 1, 7], 8: @[17, 1, 0, 8], 10: @[17, 1, 0, 10], 11: @[17, 1, 0, 11], 12: @[17, 1, 0, 12], 13: @[17, 1, 0, 31, 33, 13], 19: @[17, 1, 19], 21: @[17, 1, 21], 31: @[17, 1, 0, 31], 30: @[17, 1, 30], 9: @[17, 1, 7, 2, 9], 27: @[17, 1, 0, 31, 33, 27], 28: @[17, 1, 0, 31, 28], 32: @[17, 1, 7, 2, 32], 33: @[17, 1, 0, 31, 33], 14: @[17, 1, 0, 31, 33, 14], 15: @[17, 1, 7, 2, 32, 15], 18: @[17, 1, 7, 2, 32, 18], 20: @[17, 1, 7, 2, 32, 20], 22: @[17, 1, 7, 2, 32, 22], 23: @[17, 1, 0, 31, 33, 23], 26: @[17, 1, 0, 31, 33, 26], 29: @[17, 1, 0, 31, 33, 29], 16: @[17, 1, 0, 5, 16], 24: @[17, 1, 0, 31, 33, 27, 24], 25: @[17, 1, 0, 31, 25]}.toTable()), (18, {18: @[18], 32: @[18, 32], 33: @[18, 33], 2: @[18, 32, 2], 8: @[18, 32, 8], 14: @[18, 33, 14], 15: @[18, 32, 15], 20: @[18, 32, 20], 22: @[18, 32, 22], 23: @[18, 33, 23], 29: @[18, 33, 29], 30: @[18, 32, 30], 31: @[18, 33, 31], 9: @[18, 32, 2, 9], 13: @[18, 33, 13], 19: @[18, 32, 2, 7, 1, 19], 26: @[18, 33, 26], 27: @[18, 33, 27], 28: @[18, 33, 31, 28], 0: @[18, 33, 31, 0], 1: @[18, 32, 2, 7, 1], 3: @[18, 33, 13, 3], 7: @[18, 32, 2, 7], 25: @[18, 33, 27, 24, 25], 24: @[18, 33, 27, 24], 4: @[18, 33, 31, 0, 4], 5: @[18, 33, 31, 0, 5], 6: @[18, 33, 31, 0, 5, 6], 10: @[18, 33, 31, 0, 10], 11: @[18, 33, 31, 0, 11], 12: @[18, 33, 31, 0, 12], 17: @[18, 32, 2, 7, 1, 17], 21: @[18, 33, 31, 0, 21], 16: @[18, 33, 31, 0, 5, 16]}.toTable()), (19, {19: @[19], 0: @[19, 1, 0], 1: @[19, 1], 33: @[19, 1, 0, 31, 33], 2: @[19, 1, 7, 2], 3: @[19, 1, 7, 3], 4: @[19, 1, 0, 4], 5: @[19, 1, 0, 5], 6: @[19, 1, 0, 5, 6], 7: @[19, 1, 7], 8: @[19, 1, 0, 8], 10: @[19, 1, 0, 10], 11: @[19, 1, 0, 11], 12: @[19, 1, 0, 12], 13: @[19, 1, 0, 31, 33, 13], 17: @[19, 1, 17], 21: @[19, 1, 21], 31: @[19, 1, 0, 31], 30: @[19, 1, 30], 9: @[19, 1, 7, 2, 9], 14: @[19, 1, 0, 31, 33, 14], 15: @[19, 1, 7, 2, 32, 15], 18: @[19, 1, 7, 2, 32, 18], 20: @[19, 1, 7, 2, 32, 20], 22: @[19, 1, 7, 2, 32, 22], 23: @[19, 1, 0, 31, 33, 23], 26: @[19, 1, 0, 31, 33, 26], 27: @[19, 1, 0, 31, 33, 27], 28: @[19, 1, 0, 31, 28], 29: @[19, 1, 0, 31, 33, 29], 32: @[19, 1, 7, 2, 32], 16: @[19, 1, 0, 5, 16], 24: @[19, 1, 0, 31, 33, 27, 24], 25: @[19, 1, 0, 31, 25]}.toTable()), (20, {20: @[20], 32: @[20, 32], 33: @[20, 32, 33], 2: @[20, 32, 2], 8: @[20, 32, 8], 14: @[20, 32, 14], 15: @[20, 32, 15], 18: @[20, 32, 18], 22: @[20, 32, 22], 23: @[20, 32, 23], 29: @[20, 32, 33, 29], 30: @[20, 32, 30], 31: @[20, 32, 2, 0, 31], 9: @[20, 32, 2, 9], 13: @[20, 32, 2, 13], 19: @[20, 32, 2, 7, 1, 19], 26: @[20, 32, 33, 26], 27: @[20, 32, 33, 27], 28: @[20, 32, 2, 28], 0: @[20, 32, 2, 0], 1: @[20, 32, 2, 7, 1], 3: @[20, 32, 2, 7, 3], 7: @[20, 32, 2, 7], 25: @[20, 32, 33, 27, 24, 25], 24: @[20, 32, 33, 27, 24], 4: @[20, 32, 2, 0, 4], 5: @[20, 32, 2, 0, 5], 6: @[20, 32, 2, 0, 5, 6], 10: @[20, 32, 2, 0, 10], 11: @[20, 32, 2, 0, 11], 12: @[20, 32, 2, 0, 12], 17: @[20, 32, 2, 7, 1, 17], 21: @[20, 32, 2, 7, 1, 21], 16: @[20, 32, 2, 0, 5, 16]}.toTable()), (21, {21: @[21], 0: @[21, 0], 1: @[21, 1], 2: @[21, 1, 7, 2], 3: @[21, 0, 31, 33, 13, 3], 4: @[21, 0, 4], 5: @[21, 0, 5], 6: @[21, 0, 5, 6], 7: @[21, 1, 7], 8: @[21, 0, 8], 10: @[21, 0, 10], 11: @[21, 0, 11], 12: @[21, 0, 12], 13: @[21, 0, 31, 33, 13], 17: @[21, 1, 17], 19: @[21, 1, 19], 31: @[21, 0, 31], 30: @[21, 1, 30], 9: @[21, 1, 7, 2, 9], 27: @[21, 0, 31, 33, 27], 28: @[21, 0, 31, 28], 32: @[21, 1, 7, 2, 32], 16: @[21, 0, 5, 16], 33: @[21, 0, 31, 33], 24: @[21, 0, 31, 33, 27, 24], 25: @[21, 0, 31, 25], 14: @[21, 0, 31, 33, 14], 15: @[21, 1, 7, 2, 32, 15], 18: @[21, 0, 31, 33, 18], 20: @[21, 1, 7, 2, 32, 20], 22: @[21, 1, 7, 2, 32, 22], 23: @[21, 0, 31, 33, 23], 26: @[21, 0, 31, 33, 26], 29: @[21, 0, 31, 33, 29]}.toTable()), (22, {22: @[22], 32: @[22, 32], 33: @[22, 32, 33], 2: @[22, 32, 2], 8: @[22, 32, 8], 14: @[22, 32, 14], 15: @[22, 32, 15], 18: @[22, 32, 18], 20: @[22, 32, 20], 23: @[22, 32, 23], 29: @[22, 32, 33, 29], 30: @[22, 32, 30], 31: @[22, 32, 2, 0, 31], 9: @[22, 32, 2, 9], 13: @[22, 32, 2, 13], 19: @[22, 32, 2, 7, 1, 19], 26: @[22, 32, 33, 26], 27: @[22, 32, 33, 27], 28: @[22, 32, 2, 28], 0: @[22, 32, 2, 0], 1: @[22, 32, 2, 7, 1], 3: @[22, 32, 2, 7, 3], 7: @[22, 32, 2, 7], 25: @[22, 32, 33, 27, 24, 25], 24: @[22, 32, 33, 27, 24], 4: @[22, 32, 2, 0, 4], 5: @[22, 32, 2, 0, 5], 6: @[22, 32, 2, 0, 5, 6], 10: @[22, 32, 2, 0, 10], 11: @[22, 32, 2, 0, 11], 12: @[22, 32, 2, 0, 12], 17: @[22, 32, 2, 7, 1, 17], 21: @[22, 32, 2, 7, 1, 21], 16: @[22, 32, 2, 0, 5, 16]}.toTable()), (23, {23: @[23], 25: @[23, 25], 27: @[23, 33, 27], 29: @[23, 29], 32: @[23, 32], 33: @[23, 33], 24: @[23, 33, 27, 24], 31: @[23, 33, 31], 2: @[23, 32, 2], 26: @[23, 33, 26], 8: @[23, 33, 31, 0, 8], 14: @[23, 33, 14], 15: @[23, 32, 15], 18: @[23, 33, 18], 20: @[23, 32, 20], 22: @[23, 32, 22], 30: @[23, 33, 31, 0, 1, 30], 9: @[23, 33, 9], 13: @[23, 33, 13], 19: @[23, 33, 31, 0, 1, 19], 28: @[23, 33, 31, 28], 0: @[23, 33, 31, 0], 1: @[23, 33, 31, 0, 1], 3: @[23, 33, 13, 3], 7: @[23, 33, 31, 0, 1, 7], 4: @[23, 33, 31, 0, 4], 5: @[23, 33, 31, 0, 5], 6: @[23, 33, 31, 0, 5, 6], 10: @[23, 33, 31, 0, 10], 11: @[23, 33, 31, 0, 11], 12: @[23, 33, 31, 0, 12], 17: @[23, 33, 31, 0, 1, 17], 21: @[23, 33, 31, 0, 21], 16: @[23, 33, 31, 0, 5, 16]}.toTable()), (24, {24: @[24], 25: @[24, 25], 27: @[24, 27], 31: @[24, 27, 33, 31], 23: @[24, 27, 33, 23], 2: @[24, 27, 33, 32, 2], 33: @[24, 27, 33], 0: @[24, 27, 33, 31, 0], 28: @[24, 27, 33, 31, 28], 32: @[24, 27, 33, 32], 29: @[24, 27, 33, 29], 1: @[24, 27, 33, 31, 0, 1], 3: @[24, 27, 33, 13, 3], 7: @[24, 27, 33, 31, 0, 1, 7], 8: @[24, 27, 33, 31, 0, 8], 9: @[24, 27, 33, 9], 13: @[24, 27, 33, 13], 14: @[24, 27, 33, 14], 15: @[24, 27, 33, 32, 15], 18: @[24, 27, 33, 18], 19: @[24, 27, 33, 31, 0, 1, 19], 20: @[24, 27, 33, 32, 20], 22: @[24, 27, 33, 32, 22], 26: @[24, 27, 33, 26], 30: @[24, 27, 33, 31, 0, 1, 30], 4: @[24, 27, 33, 31, 0, 4], 5: @[24, 27, 33, 31, 0, 5], 6: @[24, 27, 33, 31, 0, 5, 6], 10: @[24, 27, 33, 31, 0, 10], 11: @[24, 27, 33, 31, 0, 11], 12: @[24, 27, 33, 31, 0, 12], 17: @[24, 27, 33, 31, 0, 1, 17], 21: @[24, 27, 33, 31, 0, 21], 16: @[24, 27, 33, 31, 0, 5, 16]}.toTable()), (25, {25: @[25], 23: @[25, 23], 24: @[25, 24], 31: @[25, 31], 27: @[25, 24, 27], 29: @[25, 24, 27, 33, 29], 32: @[25, 24, 27, 33, 32], 33: @[25, 24, 27, 33], 0: @[25, 31, 0], 28: @[25, 31, 28], 2: @[25, 24, 27, 33, 32, 2], 26: @[25, 24, 27, 33, 26], 8: @[25, 31, 0, 8], 14: @[25, 24, 27, 33, 14], 15: @[25, 24, 27, 33, 32, 15], 18: @[25, 24, 27, 33, 18], 20: @[25, 24, 27, 33, 32, 20], 22: @[25, 24, 27, 33, 32, 22], 30: @[25, 31, 0, 1, 30], 9: @[25, 24, 27, 33, 9], 13: @[25, 24, 27, 33, 13], 19: @[25, 31, 0, 1, 19], 1: @[25, 31, 0, 1], 3: @[25, 24, 27, 33, 13, 3], 4: @[25, 31, 0, 4], 5: @[25, 31, 0, 5], 6: @[25, 31, 0, 5, 6], 7: @[25, 31, 0, 1, 7], 10: @[25, 31, 0, 10], 11: @[25, 31, 0, 11], 12: @[25, 31, 0, 12], 17: @[25, 31, 0, 1, 17], 21: @[25, 31, 0, 21], 16: @[25, 31, 0, 5, 16]}.toTable()), (26, {26: @[26], 29: @[26, 29], 33: @[26, 33], 23: @[26, 33, 23], 32: @[26, 33, 32], 8: @[26, 33, 31, 0, 8], 9: @[26, 33, 9], 13: @[26, 33, 13], 14: @[26, 33, 14], 15: @[26, 33, 32, 15], 18: @[26, 33, 18], 19: @[26, 33, 31, 0, 1, 19], 20: @[26, 33, 32, 20], 22: @[26, 33, 32, 22], 27: @[26, 33, 27], 28: @[26, 33, 31, 28], 30: @[26, 33, 31, 0, 1, 30], 31: @[26, 33, 31], 25: @[26, 33, 27, 24, 25], 2: @[26, 33, 32, 2], 0: @[26, 33, 31, 0], 1: @[26, 33, 31, 0, 1], 3: @[26, 33, 13, 3], 24: @[26, 33, 27, 24], 7: @[26, 33, 31, 0, 1, 7], 4: @[26, 33, 31, 0, 4], 5: @[26, 33, 31, 0, 5], 6: @[26, 33, 31, 0, 5, 6], 10: @[26, 33, 31, 0, 10], 11: @[26, 33, 31, 0, 11], 12: @[26, 33, 31, 0, 12], 17: @[26, 33, 31, 0, 1, 17], 21: @[26, 33, 31, 0, 21], 16: @[26, 33, 31, 0, 5, 16]}.toTable()), (27, {27: @[27], 2: @[27, 33, 32, 2], 23: @[27, 33, 23], 24: @[27, 24], 33: @[27, 33], 0: @[27, 33, 31, 0], 1: @[27, 33, 31, 0, 1], 3: @[27, 33, 13, 3], 7: @[27, 33, 31, 0, 1, 7], 8: @[27, 33, 31, 0, 8], 9: @[27, 33, 9], 13: @[27, 33, 13], 28: @[27, 33, 31, 28], 32: @[27, 33, 32], 25: @[27, 24, 25], 29: @[27, 33, 29], 31: @[27, 33, 31], 14: @[27, 33, 14], 15: @[27, 33, 32, 15], 18: @[27, 33, 18], 19: @[27, 33, 31, 0, 1, 19], 20: @[27, 33, 32, 20], 22: @[27, 33, 32, 22], 26: @[27, 33, 26], 30: @[27, 33, 31, 0, 1, 30], 4: @[27, 33, 31, 0, 4], 5: @[27, 33, 31, 0, 5], 6: @[27, 33, 31, 0, 5, 6], 10: @[27, 33, 31, 0, 10], 11: @[27, 33, 31, 0, 11], 12: @[27, 33, 31, 0, 12], 17: @[27, 33, 31, 0, 1, 17], 21: @[27, 33, 31, 0, 21], 16: @[27, 33, 31, 0, 5, 16]}.toTable()), (28, {28: @[28], 2: @[28, 2], 31: @[28, 31], 33: @[28, 31, 33], 0: @[28, 31, 0], 1: @[28, 31, 0, 1], 3: @[28, 31, 33, 13, 3], 7: @[28, 31, 0, 1, 7], 8: @[28, 31, 0, 8], 9: @[28, 2, 9], 13: @[28, 31, 33, 13], 27: @[28, 31, 33, 27], 32: @[28, 2, 32], 24: @[28, 31, 33, 27, 24], 25: @[28, 31, 25], 14: @[28, 31, 33, 14], 15: @[28, 2, 32, 15], 18: @[28, 31, 33, 18], 19: @[28, 31, 0, 1, 19], 20: @[28, 2, 32, 20], 22: @[28, 2, 32, 22], 23: @[28, 31, 33, 23], 26: @[28, 31, 33, 26], 29: @[28, 31, 33, 29], 30: @[28, 31, 0, 1, 30], 4: @[28, 31, 0, 4], 5: @[28, 31, 0, 5], 6: @[28, 31, 0, 5, 6], 10: @[28, 31, 0, 10], 11: @[28, 31, 0, 11], 12: @[28, 31, 0, 12], 17: @[28, 31, 0, 1, 17], 21: @[28, 31, 0, 21], 16: @[28, 31, 0, 5, 16]}.toTable()), (29, {29: @[29], 23: @[29, 23], 26: @[29, 26], 32: @[29, 33, 32], 33: @[29, 33], 25: @[29, 33, 27, 24, 25], 27: @[29, 33, 27], 2: @[29, 33, 32, 2], 8: @[29, 33, 31, 0, 8], 14: @[29, 33, 14], 15: @[29, 33, 32, 15], 18: @[29, 33, 18], 20: @[29, 33, 32, 20], 22: @[29, 33, 32, 22], 30: @[29, 33, 31, 0, 1, 30], 31: @[29, 33, 31], 9: @[29, 33, 9], 13: @[29, 33, 13], 19: @[29, 33, 31, 0, 1, 19], 28: @[29, 33, 31, 28], 24: @[29, 33, 27, 24], 0: @[29, 33, 31, 0], 1: @[29, 33, 31, 0, 1], 3: @[29, 33, 13, 3], 4: @[29, 33, 31, 0, 4], 5: @[29, 33, 31, 0, 5], 6: @[29, 33, 31, 0, 5, 6], 7: @[29, 33, 31, 0, 1, 7], 10: @[29, 33, 31, 0, 10], 11: @[29, 33, 31, 0, 11], 12: @[29, 33, 31, 0, 12], 17: @[29, 33, 31, 0, 1, 17], 21: @[29, 33, 31, 0, 21], 16: @[29, 33, 31, 0, 5, 16]}.toTable()), (30, {30: @[30], 1: @[30, 1], 8: @[30, 1, 0, 8], 32: @[30, 32], 33: @[30, 1, 0, 31, 33], 0: @[30, 1, 0], 2: @[30, 32, 2], 3: @[30, 1, 7, 3], 7: @[30, 1, 7], 13: @[30, 1, 0, 31, 33, 13], 17: @[30, 1, 17], 19: @[30, 1, 19], 21: @[30, 1, 21], 14: @[30, 1, 0, 31, 33, 14], 15: @[30, 32, 15], 18: @[30, 32, 18], 20: @[30, 32, 20], 22: @[30, 32, 22], 23: @[30, 1, 0, 31, 33, 23], 29: @[30, 1, 0, 31, 33, 29], 31: @[30, 1, 0, 31], 9: @[30, 32, 2, 9], 26: @[30, 1, 0, 31, 33, 26], 27: @[30, 1, 0, 31, 33, 27], 28: @[30, 1, 0, 31, 28], 4: @[30, 1, 0, 4], 5: @[30, 1, 0, 5], 6: @[30, 1, 0, 5, 6], 10: @[30, 1, 0, 10], 11: @[30, 1, 0, 11], 12: @[30, 1, 0, 12], 24: @[30, 1, 0, 31, 33, 27, 24], 25: @[30, 1, 0, 31, 25], 16: @[30, 1, 0, 5, 16]}.toTable()), (31, {31: @[31], 0: @[31, 0], 24: @[31, 33, 27, 24], 25: @[31, 25], 28: @[31, 28], 32: @[31, 0, 2, 32], 33: @[31, 33], 1: @[31, 0, 1], 2: @[31, 0, 2], 3: @[31, 33, 13, 3], 4: @[31, 0, 4], 5: @[31, 0, 5], 6: @[31, 0, 5, 6], 7: @[31, 0, 1, 7], 8: @[31, 0, 8], 10: @[31, 0, 10], 11: @[31, 0, 11], 12: @[31, 0, 12], 13: @[31, 33, 13], 17: @[31, 0, 1, 17], 19: @[31, 0, 1, 19], 21: @[31, 0, 21], 27: @[31, 33, 27], 23: @[31, 33, 23], 14: @[31, 33, 14], 15: @[31, 0, 2, 32, 15], 18: @[31, 33, 18], 20: @[31, 0, 2, 32, 20], 22: @[31, 0, 2, 32, 22], 29: @[31, 33, 29], 30: @[31, 0, 1, 30], 9: @[31, 0, 2, 9], 26: @[31, 33, 26], 16: @[31, 0, 5, 16]}.toTable()), (32, {32: @[32], 2: @[32, 2], 8: @[32, 8], 14: @[32, 14], 15: @[32, 15], 18: @[32, 18], 20: @[32, 20], 22: @[32, 22], 23: @[32, 23], 29: @[32, 33, 29], 30: @[32, 30], 31: @[32, 2, 0, 31], 33: @[32, 33], 0: @[32, 2, 0], 1: @[32, 2, 7, 1], 3: @[32, 2, 7, 3], 7: @[32, 2, 7], 9: @[32, 2, 9], 13: @[32, 2, 13], 27: @[32, 33, 27], 28: @[32, 2, 28], 25: @[32, 33, 27, 24, 25], 26: @[32, 33, 26], 24: @[32, 33, 27, 24], 19: @[32, 2, 7, 1, 19], 4: @[32, 2, 0, 4], 5: @[32, 2, 0, 5], 6: @[32, 2, 0, 5, 6], 10: @[32, 2, 0, 10], 11: @[32, 2, 0, 11], 12: @[32, 2, 0, 12], 17: @[32, 2, 7, 1, 17], 21: @[32, 2, 7, 1, 21], 16: @[32, 2, 0, 5, 16]}.toTable()), (33, {33: @[33], 8: @[33, 31, 0, 8], 9: @[33, 9], 13: @[33, 13], 14: @[33, 14], 15: @[33, 32, 15], 18: @[33, 18], 19: @[33, 31, 0, 1, 19], 20: @[33, 32, 20], 22: @[33, 32, 22], 23: @[33, 23], 26: @[33, 26], 27: @[33, 27], 28: @[33, 31, 28], 29: @[33, 29], 30: @[33, 31, 0, 1, 30], 31: @[33, 31], 32: @[33, 32], 0: @[33, 31, 0], 2: @[33, 32, 2], 1: @[33, 31, 0, 1], 3: @[33, 13, 3], 25: @[33, 27, 24, 25], 24: @[33, 27, 24], 4: @[33, 31, 0, 4], 5: @[33, 31, 0, 5], 6: @[33, 31, 0, 5, 6], 7: @[33, 31, 0, 1, 7], 10: @[33, 31, 0, 10], 11: @[33, 31, 0, 11], 12: @[33, 31, 0, 12], 17: @[33, 31, 0, 1, 17], 21: @[33, 31, 0, 21], 16: @[33, 31, 0, 5, 16]}.toTable())]
  check paths == expectedPaths

test "all pairs bellman ford path on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
  let weight: TableRef[Edge, float] = {(0, 1): 77.0, (0, 2): 93.0, (0, 3): 76.0, (0, 4): 73.0, (0, 5): 13.0, (0, 6): 27.0, (0, 7): 5.0, (0, 8): 20.0, (0, 10): 70.0, (0, 11): 95.0, (0, 12): 73.0, (0, 13): 3.0, (0, 17): 33.0, (0, 19): 13.0, (0, 21): 25.0, (0, 31): 14.0, (1, 2): 12.0, (1, 3): 11.0, (1, 7): 26.0, (1, 13): 9.0, (1, 17): 63.0, (1, 19): 100.0, (1, 21): 38.0, (1, 30): 37.0, (2, 3): 98.0, (2, 7): 71.0, (2, 8): 69.0, (2, 9): 85.0, (2, 13): 29.0, (2, 27): 47.0, (2, 28): 98.0, (2, 32): 56.0, (3, 7): 18.0, (3, 12): 68.0, (3, 13): 42.0, (4, 6): 83.0, (4, 10): 5.0, (5, 6): 56.0, (5, 10): 81.0, (5, 16): 85.0, (6, 16): 47.0, (8, 30): 98.0, (8, 32): 14.0, (8, 33): 9.0, (13, 33): 8.0, (19, 33): 88.0, (31, 32): 48.0, (31, 33): 32.0, (30, 32): 57.0, (30, 33): 92.0, (9, 33): 14.0, (27, 33): 32.0, (28, 31): 84.0, (28, 33): 31.0, (32, 33): 67.0, (14, 32): 31.0, (14, 33): 83.0, (15, 32): 36.0, (15, 33): 94.0, (18, 32): 54.0, (18, 33): 1.0, (20, 32): 2.0, (20, 33): 57.0, (22, 32): 65.0, (22, 33): 34.0, (23, 25): 89.0, (23, 27): 91.0, (23, 29): 81.0, (23, 32): 90.0, (23, 33): 71.0, (25, 31): 18.0, (29, 32): 31.0, (29, 33): 33.0, (24, 25): 55.0, (24, 27): 97.0, (24, 31): 46.0, (26, 29): 62.0, (26, 33): 44.0}.newTable()
  let paths = WDG.allPairsBellmanFordPath(weight=weight).toSeq()
  let expectedPaths = @[(0, {0: @[0], 1: @[0, 1], 2: @[0, 1, 2], 3: @[0, 3], 4: @[0, 4], 5: @[0, 5], 6: @[0, 6], 7: @[0, 7], 8: @[0, 8], 10: @[0, 10], 11: @[0, 11], 12: @[0, 12], 13: @[0, 13], 17: @[0, 17], 19: @[0, 19], 21: @[0, 21], 31: @[0, 31], 30: @[0, 1, 30], 9: @[0, 1, 2, 9], 27: @[0, 1, 2, 27], 28: @[0, 1, 2, 28], 32: @[0, 8, 32], 16: @[0, 6, 16], 33: @[0, 13, 33]}.toTable()), (1, {1: @[1], 2: @[1, 2], 3: @[1, 3], 7: @[1, 7], 13: @[1, 13], 17: @[1, 17], 19: @[1, 19], 21: @[1, 21], 30: @[1, 30], 8: @[1, 2, 8], 9: @[1, 2, 9], 27: @[1, 2, 27], 28: @[1, 2, 28], 32: @[1, 2, 32], 12: @[1, 3, 12], 33: @[1, 13, 33], 31: @[1, 2, 28, 31]}.toTable()), (2, {2: @[2], 3: @[2, 3], 7: @[2, 7], 8: @[2, 8], 9: @[2, 9], 13: @[2, 13], 27: @[2, 27], 28: @[2, 28], 32: @[2, 32], 12: @[2, 3, 12], 30: @[2, 8, 30], 33: @[2, 13, 33], 31: @[2, 28, 31]}.toTable()), (3, {3: @[3], 7: @[3, 7], 12: @[3, 12], 13: @[3, 13], 33: @[3, 13, 33]}.toTable()), (4, {4: @[4], 6: @[4, 6], 10: @[4, 10], 16: @[4, 6, 16]}.toTable()), (5, {5: @[5], 6: @[5, 6], 10: @[5, 10], 16: @[5, 16]}.toTable()), (6, {6: @[6], 16: @[6, 16]}.toTable()), (7, {7: @[7]}.toTable()), (8, {8: @[8], 30: @[8, 30], 32: @[8, 32], 33: @[8, 33]}.toTable()), (9, {9: @[9], 33: @[9, 33]}.toTable()), (10, {10: @[10]}.toTable()), (11, {11: @[11]}.toTable()), (12, {12: @[12]}.toTable()), (13, {13: @[13], 33: @[13, 33]}.toTable()), (14, {14: @[14], 32: @[14, 32], 33: @[14, 33]}.toTable()), (15, {15: @[15], 32: @[15, 32], 33: @[15, 33]}.toTable()), (16, {16: @[16]}.toTable()), (17, {17: @[17]}.toTable()), (18, {18: @[18], 32: @[18, 32], 33: @[18, 33]}.toTable()), (19, {19: @[19], 33: @[19, 33]}.toTable()), (20, {20: @[20], 32: @[20, 32], 33: @[20, 33]}.toTable()), (21, {21: @[21]}.toTable()), (22, {22: @[22], 32: @[22, 32], 33: @[22, 33]}.toTable()), (23, {23: @[23], 25: @[23, 25], 27: @[23, 27], 29: @[23, 29], 32: @[23, 32], 33: @[23, 33], 31: @[23, 25, 31]}.toTable()), (24, {24: @[24], 25: @[24, 25], 27: @[24, 27], 31: @[24, 31], 33: @[24, 31, 33], 32: @[24, 31, 32]}.toTable()), (25, {25: @[25], 31: @[25, 31], 32: @[25, 31, 32], 33: @[25, 31, 33]}.toTable()), (26, {26: @[26], 29: @[26, 29], 33: @[26, 33], 32: @[26, 29, 32]}.toTable()), (27, {27: @[27], 33: @[27, 33]}.toTable()), (28, {28: @[28], 31: @[28, 31], 33: @[28, 33], 32: @[28, 31, 32]}.toTable()), (29, {29: @[29], 32: @[29, 32], 33: @[29, 33]}.toTable()), (30, {30: @[30], 32: @[30, 32], 33: @[30, 33]}.toTable()), (31, {31: @[31], 32: @[31, 32], 33: @[31, 33]}.toTable()), (32, {32: @[32], 33: @[32, 33]}.toTable()), (33, {33: @[33]}.toTable())]
  check paths == expectedPaths

test "bellman ford predecessor and distance on graph":
  let WG = newGraph()
  WG.addEdgesFrom(@[(0, 1), (1, 2), (2, 3), (3, 4)])
  let weight: TableRef[Edge, float] = {(0, 1): 1.0, (1, 2): 1.0, (2, 3): 1.0, (3, 4): 1.0}.newTable()
  let (pred, dist) = WG.bellmanFordPredecessorAndDistance(0, weight=weight)
  let expectedPred = {0: @[], 1: @[0], 2: @[1], 3: @[2], 4: @[3]}.toTable()
  let expectedDist = {0: 0.0, 1: 1.0, 2: 2.0, 3: 3.0, 4: 4.0}.toTable()
  check pred == expectedPred
  check dist == expectedDist

test "bellman ford predecessor and distance on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (1, 2), (2, 3), (3, 4)])
  let weight: TableRef[Edge, float] = {(0, 1): 1.0, (1, 2): 1.0, (2, 3): 1.0, (3, 4): 1.0}.newTable()
  let (pred, dist) = WDG.bellmanFordPredecessorAndDistance(0, weight=weight)
  let expectedPred = {0: @[], 1: @[0], 2: @[1], 3: @[2], 4: @[3]}.toTable()
  let expectedDist = {0: 0.0, 1: 1.0, 2: 2.0, 3: 3.0, 4: 4.0}.toTable()
  check pred == expectedPred
  check dist == expectedDist

test "bellman ford predecessor and distance on directed graph":
  let WDG = newDiGraph()
  WDG.addEdgesFrom(@[(0, 1), (1, 2), (2, 3), (3, 4), (4, 0)])
  let weight: TableRef[Edge, float] = {(0, 1): 1.0, (1, 2): -7.0, (2, 3): 1.0, (3, 4): 1.0, (4, 0): 1.0}.newTable()
  try:
    discard WDG.bellmanFordPredecessorAndDistance(0, weight=weight)
  except NNUnbounded as e:
    check e.msg == "negative cycle detected"

# -------------------------------------------------------------------
# Similarity Measures
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Simple Paths
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Small World
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# s-metric
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Sparsifiers
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Structual Holes
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Summarization
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Swap
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Threshold Graphs
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Tournament
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Traversal
# -------------------------------------------------------------------

test "dfs edges on graph":
  let karate = karateClubGraph()
  var dfsOrderedEdges: seq[Edge] = @[]
  for edge in dfsEdges(karate):
    dfsOrderedEdges.add(edge)
  check dfsOrderedEdges == @[(0, 1), (1, 2), (2, 3), (3, 7), (3, 12), (3, 13), (13, 33), (33, 8), (8, 30), (30, 32), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (23, 25), (25, 24), (24, 27), (24, 31), (31, 28), (23, 29), (29, 26), (33, 9), (33, 19), (1, 17), (1, 21), (0, 4), (4, 6), (6, 5), (5, 10), (5, 16), (0, 11)]

test "dfs edges on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var dfsOrderedEdges: seq[Edge] = @[]
  for edge in dfsEdges(dkarate):
    dfsOrderedEdges.add(edge)
  check dfsOrderedEdges == @[(0, 1), (1, 2), (2, 3), (3, 7), (3, 12), (3, 13), (13, 33), (2, 8), (8, 30), (30, 32), (2, 9), (2, 27), (2, 28), (28, 31), (1, 17), (1, 19), (1, 21), (0, 4), (4, 6), (6, 16), (4, 10), (0, 5), (0, 11), (23, 25), (23, 29)]

test "dfs tree on graph":
  let karate = karateClubGraph()
  let tree = karate.dfsTree()
  check tree.isDirected() == true
  check tree.numberOfNodes() == 34
  check tree.numberOfEdges() == 33
  check tree.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
  check tree.edges() == @[(0, 1), (0, 4), (0, 11), (1, 2), (1, 17), (1, 21), (2, 3), (3, 7), (3, 12), (3, 13), (4, 6), (5, 10), (5, 16), (6, 5), (8, 30), (13, 33), (23, 25), (23, 29), (24, 27), (24, 31), (25, 24), (29, 26), (30, 32), (31, 28), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 23), (33, 8), (33, 9), (33, 19)]

test "dfs tree on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let tree = dkarate.dfsTree()
  check tree.isDirected() == true
  check tree.numberOfNodes() == 34
  check tree.numberOfEdges() == 25
  check tree.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
  check tree.edges() == @[(0, 1), (0, 4), (0, 5), (0, 11), (1, 2), (1, 17), (1, 19), (1, 21), (2, 3), (2, 8), (2, 9), (2, 27), (2, 28), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (6, 16), (8, 30), (13, 33), (23, 25), (23, 29), (28, 31), (30, 32)]

test "dfs predecessor on graph":
  let karate = karateClubGraph()
  let got = karate.dfsPredecessors()
  let expected = {1: 0, 2: 1, 3: 2, 7: 3, 12: 3, 13: 3, 33: 13, 8: 33, 30: 8, 32: 30, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32, 23: 32, 25: 23, 24: 25, 27: 24, 31: 24, 28: 31, 29: 23, 26: 29, 9: 33, 19: 33, 17: 1, 21: 1, 4: 0, 6: 4, 5: 6, 10: 5, 16: 5, 11: 0}.toTable()
  for (node, predecessor) in got.pairs():
    check predecessor == expected[node]

test "dfs predecessor on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = dkarate.dfsPredecessors()
  let expected = {1: 0, 2: 1, 3: 2, 7: 3, 12: 3, 13: 3, 33: 13, 8: 2, 30: 8, 32: 30, 9: 2, 27: 2, 28: 2, 31: 28, 17: 1, 19: 1, 21: 1, 4: 0, 6: 4, 16: 6, 10: 4, 5: 0, 11: 0, 25: 23, 29: 23}.toTable()
  for (node, predecessor) in got.pairs():
    check predecessor == expected[node]

test "dfs successors on graph":
  let karate = karateClubGraph()
  let got = karate.dfsSuccessors()
  let expected = {0: @[1, 4, 11], 1: @[2, 17, 21], 2: @[3], 3: @[7, 12, 13], 13: @[33], 33: @[8, 9, 19], 8: @[30], 30: @[32], 32: @[14, 15, 18, 20, 22, 23], 23: @[25, 29], 25: @[24], 24: @[27, 31], 31: @[28], 29: @[26], 4: @[6], 6: @[5], 5: @[10, 16]
  }.toTable()
  for (node, successors) in got.pairs():
    check successors == expected[node]

test "dfs successors on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let got = dkarate.dfsSuccessors()
  let expected = {0: @[1, 4, 5, 11], 1: @[2, 17, 19, 21], 2: @[3, 8, 9, 27, 28], 3: @[7, 12, 13], 13: @[33], 8: @[30], 30: @[32], 28: @[31], 4: @[6, 10], 6: @[16], 23: @[25, 29]}.toTable()
  for (node, successors) in got.pairs():
    check successors == expected[node]

test "dfs labeled edges on graph":
  let karate = karateClubGraph()
  var labeledEdges: seq[tuple[u, v: Node, direction: string]] = @[]
  for labeledEdge in karate.dfsLabeledEdges():
    labeledEdges.add(labeledEdge)
  check labeledEdges == @[(0, 0, "forward"), (0, 1, "forward"), (1, 0, "nontree"), (1, 2, "forward"), (2, 0, "nontree"), (2, 1, "nontree"), (2, 3, "forward"), (3, 0, "nontree"), (3, 1, "nontree"), (3, 2, "nontree"), (3, 7, "forward"), (7, 0, "nontree"), (7, 1, "nontree"), (7, 2, "nontree"), (7, 3, "nontree"), (3, 7, "reverse"), (3, 12, "forward"), (12, 0, "nontree"), (12, 3, "nontree"), (3, 12, "reverse"), (3, 13, "forward"), (13, 0, "nontree"), (13, 1, "nontree"), (13, 2, "nontree"), (13, 3, "nontree"), (13, 33, "forward"), (33, 8, "forward"), (8, 0, "nontree"), (8, 2, "nontree"), (8, 30, "forward"), (30, 1, "nontree"), (30, 8, "nontree"), (30, 32, "forward"), (32, 2, "nontree"), (32, 8, "nontree"), (32, 14, "forward"), (14, 32, "nontree"), (14, 33, "nontree"), (32, 14, "reverse"), (32, 15, "forward"), (15, 32, "nontree"), (15, 33, "nontree"), (32, 15, "reverse"), (32, 18, "forward"), (18, 32, "nontree"), (18, 33, "nontree"), (32, 18, "reverse"), (32, 20, "forward"), (20, 32, "nontree"), (20, 33, "nontree"), (32, 20, "reverse"), (32, 22, "forward"), (22, 32, "nontree"), (22, 33, "nontree"), (32, 22, "reverse"), (32, 23, "forward"), (23, 25, "forward"), (25, 23, "nontree"), (25, 24, "forward"), (24, 25, "nontree"), (24, 27, "forward"), (27, 2, "nontree"), (27, 23, "nontree"), (27, 24, "nontree"), (27, 33, "nontree"), (24, 27, "reverse"), (24, 31, "forward"), (31, 0, "nontree"), (31, 24, "nontree"), (31, 25, "nontree"), (31, 28, "forward"), (28, 2, "nontree"), (28, 31, "nontree"), (28, 33, "nontree"), (31, 28, "reverse"), (31, 32, "nontree"), (31, 33, "nontree"), (24, 31, "reverse"), (25, 24, "reverse"), (25, 31, "nontree"), (23, 25, "reverse"), (23, 27, "nontree"), (23, 29, "forward"), (29, 23, "nontree"), (29, 26, "forward"), (26, 29, "nontree"), (26, 33, "nontree"), (29, 26, "reverse"), (29, 32, "nontree"), (29, 33, "nontree"), (23, 29, "reverse"), (23, 32, "nontree"), (23, 33, "nontree"), (32, 23, "reverse"), (32, 29, "nontree"), (32, 30, "nontree"), (32, 31, "nontree"), (32, 33, "nontree"), (30, 32, "reverse"), (30, 33, "nontree"), (8, 30, "reverse"), (8, 32, "nontree"), (8, 33, "nontree"), (33, 8, "reverse"), (33, 9, "forward"), (9, 2, "nontree"), (9, 33, "nontree"), (33, 9, "reverse"), (33, 13, "nontree"), (33, 14, "nontree"), (33, 15, "nontree"), (33, 18, "nontree"), (33, 19, "forward"), (19, 0, "nontree"), (19, 1, "nontree"), (19, 33, "nontree"), (33, 19, "reverse"), (33, 20, "nontree"), (33, 22, "nontree"), (33, 23, "nontree"), (33, 26, "nontree"), (33, 27, "nontree"), (33, 28, "nontree"), (33, 29, "nontree"), (33, 30, "nontree"), (33, 31, "nontree"), (33, 32, "nontree"), (13, 33, "reverse"), (3, 13, "reverse"), (2, 3, "reverse"), (2, 7, "nontree"), (2, 8, "nontree"), (2, 9, "nontree"), (2, 13, "nontree"), (2, 27, "nontree"), (2, 28, "nontree"), (2, 32, "nontree"), (1, 2, "reverse"), (1, 3, "nontree"), (1, 7, "nontree"), (1, 13, "nontree"), (1, 17, "forward"), (17, 0, "nontree"), (17, 1, "nontree"), (1, 17, "reverse"), (1, 19, "nontree"), (1, 21, "forward"), (21, 0, "nontree"), (21, 1, "nontree"), (1, 21, "reverse"), (1, 30, "nontree"), (0, 1, "reverse"), (0, 2, "nontree"), (0, 3, "nontree"), (0, 4, "forward"), (4, 0, "nontree"), (4, 6, "forward"), (6, 0, "nontree"), (6, 4, "nontree"), (6, 5, "forward"), (5, 0, "nontree"), (5, 6, "nontree"), (5, 10, "forward"), (10, 0, "nontree"), (10, 4, "nontree"), (10, 5, "nontree"), (5, 10, "reverse"), (5, 16, "forward"), (16, 5, "nontree"), (16, 6, "nontree"), (5, 16, "reverse"), (6, 5, "reverse"), (6, 16, "nontree"), (4, 6, "reverse"), (4, 10, "nontree"), (0, 4, "reverse"), (0, 5, "nontree"), (0, 6, "nontree"), (0, 7, "nontree"), (0, 8, "nontree"), (0, 10, "nontree"), (0, 11, "forward"), (11, 0, "nontree"), (0, 11, "reverse"), (0, 12, "nontree"), (0, 13, "nontree"), (0, 17, "nontree"), (0, 19, "nontree"), (0, 21, "nontree"), (0, 31, "nontree"), (0, 0, "reverse")]

test "dfs labeled edges on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var labeledEdges: seq[tuple[u, v: Node, direction: string]] = @[]
  for labeledEdge in dkarate.dfsLabeledEdges():
    labeledEdges.add(labeledEdge)
  check labeledEdges == @[(0, 0, "forward"), (0, 1, "forward"), (1, 2, "forward"), (2, 3, "forward"), (3, 7, "forward"), (3, 7, "reverse"), (3, 12, "forward"), (3, 12, "reverse"), (3, 13, "forward"), (13, 33, "forward"), (13, 33, "reverse"), (3, 13, "reverse"), (2, 3, "reverse"), (2, 7, "nontree"), (2, 8, "forward"), (8, 30, "forward"), (30, 32, "forward"), (32, 33, "nontree"), (30, 32, "reverse"), (30, 33, "nontree"), (8, 30, "reverse"), (8, 32, "nontree"), (8, 33, "nontree"), (2, 8, "reverse"), (2, 9, "forward"), (9, 33, "nontree"), (2, 9, "reverse"), (2, 13, "nontree"), (2, 27, "forward"), (27, 33, "nontree"), (2, 27, "reverse"), (2, 28, "forward"), (28, 31, "forward"), (31, 32, "nontree"), (31, 33, "nontree"), (28, 31, "reverse"), (28, 33, "nontree"), (2, 28, "reverse"), (2, 32, "nontree"), (1, 2, "reverse"), (1, 3, "nontree"), (1, 7, "nontree"), (1, 13, "nontree"), (1, 17, "forward"), (1, 17, "reverse"), (1, 19, "forward"), (19, 33, "nontree"), (1, 19, "reverse"), (1, 21, "forward"), (1, 21, "reverse"), (1, 30, "nontree"), (0, 1, "reverse"), (0, 2, "nontree"), (0, 3, "nontree"), (0, 4, "forward"), (4, 6, "forward"), (6, 16, "forward"), (6, 16, "reverse"), (4, 6, "reverse"), (4, 10, "forward"), (4, 10, "reverse"), (0, 4, "reverse"), (0, 5, "forward"), (5, 6, "nontree"), (5, 10, "nontree"), (5, 16, "nontree"), (0, 5, "reverse"), (0, 6, "nontree"), (0, 7, "nontree"), (0, 8, "nontree"), (0, 10, "nontree"), (0, 11, "forward"), (0, 11, "reverse"), (0, 12, "nontree"), (0, 13, "nontree"), (0, 17, "nontree"), (0, 19, "nontree"), (0, 21, "nontree"), (0, 31, "nontree"), (0, 0, "reverse"), (14, 14, "forward"), (14, 32, "nontree"), (14, 33, "nontree"), (14, 14, "reverse"), (15, 15, "forward"), (15, 32, "nontree"), (15, 33, "nontree"), (15, 15, "reverse"), (18, 18, "forward"), (18, 32, "nontree"), (18, 33, "nontree"), (18, 18, "reverse"), (20, 20, "forward"), (20, 32, "nontree"), (20, 33, "nontree"), (20, 20, "reverse"), (22, 22, "forward"), (22, 32, "nontree"), (22, 33, "nontree"), (22, 22, "reverse"), (23, 23, "forward"), (23, 25, "forward"), (25, 31, "nontree"), (23, 25, "reverse"), (23, 27, "nontree"), (23, 29, "forward"), (29, 32, "nontree"), (29, 33, "nontree"), (23, 29, "reverse"), (23, 32, "nontree"), (23, 33, "nontree"), (23, 23, "reverse"), (24, 24, "forward"), (24, 25, "nontree"), (24, 27, "nontree"), (24, 31, "nontree"), (24, 24, "reverse"), (26, 26, "forward"), (26, 29, "nontree"), (26, 33, "nontree"), (26, 26, "reverse")]

test "dfs post order nodes on graph":
  let karate = karateClubGraph()
  check karate.dfsPostOrderNodes() == @[7, 12, 14, 15, 18, 20, 22, 27, 28, 31, 24, 25, 26, 29, 23, 32, 30, 8, 9, 19, 33, 13, 3, 2, 17, 21, 1, 10, 16, 5, 6, 4, 11, 0]

test "dfs post order nodes on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.dfsPostOrderNodes() == @[7, 12, 33, 13, 3, 32, 30, 8, 9, 27, 31, 28, 2, 17, 19, 21, 1, 16, 6, 10, 4, 5, 11, 0, 14, 15, 18, 20, 22, 25, 29, 23, 24, 26]

test "dfs pre order nodes on graph":
  let karate = karateClubGraph()
  check karate.dfsPreOrderNodes() == @[0, 1, 2, 3, 7, 12, 13, 33, 8, 30, 32, 14, 15, 18, 20, 22, 23, 25, 24, 27, 31, 28, 29, 26, 9, 19, 17, 21, 4, 6, 5, 10, 16, 11]

test "dfs pre order nodes on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.dfsPreOrderNodes() == @[0, 1, 2, 3, 7, 12, 13, 33, 8, 30, 32, 9, 27, 28, 31, 17, 19, 21, 4, 6, 16, 10, 5, 11, 14, 15, 18, 20, 22, 23, 25, 29, 24, 26]

test "bfs edges on graph":
  let karate = karateClubGraph()
  var bfsOrderedEdges: seq[Edge] = @[]
  for edge in bfsEdges(karate, 0):
    bfsOrderedEdges.add(edge)
  check bfsOrderedEdges == @[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 30), (2, 9), (2, 27), (2, 28), (2, 32), (5, 16), (8, 33), (31, 24), (31, 25), (27, 23), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 29), (33, 26)]

test "bfs edges on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var bfsOrderedEdges: seq[Edge] = @[]
  for edge in bfsEdges(dkarate, 0):
    bfsOrderedEdges.add(edge)
  check bfsOrderedEdges == @[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 30), (2, 9), (2, 27), (2, 28), (2, 32), (5, 16), (8, 33)]

test "bfs tree on graph":
  let karate = karateClubGraph()
  let tree = bfsTree(karate, 0)
  check tree.isDirected() == true
  check tree.numberOfNodes() == 34
  check tree.numberOfEdges() == 33
  check tree.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
  check tree.edges() == @[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 30), (2, 9), (2, 27), (2, 28), (2, 32), (5, 16), (8, 33), (27, 23), (31, 24), (31, 25), (32, 14), (32, 15), (32, 18), (32, 20), (32, 22), (32, 29), (33, 26)]

test "bfs tree on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let tree = bfsTree(dkarate, 0)
  check tree.isDirected() == true
  check tree.numberOfNodes() == 24
  check tree.numberOfEdges() == 23
  check tree.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 27, 28, 30, 31, 32, 33]
  check tree.edges() == @[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 30), (2, 9), (2, 27), (2, 28), (2, 32), (5, 16), (8, 33)]

test "bfs predecessor on graph":
  let karate = karateClubGraph()
  var ret: seq[tuple[node: Node, predecessor: Node]] = @[]
  for pair in karate.bfsPredecessors(0):
    ret.add(pair)
  check ret == @[(1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (10, 0), (11, 0), (12, 0), (13, 0), (17, 0), (19, 0), (21, 0), (31, 0), (30, 1), (9, 2), (27, 2), (28, 2), (32, 2), (16, 5), (33, 8), (24, 31), (25, 31), (23, 27), (14, 32), (15, 32), (18, 32), (20, 32), (22, 32), (29, 32), (26, 33)]

test "bfs predecessor on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var ret: seq[tuple[node: Node, predecessor: Node]] = @[]
  for pair in dkarate.bfsPredecessors(0):
    ret.add(pair)
  check ret == @[(1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (10, 0), (11, 0), (12, 0), (13, 0), (17, 0), (19, 0), (21, 0), (31, 0), (30, 1), (9, 2), (27, 2), (28, 2), (32, 2), (16, 5), (33, 8)]

test "bfs successors on graph":
  let karate = karateClubGraph()
  var ret: seq[tuple[node: Node, successors: seq[Node]]] = @[]
  for pair in karate.bfsSuccessors(0):
    ret.add(pair)
  check ret == @[
    (0, @[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 21, 31]),
    (1, @[30]),
    (2, @[9, 27, 28, 32]),
    (5, @[16]),
    (8, @[33]),
    (31, @[24, 25]),
    (27, @[23]),
    (32, @[14, 15, 18, 20, 22, 29]),
    (33, @[26])
  ]

test "bfs successors on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var ret: seq[tuple[node: Node, successors: seq[Node]]] = @[]
  for pair in dkarate.bfsSuccessors(0):
    ret.add(pair)
  check ret == @[
    (0, @[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 21, 31]),
    (1, @[30]),
    (2, @[9, 27, 28, 32]),
    (5, @[16]),
    (8, @[33])]

test "descendants at distance on graph":
  let karate = karateClubGraph()

  var nodesAtDist0: HashSet[Node] = initHashSet[Node]()
  for node in @[0]:
    nodesAtDist0.incl(node)
  check nodesAtDist0 == karate.descendantsAtDistance(0, 0)

  var nodesAtDist1: HashSet[Node] = initHashSet[Node]()
  for node in @[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 21, 31]:
    nodesAtDist1.incl(node)
  check nodesAtDist1 == karate.descendantsAtDistance(0, 1)

  var nodesAtDist2: HashSet[Node] = initHashSet[Node]()
  for node in @[32, 33, 9, 16, 24, 25, 27, 28, 30]:
    nodesAtDist2.incl(node)
  check nodesAtDist2 == karate.descendantsAtDistance(0, 2)

  var nodesAtDist3: HashSet[Node] = initHashSet[Node]()
  for node in @[14, 15, 18, 20, 22, 23, 26, 29]:
    nodesAtDist3.incl(node)
  check nodesAtDist3 == karate.descendantsAtDistance(0, 3)

  check len(karate.descendantsAtDistance(0, 4)) == 0

test "descendants at distance on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())

  var nodesAtDist0: HashSet[Node] = initHashSet[Node]()
  for node in @[0]:
    nodesAtDist0.incl(node)
  check nodesAtDist0 == dkarate.descendantsAtDistance(0, 0)

  var nodesAtDist1: HashSet[Node] = initHashSet[Node]()
  for node in @[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 21, 31]:
    nodesAtDist1.incl(node)
  check nodesAtDist1 == dkarate.descendantsAtDistance(0, 1)

  var nodesAtDist2: HashSet[Node] = initHashSet[Node]()
  for node in @[32, 33, 9, 16, 27, 28, 30]:
    nodesAtDist2.incl(node)
  check nodesAtDist2 == dkarate.descendantsAtDistance(0, 2)

  check len(dkarate.descendantsAtDistance(0, 3)) == 0

test "bfs beam edges on graph":
  let karate = karateClubGraph()
  let centrality = proc(node: Node): float =
    let table: Table[Node, float] = {0: 0.3554834941851943, 1: 0.2659538704545025, 2: 0.31718938996844476, 3: 0.2111740783205706, 4: 0.07596645881657382, 5: 0.07948057788594247, 6: 0.07948057788594247, 7: 0.17095511498035434, 8: 0.2274050914716605, 9: 0.10267519030637758, 10: 0.07596645881657381, 11: 0.05285416945233648, 12: 0.08425192086558088, 13: 0.22646969838808148, 14: 0.10140627846270832, 15: 0.10140627846270832, 16: 0.023634794260596875, 17: 0.09239675666845953, 18: 0.10140627846270832, 19: 0.14791134007618667, 20: 0.10140627846270832, 21: 0.09239675666845953, 22: 0.10140627846270832, 23: 0.15012328691726787, 24: 0.05705373563802805, 25: 0.05920820250279008, 26: 0.07558192219009324, 27: 0.13347932684333308, 28: 0.13107925627221215, 29: 0.13496528673866567, 30: 0.17476027834493085, 31: 0.19103626979791702, 32: 0.3086510477336959, 33: 0.373371213013235}.toTable()
    return table[node]
  var edges: seq[Edge] = @[]
  for edge in karate.bfsBeamEdges(0, centrality, 5):
    edges.add(edge)
  check edges == @[(0, 2), (0, 1), (0, 8), (0, 13), (0, 3), (2, 32), (1, 30), (8, 33), (3, 7), (32, 31), (31, 28), (31, 25), (25, 23), (25, 24), (23, 29), (23, 27), (29, 26)]

test "bfs beam edges on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let centrality = proc(node: Node): float =
    let table: Table[Node, float] = {0: 0.3554834941851943, 1: 0.2659538704545025, 2: 0.31718938996844476, 3: 0.2111740783205706, 4: 0.07596645881657382, 5: 0.07948057788594247, 6: 0.07948057788594247, 7: 0.17095511498035434, 8: 0.2274050914716605, 9: 0.10267519030637758, 10: 0.07596645881657381, 11: 0.05285416945233648, 12: 0.08425192086558088, 13: 0.22646969838808148, 14: 0.10140627846270832, 15: 0.10140627846270832, 16: 0.023634794260596875, 17: 0.09239675666845953, 18: 0.10140627846270832, 19: 0.14791134007618667, 20: 0.10140627846270832, 21: 0.09239675666845953, 22: 0.10140627846270832, 23: 0.15012328691726787, 24: 0.05705373563802805, 25: 0.05920820250279008, 26: 0.07558192219009324, 27: 0.13347932684333308, 28: 0.13107925627221215, 29: 0.13496528673866567, 30: 0.17476027834493085, 31: 0.19103626979791702, 32: 0.3086510477336959, 33: 0.373371213013235}.toTable()
    return table[node]
  var edges: seq[Edge] = @[]
  for edge in dkarate.bfsBeamEdges(0, centrality, 5):
    edges.add(edge)
  check edges == @[(0, 2), (0, 1), (0, 8), (0, 13), (0, 3), (2, 32), (2, 7), (1, 30), (8, 33), (3, 12)]

# -------------------------------------------------------------------
# Tree
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Triads
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Vitality
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Voronoi cells
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Wiener Index
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Chains
# -------------------------------------------------------------------

test "chain decomposition of graph":
  let karate = karateClubGraph()
  var ret: seq[seq[tuple[u, v: Node]]] = @[]
  for comp in karate.chainDecomposition():
    ret.add(comp)
  check ret == @[@[(0, 2), (2, 1), (1, 0)], @[(0, 3), (3, 2)], @[(0, 5), (5, 6), (6, 4), (4, 0)], @[(0, 6)], @[(0, 7), (7, 3)], @[(0, 8), (8, 33), (33, 13), (13, 3)], @[(0, 10), (10, 5)], @[(0, 12), (12, 3)], @[(0, 13)], @[(0, 17), (17, 1)], @[(0, 19), (19, 33)], @[(0, 21), (21, 1)], @[(0, 31), (31, 24), (24, 25), (25, 23), (23, 32), (32, 30), (30, 8)], @[(1, 3)], @[(1, 7)], @[(1, 13)], @[(1, 19)], @[(1, 30)], @[(2, 7)], @[(2, 8)], @[(2, 9), (9, 33)], @[(2, 13)], @[(2, 27), (27, 24)], @[(2, 28), (28, 31)], @[(2, 32)], @[(33, 14), (14, 32)], @[(33, 15), (15, 32)], @[(33, 18), (18, 32)], @[(33, 20), (20, 32)], @[(33, 22), (22, 32)], @[(33, 23)], @[(33, 26), (26, 29), (29, 23)], @[(33, 27)], @[(33, 28)], @[(33, 29)], @[(33, 30)], @[(33, 31)], @[(33, 32)], @[(8, 32)], @[(32, 29)], @[(32, 31)], @[(23, 27)], @[(25, 31)], @[(4, 10)], @[(6, 16), (16, 5)]]

# -------------------------------------------------------------------
# Connectivity
# -------------------------------------------------------------------

test "check whether it is connected graph":
  let G = pathGraph(4)
  check G.isConnected() ==  true

test "check wheter null graph is connected and fail":
  let G = newGraph()
  try:
    discard G.isConnected()
  except NNPointlessConcept as e:
    check e.msg == "connectivity is undifined for null graph"

test "connected components in graph":
  let G = pathGraph(4)
  G.addPath(@[10, 11, 12])
  var cc = G.connectedComponents().toSeq()
  const cmpLen = proc (x, y: HashSet[Node]): int =
    result = system.cmp(-len(x), -len(y))
  cc.sort(cmpLen)
  var cc1 = initHashSet[Node]()
  cc1.incl(0)
  cc1.incl(1)
  cc1.incl(2)
  cc1.incl(3)
  var cc2 = initHashSet[Node]()
  cc2.incl(10)
  cc2.incl(11)
  cc2.incl(12)
  check cc == @[cc1, cc2]

test "check number of connected components in graph":
  let G = pathGraph(4)
  G.addPath(@[10, 11, 12])
  check G.numberOfConnectedComponents() == 2

test "node connected components in graph":
  let G = pathGraph(4)
  G.addPath(@[10, 11, 12])
  var cc1 = initHashSet[Node]()
  cc1.incl(0)
  cc1.incl(1)
  cc1.incl(2)
  cc1.incl(3)
  check G.nodeConnectedComponents(0) == cc1

test "strongly connected components in directed graph":
  let DG = newDiGraph()
  DG.addEdgesFrom(@[(0, 1), (1, 2), (2, 3), (4, 5), (4, 6), (5, 4), (6, 4)])
  var scc1 = initHashSet[Node]()
  scc1.incl(3)
  var scc2 = initHashSet[Node]()
  scc2.incl(2)
  var scc3 = initHashSet[Node]()
  scc3.incl(1)
  var scc4 = initHashSet[Node]()
  scc4.incl(0)
  var scc5 = initHashSet[Node]()
  scc5.incl(4)
  scc5.incl(5)
  scc5.incl(6)
  check DG.stronglyConnectedComponents().toSeq() == @[scc1, scc2, scc3, scc4, scc5]

test "check number of strongly connected components in directed graph":
  let DG = newDiGraph()
  DG.addEdgesFrom(@[(0, 1), (1, 2), (2, 3), (4, 5), (4, 6), (5, 4), (6, 4)])
  check DG.numberOfStronglyConnectedComponents() == 5

test "check whether it is strongly connected directed graph":
  let DG = newDiGraph()
  DG.addEdgesFrom(@[(4, 5), (4, 6), (5, 4), (6, 4)])
  check DG.isStronglyConnected() == true

test "check whether it is strongly connected directed graph":
  let DG = newDiGraph()
  DG.addEdgesFrom(@[(0, 1), (1, 2), (2, 3), (4, 5), (4, 6), (5, 4), (6, 4)])
  check DG.isStronglyConnected() == false

test "check whether it is strongly connected directed graph and fail":
  let DG = newDiGraph()
  try:
    discard DG.isStronglyConnected()
  except NNPointlessConcept as e:
    check e.msg == "connectivity is undefined for null graph"

test "kosaraju strongly connected components":
  let DG = cycleDiGraph(4)
  DG.addCycle(@[10, 11, 12])
  var cc1 = initHashSet[Node]()
  cc1.incl(10)
  cc1.incl(11)
  cc1.incl(12)
  var cc2 = initHashSet[Node]()
  cc2.incl(0)
  cc2.incl(1)
  cc2.incl(2)
  cc2.incl(3)
  check DG.kosarajuStronglyConnectedComponents().toSeq() == @[cc1, cc2]

test "condensation of directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  let c = dkarate.condensation()
  check c.isDirected() == true
  check c.numberOfNodes() == 34
  check c.numberOfEdges() == 78
  check c.nodes() == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
  check c.edges() == @[(3, 2), (4, 0), (4, 1), (4, 3), (5, 2), (6, 2), (6, 5), (7, 2), (7, 5), (7, 6), (8, 2), (9, 2), (10, 2), (10, 5), (11, 2), (11, 10), (12, 0), (12, 3), (12, 4), (12, 5), (12, 7), (12, 8), (12, 9), (12, 11), (14, 2), (16, 0), (16, 3), (16, 4), (16, 6), (16, 12), (16, 13), (16, 14), (16, 15), (18, 17), (20, 18), (20, 19), (21, 17), (21, 18), (21, 19), (23, 0), (23, 1), (23, 3), (23, 4), (23, 7), (23, 10), (23, 12), (23, 13), (23, 14), (23, 15), (23, 16), (23, 18), (23, 19), (23, 20), (23, 21), (23, 22), (24, 2), (24, 5), (25, 2), (25, 5), (26, 2), (26, 5), (27, 2), (27, 5), (28, 2), (28, 5), (29, 10), (30, 2), (30, 5), (31, 2), (31, 5), (31, 9), (31, 29), (31, 30), (32, 9), (32, 10), (32, 29), (33, 2), (33, 30)]

test "weakly connected components on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  var wcc = @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].toHashSet()
  check dkarate.weaklyConnectedComponents.toSeq() == @[wcc]

test "check number of weakly connected components on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.numberOfWeaklyConnectedComponents() == 1

test "check whether it is weakly connected directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.isWeaklyConnected() == true

test "check whether it is weakly connected directed graph":
  let DG = newDiGraph()
  DG.addEdgesFrom(@[(0, 1), (1, 2), (2, 3), (4, 5), (4, 6), (5, 4), (6, 4)])
  check DG.isWeaklyConnected() == false

test "check whether it is weakly connected directed graph and fail":
  let DG = newDiGraph()
  try:
    discard DG.isWeaklyConnected()
  except NNPointlessConcept as e:
    check e.msg == "connectivity is undefined for null graph"

test "attracting components on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.attractingComponents().toSeq() == @[@[7].toHashSet(), @[12].toHashSet(), @[33].toHashSet(), @[17].toHashSet(), @[21].toHashSet(), @[16].toHashSet(), @[10].toHashSet(), @[11].toHashSet()]

test "check number of attracting components on directed graph":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.numberOfAttractingComponents() == 8

test "check whether directed graph is a single attracting component":
  let dkarate = newDiGraph(karateClubGraph().edges())
  check dkarate.isAttractingComponent() == false

test "articulation points in grpah":
  let G = barbellGraph(4, 2)
  check G.articulationPoints().toSeq() == @[6, 5, 4, 3]

test "biconnected components in graph":
  let G = lollipopGraph(5, 1)
  check G.biconnectedComponents().toSeq() == @[@[4, 5].toHashSet(), @[0, 1, 2, 3, 4].toHashSet()]

test "biconnected component edges in graph":
  let G = barbellGraph(4, 2)
  check G.biconnectedComponentEdges().toSeq() == @[@[(6, 7), (7, 8), (8, 6), (8, 9), (9, 6), (9, 7)], @[(5, 6)], @[(4, 5)], @[(3, 4)], @[(0, 1), (1, 2), (2, 0), (2, 3), (3, 0), (3, 1)]]

test "check whether it is biconnected graph":
  let G = pathGraph(4)
  check G.isBiconnected() == false
  G.addEdge(0, 3)
  check G.isBiconnected() == true

# -------------------------------------------------------------------
# Eulerian
# -------------------------------------------------------------------

test "check whether graph is eulerian":
  let G = completeGraph(5)
  check G.isEulerian() == true
  let petersen = petersenGraph()
  check petersen.isEulerian() == false

test "check whether directed graph is eulerian":
  let DG = newDiGraph()
  DG.addEdgesFrom(@[(0, 3), (1, 2), (2, 3), (3, 0), (3, 1)])
  check DG.isEulerian() == true

